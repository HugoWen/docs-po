# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/options_resolver.rst:6
msgid "The OptionsResolver Component"
msgstr ""

#: ../../components/options_resolver.rst:8
msgid ""
"The OptionsResolver component is :phpfunction:`array_replace` on steroids. "
"It allows you to create an options system with required options, defaults, "
"validation (type, value), normalization and more."
msgstr ""

#: ../../components/options_resolver.rst:13
msgid "Installation"
msgstr ""

#: ../../components/options_resolver.rst:15
msgid "You can install the component in 2 different ways:"
msgstr ""

#: ../../components/options_resolver.rst:17
msgid ""
":doc:`Install it via Composer </components/using_components>` (``symfony"
"/options-resolver`` on `Packagist`_);"
msgstr ""

#: ../../components/options_resolver.rst:18
msgid ""
"Use the official Git repository "
"(https://github.com/symfony/OptionsResolver)."
msgstr ""

#: ../../components/options_resolver.rst:21
msgid "Notes on Previous Versions"
msgstr ""

#: ../../components/options_resolver.rst:23
msgid ""
"This documentation was written for Symfony 2.6 and later. If you use an "
"older version, please `read the Symfony 2.5 documentation`_. For a list of "
"changes, see the `CHANGELOG`_."
msgstr ""

#: ../../components/options_resolver.rst:29
msgid "Usage"
msgstr ""

#: ../../components/options_resolver.rst:31
msgid ""
"Imagine you have a ``Mailer`` class which has four options: ``host``, "
"``username``, ``password`` and ``port``::"
msgstr ""

#: ../../components/options_resolver.rst:44
msgid ""
"When accessing the ``$options``, you need to add a lot of boilerplate code "
"to check which options are set::"
msgstr ""

#: ../../components/options_resolver.rst:74
msgid ""
"This boilerplate is hard to read and repetitive. Also, the default values of"
" the options are buried in the business logic of your code. Use the "
":phpfunction:`array_replace` to fix that::"
msgstr ""

#: ../../components/options_resolver.rst:93
msgid ""
"Now all four options are guaranteed to be set. But what happens if the user "
"of the ``Mailer`` class makes a mistake?"
msgstr ""

#: ../../components/options_resolver.rst:102
msgid ""
"No error will be shown. In the best case, the bug will appear during "
"testing, but the developer will spend time looking for the problem. In the "
"worst case, the bug might not appear until it's deployed to the live system."
msgstr ""

#: ../../components/options_resolver.rst:106
msgid ""
"Fortunately, the "
":class:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver` class "
"helps you to fix this problem::"
msgstr ""

#: ../../components/options_resolver.rst:129
msgid ""
"Like before, all options will be guaranteed to be set. Additionally, an "
":class:`Symfony\\\\Component\\\\OptionsResolver\\\\Exception\\\\UndefinedOptionsException`"
" is thrown if an unknown option is passed::"
msgstr ""

#: ../../components/options_resolver.rst:140
msgid ""
"The rest of your code can access the values of the options without "
"boilerplate code::"
msgstr ""

#: ../../components/options_resolver.rst:159
msgid ""
"It's a good practice to split the option configuration into a separate "
"method::"
msgstr ""

#: ../../components/options_resolver.rst:186
msgid ""
"First, your code becomes easier to read, especially if the constructor does "
"more than processing options. Second, sub-classes may now override the "
"``configureOptions()`` method to adjust the configuration of the options::"
msgstr ""

#: ../../components/options_resolver.rst:205
msgid "Required Options"
msgstr ""

#: ../../components/options_resolver.rst:207
msgid ""
"If an option must be set by the caller, pass that option to "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setRequired`."
" For example, to make the ``host`` option required, you can do::"
msgstr ""

#: ../../components/options_resolver.rst:223
msgid ""
"As of Symfony 2.6, ``setRequired()`` accepts both an array of options or a "
"single option. Prior to 2.6, you could only pass arrays."
msgstr ""

#: ../../components/options_resolver.rst:227
msgid ""
"If you omit a required option, a "
":class:`Symfony\\\\Component\\\\OptionsResolver\\\\Exception\\\\MissingOptionsException`"
" will be thrown::"
msgstr ""

#: ../../components/options_resolver.rst:235
msgid ""
"The "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setRequired`"
" method accepts a single name or an array of option names if you have more "
"than one required option::"
msgstr ""

#: ../../components/options_resolver.rst:251
msgid ""
"The methods "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isRequired`"
" and "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::getRequiredOptions`"
" were introduced in Symfony 2.6."
msgstr ""

#: ../../components/options_resolver.rst:256
msgid ""
"Use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isRequired`"
" to find out if an option is required. You can use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::getRequiredOptions`"
" to retrieve the names of all required options::"
msgstr ""

#: ../../components/options_resolver.rst:276
msgid ""
"The methods "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isMissing`"
" and "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::getMissingOptions`"
" were introduced in Symfony 2.6."
msgstr ""

#: ../../components/options_resolver.rst:281
msgid ""
"If you want to check whether a required option is still missing from the "
"default options, you can use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isMissing`."
" The difference between this and "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isRequired`"
" is that this method will return false if a required option has already been"
" set::"
msgstr ""

#: ../../components/options_resolver.rst:322
msgid ""
"The method "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::getMissingOptions`"
" lets you access the names of all missing options."
msgstr ""

#: ../../components/options_resolver.rst:326
msgid "Type Validation"
msgstr ""

#: ../../components/options_resolver.rst:328
msgid ""
"You can run additional checks on the options to make sure they were passed "
"correctly. To validate the types of the options, call "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setAllowedTypes`::"
msgstr ""

#: ../../components/options_resolver.rst:345
msgid ""
"For each option, you can define either just one type or an array of "
"acceptable types. You can pass any type for which an ``is_<type>()`` "
"function is defined in PHP. Additionally, you may pass fully qualified class"
" or interface names."
msgstr ""

#: ../../components/options_resolver.rst:349
msgid ""
"If you pass an invalid option now, an "
":class:`Symfony\\\\Component\\\\OptionsResolver\\\\Exception\\\\InvalidOptionsException`"
" is thrown::"
msgstr ""

#: ../../components/options_resolver.rst:360
msgid ""
"In sub-classes, you can use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::addAllowedTypes`"
" to add additional allowed types without erasing the ones already set."
msgstr ""

#: ../../components/options_resolver.rst:363
msgid ""
"Before Symfony 2.6, ``setAllowedTypes()`` and ``addAllowedTypes()`` expected"
" the values to be given as an array mapping option names to allowed types: "
"``$resolver->setAllowedTypes(array('port' => array('null', 'int')));``"
msgstr ""

#: ../../components/options_resolver.rst:369
msgid "Value Validation"
msgstr ""

#: ../../components/options_resolver.rst:371
msgid ""
"Some options can only take one of a fixed list of predefined values. For "
"example, suppose the ``Mailer`` class has a ``transport`` option which can "
"be one of ``sendmail``, ``mail`` and ``smtp``. Use the method "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setAllowedValues`"
" to verify that the passed option contains one of these values::"
msgstr ""

#: ../../components/options_resolver.rst:390
msgid ""
"If you pass an invalid transport, an "
":class:`Symfony\\\\Component\\\\OptionsResolver\\\\Exception\\\\InvalidOptionsException`"
" is thrown::"
msgstr ""

#: ../../components/options_resolver.rst:401
msgid ""
"For options with more complicated validation schemes, pass a closure which "
"returns ``true`` for acceptable values and ``false`` for invalid values::"
msgstr ""

#: ../../components/options_resolver.rst:411
msgid ""
"In sub-classes, you can use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::addAllowedValues`"
" to add additional allowed values without erasing the ones already set."
msgstr ""

#: ../../components/options_resolver.rst:414
msgid ""
"Before Symfony 2.6, ``setAllowedValues()`` and ``addAllowedValues()`` "
"expected the values to be given as an array mapping option names to allowed "
"values: ``$resolver->setAllowedValues(array('transport' => array('sendmail',"
" 'mail', 'smtp')));``"
msgstr ""

#: ../../components/options_resolver.rst:420
msgid "Option Normalization"
msgstr ""

#: ../../components/options_resolver.rst:422
msgid ""
"Sometimes, option values need to be normalized before you can use them. For "
"instance, assume that the ``host`` should always start with ``http://``. To "
"do that, you can write normalizers. Normalizers are executed after "
"validating an option. You can configure a normalizer by calling "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setNormalizer`::"
msgstr ""

#: ../../components/options_resolver.rst:447
msgid ""
"The method "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setNormalizer`"
" was introduced in Symfony 2.6. Before, you had to use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setNormalizers`."
msgstr ""

#: ../../components/options_resolver.rst:452
msgid ""
"The normalizer receives the actual ``$value`` and returns the normalized "
"form. You see that the closure also takes an ``$options`` parameter. This is"
" useful if you need to use other options during normalization::"
msgstr ""

#: ../../components/options_resolver.rst:478
msgid "Default Values that Depend on another Option"
msgstr ""

#: ../../components/options_resolver.rst:480
msgid ""
"Suppose you want to set the default value of the ``port`` option based on "
"the encryption chosen by the user of the ``Mailer`` class. More precisely, "
"you want to set the port to ``465`` if SSL is used and to ``25`` otherwise."
msgstr ""

#: ../../components/options_resolver.rst:484
msgid ""
"You can implement this feature by passing a closure as the default value of "
"the ``port`` option. The closure receives the options as argument. Based on "
"these options, you can return the desired default value::"
msgstr ""

#: ../../components/options_resolver.rst:511
msgid ""
"The argument of the callable must be type hinted as ``Options``. Otherwise, "
"the callable itself is considered as the default value of the option."
msgstr ""

#: ../../components/options_resolver.rst:516
msgid ""
"The closure is only executed if the ``port`` option isn't set by the user or"
" overwritten in a sub-class."
msgstr ""

#: ../../components/options_resolver.rst:519
msgid ""
"A previously set default value can be accessed by adding a second argument "
"to the closure::"
msgstr ""

#: ../../components/options_resolver.rst:553
msgid ""
"As seen in the example, this feature is mostly useful if you want to reuse "
"the default values set in parent classes in sub-classes."
msgstr ""

#: ../../components/options_resolver.rst:557
msgid "Options without Default Values"
msgstr ""

#: ../../components/options_resolver.rst:559
msgid ""
"In some cases, it is useful to define an option without setting a default "
"value. This is useful if you need to know whether or not the user *actually*"
" set an option or not. For example, if you set the default value for an "
"option, it's not possible to know whether the user passed this value or if "
"it simply comes from the default::"
msgstr ""

#: ../../components/options_resolver.rst:586
msgid ""
"The method "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setDefined`"
" was introduced in Symfony 2.6. Before, you had to use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setOptional`."
msgstr ""

#: ../../components/options_resolver.rst:591
msgid ""
"You can use "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::setDefined`"
" to define an option without setting a default value. Then the option will "
"only be included in the resolved options if it was actually passed to "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::resolve`::"
msgstr ""

#: ../../components/options_resolver.rst:628
msgid ""
"You can also pass an array of option names if you want to define multiple "
"options in one go::"
msgstr ""

#: ../../components/options_resolver.rst:642
msgid ""
"The method "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isDefined`"
" and "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::getDefinedOptions`"
" were introduced in Symfony 2.6."
msgstr ""

#: ../../components/options_resolver.rst:647
msgid ""
"The methods "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::isDefined`"
" and "
":method:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver::getDefinedOptions`"
" let you find out which options are defined::"
msgstr ""

#: ../../components/options_resolver.rst:673
msgid "Performance Tweaks"
msgstr ""

#: ../../components/options_resolver.rst:675
msgid ""
"With the current implementation, the ``configureOptions()`` method will be "
"called for every single instance of the ``Mailer`` class. Depending on the "
"amount of option configuration and the number of created instances, this may"
" add noticeable overhead to your application. If that overhead becomes a "
"problem, you can change your code to do the configuration only once per "
"class::"
msgstr ""

#: ../../components/options_resolver.rst:708
msgid ""
"Now the :class:`Symfony\\\\Component\\\\OptionsResolver\\\\OptionsResolver` "
"instance will be created once per class and reused from that on. Be aware "
"that this may lead to memory leaks in long-running applications, if the "
"default options contain references to objects or object graphs. If that's "
"the case for you, implement a method ``clearOptionsConfig()`` and call it "
"periodically::"
msgstr ""

#: ../../components/options_resolver.rst:727
msgid ""
"That's it! You now have all the tools and knowledge needed to easily process"
" options in your code."
msgstr ""

#: ../../components/options_resolver.rst:1
#: ../../components/options_resolver.rst:1
msgid "OptionsResolver"
msgstr ""

#: ../../components/options_resolver.rst:1
msgid "Components"
msgstr ""
