# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/http_foundation/introduction.rst:7
msgid "The HttpFoundation Component"
msgstr ""

#: ../../components/http_foundation/introduction.rst:9
msgid ""
"The HttpFoundation component defines an object-oriented layer for the HTTP "
"specification."
msgstr ""

#: ../../components/http_foundation/introduction.rst:12
msgid ""
"In PHP, the request is represented by some global variables (``$_GET``, "
"``$_POST``, ``$_FILES``, ``$_COOKIE``, ``$_SESSION``, ...) and the response "
"is generated by some functions (``echo``, ``header``, ``setcookie``, ...)."
msgstr ""

#: ../../components/http_foundation/introduction.rst:16
msgid ""
"The Symfony HttpFoundation component replaces these default PHP global "
"variables and functions by an object-oriented layer."
msgstr ""

#: ../../components/http_foundation/introduction.rst:20
msgid "Installation"
msgstr ""

#: ../../components/http_foundation/introduction.rst:22
msgid "You can install the component in 2 different ways:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:24
msgid ""
":doc:`Install it via Composer </components/using_components>` (``symfony"
"/http-foundation`` on `Packagist`_);"
msgstr ""

#: ../../components/http_foundation/introduction.rst:25
msgid ""
"Use the official Git repository (https://github.com/symfony/HttpFoundation)."
msgstr ""

#: ../../components/http_foundation/introduction.rst:30
msgid "Request"
msgstr ""

#: ../../components/http_foundation/introduction.rst:32
msgid ""
"The most common way to create a request is to base it on the current PHP "
"global variables with "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::createFromGlobals`::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:40
msgid ""
"which is almost equivalent to the more verbose, but also more flexible, "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::__construct` "
"call::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:53
msgid "Accessing Request Data"
msgstr ""

#: ../../components/http_foundation/introduction.rst:55
msgid ""
"A Request object holds information about the client request. This "
"information can be accessed via several public properties:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:58
msgid "``request``: equivalent of ``$_POST``;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:60
msgid "``query``: equivalent of ``$_GET`` (``$request->query->get('name')``);"
msgstr ""

#: ../../components/http_foundation/introduction.rst:62
msgid "``cookies``: equivalent of ``$_COOKIE``;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:64
msgid ""
"``attributes``: no equivalent - used by your app to store other data (see "
":ref:`below <component-foundation-attributes>`);"
msgstr ""

#: ../../components/http_foundation/introduction.rst:66
msgid "``files``: equivalent of ``$_FILES``;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:68
msgid "``server``: equivalent of ``$_SERVER``;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:70
msgid ""
"``headers``: mostly equivalent to a sub-set of ``$_SERVER`` "
"(``$request->headers->get('User-Agent')``)."
msgstr ""

#: ../../components/http_foundation/introduction.rst:73
msgid ""
"Each property is a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag` instance (or"
" a sub-class of), which is a data holder class:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:76
msgid "``request``: :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:78
msgid "``query``:   :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:80
msgid "``cookies``: :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:82
msgid "``attributes``: :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:84
msgid "``files``:   :class:`Symfony\\\\Component\\\\HttpFoundation\\\\FileBag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:86
msgid "``server``:  :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ServerBag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:88
msgid "``headers``: :class:`Symfony\\\\Component\\\\HttpFoundation\\\\HeaderBag`."
msgstr ""

#: ../../components/http_foundation/introduction.rst:90
msgid ""
"All :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag` "
"instances have methods to retrieve and update its data:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:94
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::all`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:94
msgid "Returns the parameters."
msgstr ""

#: ../../components/http_foundation/introduction.rst:97
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::keys`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:97
msgid "Returns the parameter keys."
msgstr ""

#: ../../components/http_foundation/introduction.rst:100
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::replace`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:100
msgid "Replaces the current parameters by a new set."
msgstr ""

#: ../../components/http_foundation/introduction.rst:103
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::add`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:103
msgid "Adds parameters."
msgstr ""

#: ../../components/http_foundation/introduction.rst:106
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::get`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:106
msgid "Returns a parameter by name."
msgstr ""

#: ../../components/http_foundation/introduction.rst:109
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::set`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:109
msgid "Sets a parameter by name."
msgstr ""

#: ../../components/http_foundation/introduction.rst:112
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::has`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:112
msgid "Returns ``true`` if the parameter is defined."
msgstr ""

#: ../../components/http_foundation/introduction.rst:115
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::remove`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:115
msgid "Removes a parameter."
msgstr ""

#: ../../components/http_foundation/introduction.rst:117
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag` instance"
" also has some methods to filter the input values:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:121
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getAlpha`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:121
msgid "Returns the alphabetic characters of the parameter value;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:124
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getAlnum`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:124
msgid "Returns the alphabetic characters and digits of the parameter value;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:127
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getDigits`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:127
msgid "Returns the digits of the parameter value;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:130
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::getInt`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:130
msgid "Returns the parameter value converted to integer;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:133
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::filter`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:133
msgid ""
"Filters the parameter by using the PHP :phpfunction:`filter_var` function."
msgstr ""

#: ../../components/http_foundation/introduction.rst:135
msgid ""
"All getters takes up to three arguments: the first one is the parameter name"
" and the second one is the default value to return if the parameter does not"
" exist::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:150
msgid ""
"When PHP imports the request query, it handles request parameters like "
"``foo[bar]=bar`` in a special way as it creates an array. So you can get the"
" ``foo`` parameter and you will get back an array with a ``bar`` element. "
"But sometimes, you might want to get the value for the \"original\" "
"parameter name: ``foo[bar]``. This is possible with all the ``ParameterBag``"
" getters like "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::get` via the "
"third argument::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:171
msgid ""
"Thanks to the public ``attributes`` property, you can store additional data "
"in the request, which is also an instance of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`. This is "
"mostly used to attach information that belongs to the Request and that needs"
" to be accessed from many different points in your application. For "
"information on how this is used in the Symfony framework, see :ref:`the "
"Symfony book <book-fundamentals-attributes>`."
msgstr ""

#: ../../components/http_foundation/introduction.rst:179
msgid ""
"Finally, the raw data sent with the request body can be accessed using "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getContent`::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:184
msgid ""
"For instance, this may be useful to process a JSON string sent to the "
"application by a remote service using the HTTP POST method."
msgstr ""

#: ../../components/http_foundation/introduction.rst:188
msgid "Identifying a Request"
msgstr ""

#: ../../components/http_foundation/introduction.rst:190
msgid ""
"In your application, you need a way to identify a request; most of the time,"
" this is done via the \"path info\" of the request, which can be accessed "
"via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getPathInfo` "
"method::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:199
msgid "Simulating a Request"
msgstr ""

#: ../../components/http_foundation/introduction.rst:201
msgid ""
"Instead of creating a request based on the PHP globals, you can also "
"simulate a request::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:210
msgid ""
"The :method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::create` "
"method creates a request based on a URI, a method and some parameters (the "
"query parameters or the request ones depending on the HTTP method); and of "
"course, you can also override all other variables as well (by default, "
"Symfony creates sensible defaults for all the PHP global variables)."
msgstr ""

#: ../../components/http_foundation/introduction.rst:216
msgid ""
"Based on such a request, you can override the PHP global variables via "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::overrideGlobals`::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:223
msgid ""
"You can also duplicate an existing request via "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::duplicate` or "
"change a bunch of parameters with a single call to "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::initialize`."
msgstr ""

#: ../../components/http_foundation/introduction.rst:229
msgid "Accessing the Session"
msgstr ""

#: ../../components/http_foundation/introduction.rst:231
msgid ""
"If you have a session attached to the request, you can access it via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getSession` "
"method; the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::hasPreviousSession`"
" method tells you if the request contains a session which was started in one"
" of the previous requests."
msgstr ""

#: ../../components/http_foundation/introduction.rst:239
msgid "Accessing `Accept-*` Headers Data"
msgstr ""

#: ../../components/http_foundation/introduction.rst:241
msgid ""
"You can easily access basic data extracted from ``Accept-*`` headers by "
"using the following methods:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:245
msgid ""
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getAcceptableContentTypes`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:245
msgid ""
"Returns the list of accepted content types ordered by descending quality."
msgstr ""

#: ../../components/http_foundation/introduction.rst:248
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getLanguages`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:248
msgid "Returns the list of accepted languages ordered by descending quality."
msgstr ""

#: ../../components/http_foundation/introduction.rst:251
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getCharsets`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:251
msgid "Returns the list of accepted charsets ordered by descending quality."
msgstr ""

#: ../../components/http_foundation/introduction.rst:257
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Request::getEncodings`"
msgstr ""

#: ../../components/http_foundation/introduction.rst:254
msgid "Returns the list of accepted encodings ordered by descending quality."
msgstr ""

#: ../../components/http_foundation/introduction.rst:256
msgid "The ``getEncodings()`` method was introduced in Symfony 2.4."
msgstr ""

#: ../../components/http_foundation/introduction.rst:259
msgid ""
"If you need to get full access to parsed data from ``Accept``, ``Accept-"
"Language``, ``Accept-Charset`` or ``Accept-Encoding``, you can use "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\AcceptHeader` utility "
"class::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:277
msgid "Accessing other Data"
msgstr ""

#: ../../components/http_foundation/introduction.rst:279
msgid ""
"The ``Request`` class has many other methods that you can use to access the "
"request information. Have a look at :class:`the Request API "
"<Symfony\\\\Component\\\\HttpFoundation\\\\Request>` for more information "
"about them."
msgstr ""

#: ../../components/http_foundation/introduction.rst:285
msgid "Overriding the Request"
msgstr ""

#: ../../components/http_foundation/introduction.rst:287
msgid ""
"The ``Request`` class should not be overridden as it is a data object that "
"represents an HTTP message. But when moving from a legacy system, adding "
"methods or changing some default behavior might help. In that case, register"
" a PHP callable that is able to create an instance of your ``Request`` "
"class::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:319
msgid "Response"
msgstr ""

#: ../../components/http_foundation/introduction.rst:321
msgid ""
"A :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` object holds "
"all the information that needs to be sent back to the client from a given "
"request. The constructor takes up to three arguments: the response content, "
"the status code, and an array of HTTP headers::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:334
msgid ""
"This information can also be manipulated after the Response object "
"creation::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:343
msgid ""
"When setting the ``Content-Type`` of the Response, you can set the charset, "
"but it is better to set it via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setCharset` "
"method::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:349
msgid ""
"Note that by default, Symfony assumes that your Responses are encoded in "
"UTF-8."
msgstr ""

#: ../../components/http_foundation/introduction.rst:353
msgid "Sending the Response"
msgstr ""

#: ../../components/http_foundation/introduction.rst:355
msgid ""
"Before sending the Response, you can ensure that it is compliant with the "
"HTTP specification by calling the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::prepare` "
"method::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:361
msgid ""
"Sending the response to the client is then as simple as calling "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::send`::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:367
msgid "Setting Cookies"
msgstr ""

#: ../../components/http_foundation/introduction.rst:369
msgid ""
"The response cookies can be manipulated through the ``headers`` public "
"attribute::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:376
msgid ""
"The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ResponseHeaderBag::setCookie`"
" method takes an instance of "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Cookie` as an argument."
msgstr ""

#: ../../components/http_foundation/introduction.rst:381
msgid ""
"You can clear a cookie via the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ResponseHeaderBag::clearCookie`"
" method."
msgstr ""

#: ../../components/http_foundation/introduction.rst:385
msgid "Managing the HTTP Cache"
msgstr ""

#: ../../components/http_foundation/introduction.rst:387
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` class has a "
"rich set of methods to manipulate the HTTP headers related to the cache:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:390
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setPublic`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:391
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setPrivate`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:392
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::expire`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:393
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setExpires`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:394
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setMaxAge`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:395
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setSharedMaxAge`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:396
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setTtl`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:397
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setClientTtl`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:398
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setLastModified`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:399
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setEtag`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:400
msgid ":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setVary`;"
msgstr ""

#: ../../components/http_foundation/introduction.rst:402
msgid ""
"The :method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::setCache` "
"method can be used to set the most commonly used cache information in one "
"method call::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:415
msgid ""
"To check if the Response validators (``ETag``, ``Last-Modified``) match a "
"conditional value specified in the client Request, use the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\Response::isNotModified` "
"method::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:424
msgid ""
"If the Response is not modified, it sets the status code to 304 and removes "
"the actual response content."
msgstr ""

#: ../../components/http_foundation/introduction.rst:428
msgid "Redirecting the User"
msgstr ""

#: ../../components/http_foundation/introduction.rst:430
msgid ""
"To redirect the client to another URL, you can use the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\RedirectResponse` class::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:440
msgid "Streaming a Response"
msgstr ""

#: ../../components/http_foundation/introduction.rst:442
msgid ""
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse` "
"class allows you to stream the Response back to the client. The response "
"content is represented by a PHP callable instead of a string::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:460
msgid ""
"The ``flush()`` function does not flush buffering. If ``ob_start()`` has "
"been called before or the ``output_buffering`` ``php.ini`` option is "
"enabled, you must call ``ob_flush()`` before ``flush()``."
msgstr ""

#: ../../components/http_foundation/introduction.rst:464
msgid ""
"Additionally, PHP isn't the only layer that can buffer output. Your web "
"server might also buffer based on its configuration. Even more, if you use "
"fastcgi, buffering can't be disabled at all."
msgstr ""

#: ../../components/http_foundation/introduction.rst:471
msgid "Serving Files"
msgstr ""

#: ../../components/http_foundation/introduction.rst:473
msgid ""
"When sending a file, you must add a ``Content-Disposition`` header to your "
"response. While creating this header for basic file downloads is easy, using"
" non-ASCII filenames is more involving. The "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ResponseHeaderBag::makeDisposition`"
" abstracts the hard work behind a simple API::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:488
msgid ""
"Alternatively, if you are serving a static file, you can use a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse`::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:496
msgid ""
"The ``BinaryFileResponse`` will automatically handle ``Range`` and ``If-"
"Range`` headers from the request. It also supports ``X-Sendfile`` (see for "
"`Nginx`_ and `Apache`_). To make use of it, you need to determine whether or"
" not the ``X-Sendfile-Type`` header should be trusted and call "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse::trustXSendfileTypeHeader`"
" if it should::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:505
msgid ""
"You can still set the ``Content-Type`` of the sent file, or change its "
"``Content-Disposition``::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:513
msgid "The ``deleteFileAfterSend()`` method was introduced in Symfony 2.6."
msgstr ""

#: ../../components/http_foundation/introduction.rst:516
msgid ""
"It is possible to delete the file after the request is sent with the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse::deleteFileAfterSend`"
" method. Please note that this will not work when the ``X-Sendfile`` header "
"is set."
msgstr ""

#: ../../components/http_foundation/introduction.rst:523
msgid "Creating a JSON Response"
msgstr ""

#: ../../components/http_foundation/introduction.rst:525
msgid ""
"Any type of response can be created via the "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` class by setting"
" the right content and headers. A JSON response might look like this::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:537
msgid ""
"There is also a helpful "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\JsonResponse` class, which"
" can make this even easier::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:547
msgid ""
"This encodes your array of data to JSON and sets the ``Content-Type`` header"
" to ``application/json``."
msgstr ""

#: ../../components/http_foundation/introduction.rst:552
msgid ""
"To avoid XSSI `JSON Hijacking`_, you should pass an associative array as the"
" outer-most array to ``JsonResponse`` and not an indexed array so that the "
"final result is an object (e.g. ``{\"object\": \"not inside an array\"}``) "
"instead of an array (e.g. ``[{\"object\": \"inside an array\"}]``). Read the"
" `OWASP guidelines`_ for more information."
msgstr ""

#: ../../components/http_foundation/introduction.rst:558
msgid ""
"Only methods that respond to GET requests are vulnerable to XSSI 'JSON "
"Hijacking'. Methods responding to POST requests only remain unaffected."
msgstr ""

#: ../../components/http_foundation/introduction.rst:562
msgid "JSONP Callback"
msgstr ""

#: ../../components/http_foundation/introduction.rst:564
msgid ""
"If you're using JSONP, you can set the callback function that the data "
"should be passed to::"
msgstr ""

#: ../../components/http_foundation/introduction.rst:569
msgid ""
"In this case, the ``Content-Type`` header will be ``text/javascript`` and "
"the response content will look like this:"
msgstr ""

#: ../../components/http_foundation/introduction.rst:577
msgid "Session"
msgstr ""

#: ../../components/http_foundation/introduction.rst:579
msgid ""
"The session information is in its own document: "
":doc:`/components/http_foundation/sessions`."
msgstr ""

#: ../../components/http_foundation/introduction.rst:1
msgid "HTTP"
msgstr ""

#: ../../components/http_foundation/introduction.rst:1
#: ../../components/http_foundation/introduction.rst:1
msgid "HttpFoundation"
msgstr ""

#: ../../components/http_foundation/introduction.rst:1
msgid "Components"
msgstr ""
