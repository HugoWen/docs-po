# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/process.rst:6
msgid "The Process Component"
msgstr ""

#: ../../components/process.rst:8
msgid "The Process component executes commands in sub-processes."
msgstr ""

#: ../../components/process.rst:11
msgid "Installation"
msgstr ""

#: ../../components/process.rst:13
msgid "You can install the component in 2 different ways:"
msgstr ""

#: ../../components/process.rst:15
msgid ""
":doc:`Install it via Composer </components/using_components>` "
"(``symfony/process`` on `Packagist`_);"
msgstr ""

#: ../../components/process.rst:16
msgid "Use the official Git repository (https://github.com/symfony/Process)."
msgstr ""

#: ../../components/process.rst:19
msgid "Usage"
msgstr ""

#: ../../components/process.rst:21
msgid ""
"The :class:`Symfony\\\\Component\\\\Process\\\\Process` class allows you to "
"execute a command in a sub-process::"
msgstr ""

#: ../../components/process.rst:36
msgid ""
"The component takes care of the subtle differences between the different "
"platforms when executing the command."
msgstr ""

#: ../../components/process.rst:39
msgid ""
"The ``getOutput()`` method always return the whole content of the standard "
"output of the command and ``getErrorOutput()`` the content of the error "
"output. Alternatively, the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::getIncrementalOutput` "
"and "
":method:`Symfony\\\\Component\\\\Process\\\\Process::getIncrementalErrorOutput`"
" methods returns the new outputs since the last call."
msgstr ""

#: ../../components/process.rst:45
msgid ""
"The :method:`Symfony\\\\Component\\\\Process\\\\Process::clearOutput` method"
" clears the contents of the output and "
":method:`Symfony\\\\Component\\\\Process\\\\Process::clearErrorOutput` "
"clears the contents of the error output."
msgstr ""

#: ../../components/process.rst:50
msgid ""
"The ``mustRun()`` method is identical to ``run()``, except that it will "
"throw a "
":class:`Symfony\\\\Component\\\\Process\\\\Exception\\\\ProcessFailedException`"
" if the process couldn't be executed successfully (i.e. the process exited "
"with a non-zero code)::"
msgstr ""

#: ../../components/process.rst:69
msgid "Getting real-time Process Output"
msgstr ""

#: ../../components/process.rst:71
msgid ""
"When executing a long running command (like rsync-ing files to a remote "
"server), you can give feedback to the end user in real-time by passing an "
"anonymous function to the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::run` method::"
msgstr ""

#: ../../components/process.rst:88
msgid "Running Processes Asynchronously"
msgstr ""

#: ../../components/process.rst:90
msgid ""
"You can also start the subprocess and then let it run asynchronously, "
"retrieving output and the status in your main process whenever you need it. "
"Use the :method:`Symfony\\\\Component\\\\Process\\\\Process::start` method "
"to start an asynchronous process, the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::isRunning` method to "
"check if the process is done and the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::getOutput` method to "
"get the output::"
msgstr ""

#: ../../components/process.rst:106
msgid ""
"You can also wait for a process to end if you started it asynchronously and "
"are done doing other stuff::"
msgstr ""

#: ../../components/process.rst:124
msgid ""
"The :method:`Symfony\\\\Component\\\\Process\\\\Process::wait` method is "
"blocking, which means that your code will halt at this line until the "
"external process is completed."
msgstr ""

#: ../../components/process.rst:129
msgid "Stopping a Process"
msgstr ""

#: ../../components/process.rst:131
msgid ""
"The ``signal`` parameter of the ``stop`` method was introduced in Symfony "
"2.3."
msgstr ""

#: ../../components/process.rst:134
msgid ""
"Any asynchronous process can be stopped at any time with the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::stop` method. This "
"method takes two arguments: a timeout and a signal. Once the timeout is "
"reached, the signal is sent to the running process. The default signal sent "
"to a process is ``SIGKILL``. Please read the :ref:`signal documentation "
"below<reference-process-signal>` to find out more about signal handling in "
"the Process component::"
msgstr ""

#: ../../components/process.rst:149
msgid "Executing PHP Code in Isolation"
msgstr ""

#: ../../components/process.rst:151
msgid ""
"If you want to execute some PHP code in isolation, use the ``PhpProcess`` "
"instead::"
msgstr ""

#: ../../components/process.rst:162
msgid ""
"To make your code work better on all platforms, you might want to use the "
":class:`Symfony\\\\Component\\\\Process\\\\ProcessBuilder` class instead::"
msgstr ""

#: ../../components/process.rst:170
msgid ""
"The "
":method:`ProcessBuilder::setPrefix<Symfony\\\\Component\\\\Process\\\\ProcessBuilder::setPrefix>`"
" method was introduced in Symfony 2.3."
msgstr ""

#: ../../components/process.rst:174
msgid ""
"In case you are building a binary driver, you can use the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::setPrefix` method to "
"prefix all the generated process commands."
msgstr ""

#: ../../components/process.rst:178
msgid ""
"The following example will generate two process commands for a tar binary "
"adapter::"
msgstr ""

#: ../../components/process.rst:199
msgid "Process Timeout"
msgstr ""

#: ../../components/process.rst:201
msgid ""
"You can limit the amount of time a process takes to complete by setting a "
"timeout (in seconds)::"
msgstr ""

#: ../../components/process.rst:210
msgid ""
"If the timeout is reached, a "
":class:`Symfony\\\\Process\\\\Exception\\\\RuntimeException` is thrown."
msgstr ""

#: ../../components/process.rst:213
msgid ""
"For long running commands, it is your responsibility to perform the timeout "
"check regularly::"
msgstr ""

#: ../../components/process.rst:231
msgid "Process Idle Timeout"
msgstr ""

#: ../../components/process.rst:233
msgid ""
"In contrast to the timeout of the previous paragraph, the idle timeout only "
"considers the time since the last output was produced by the process::"
msgstr ""

#: ../../components/process.rst:243
msgid ""
"In the case above, a process is considered timed out, when either the total "
"runtime exceeds 3600 seconds, or the process does not produce any output for"
" 60 seconds."
msgstr ""

#: ../../components/process.rst:247
msgid "Process Signals"
msgstr ""

#: ../../components/process.rst:249
msgid "The ``signal`` method was introduced in Symfony 2.3."
msgstr ""

#: ../../components/process.rst:252
msgid ""
"When running a program asynchronously, you can send it POSIX signals with "
"the :method:`Symfony\\\\Component\\\\Process\\\\Process::signal` method::"
msgstr ""

#: ../../components/process.rst:265
msgid ""
"Due to some limitations in PHP, if you're using signals with the Process "
"component, you may have to prefix your commands with `exec`_. Please read "
"`Symfony Issue#5759`_ and `PHP Bug#39992`_ to understand why this is "
"happening."
msgstr ""

#: ../../components/process.rst:269
msgid ""
"POSIX signals are not available on Windows platforms, please refer to the "
"`PHP documentation`_ for available signals."
msgstr ""

#: ../../components/process.rst:273
msgid "Process Pid"
msgstr ""

#: ../../components/process.rst:275
msgid "The ``getPid`` method was introduced in Symfony 2.3."
msgstr ""

#: ../../components/process.rst:278
msgid ""
"You can access the `pid`_ of a running process with the "
":method:`Symfony\\\\Component\\\\Process\\\\Process::getPid` method."
msgstr ""

#: ../../components/process.rst:292
msgid ""
"Due to some limitations in PHP, if you want to get the pid of a symfony "
"Process, you may have to prefix your commands with `exec`_. Please read "
"`Symfony Issue#5759`_ to understand why this is happening."
msgstr ""

#: ../../components/process.rst:297
msgid "Disabling Output"
msgstr ""

#: ../../components/process.rst:299
msgid ""
"As standard output and error output are always fetched from the underlying "
"process, it might be convenient to disable output in some cases to save "
"memory. Use "
":method:`Symfony\\\\Component\\\\Process\\\\Process::disableOutput` and "
":method:`Symfony\\\\Component\\\\Process\\\\Process::enableOutput` to toggle"
" this feature::"
msgstr ""

#: ../../components/process.rst:312
msgid "You can not enable or disable the output while the process is running."
msgstr ""

#: ../../components/process.rst:314
msgid ""
"If you disable the output, you cannot access ``getOutput``, "
"``getIncrementalOutput``, ``getErrorOutput`` or "
"``getIncrementalErrorOutput``. Moreover, you could not pass a callback to "
"the ``start``, ``run`` or ``mustRun`` methods or use ``setIdleTimeout``."
msgstr ""

#: ../../components/process.rst:1 ../../components/process.rst:1
msgid "Process"
msgstr ""

#: ../../components/process.rst:1
msgid "Components"
msgstr ""
