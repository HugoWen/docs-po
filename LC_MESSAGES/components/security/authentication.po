# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/security/authentication.rst:5
msgid "Authentication"
msgstr ""

#: ../../components/security/authentication.rst:7
msgid ""
"The ``TokenStorageInterface`` was introduced in Symfony 2.6. Prior, you had "
"to use the ``getToken()`` method of the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\SecurityContextInterface`."
msgstr ""

#: ../../components/security/authentication.rst:12
msgid ""
"When a request points to a secured area, and one of the listeners from the "
"firewall map is able to extract the user's credentials from the current "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` object, it should"
" create a token, containing these credentials. The next thing the listener "
"should do is ask the authentication manager to validate the given token, and"
" return an *authenticated* token if the supplied credentials were found to "
"be valid. The listener should then store the authenticated token using "
":class:`the token storage "
"<Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\Storage\\\\TokenStorageInterface>`::"
msgstr ""

#: ../../components/security/authentication.rst:69
msgid ""
"A token can be of any class, as long as it implements "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\TokenInterface`."
msgstr ""

#: ../../components/security/authentication.rst:73
msgid "The Authentication Manager"
msgstr ""

#: ../../components/security/authentication.rst:75
msgid ""
"The default authentication manager is an instance of "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\AuthenticationProviderManager`::"
msgstr ""

#: ../../components/security/authentication.rst:92
msgid ""
"The ``AuthenticationProviderManager``, when instantiated, receives several "
"authentication providers, each supporting a different type of token."
msgstr ""

#: ../../components/security/authentication.rst:97
msgid ""
"You may of course write your own authentication manager, it only has to "
"implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\AuthenticationManagerInterface`."
msgstr ""

#: ../../components/security/authentication.rst:103
msgid "Authentication Providers"
msgstr ""

#: ../../components/security/authentication.rst:105
msgid ""
"Each provider (since it implements "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Provider\\\\AuthenticationProviderInterface`)"
" has a method "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Provider\\\\AuthenticationProviderInterface::supports`"
" by which the ``AuthenticationProviderManager`` can determine if it supports"
" the given token. If this is the case, the manager then calls the provider's"
" method "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Provider\\\\AuthenticationProviderInterface::authenticate`."
" This method should return an authenticated token or throw an "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Exception\\\\AuthenticationException`"
" (or any other exception extending it)."
msgstr ""

#: ../../components/security/authentication.rst:116
msgid "Authenticating Users by their Username and Password"
msgstr ""

#: ../../components/security/authentication.rst:118
msgid ""
"An authentication provider will attempt to authenticate a user based on the "
"credentials they provided. Usually these are a username and a password. Most"
" web applications store their user's username and a hash of the user's "
"password combined with a randomly generated salt. This means that the "
"average authentication would consist of fetching the salt and the hashed "
"password from the user data storage, hash the password the user has just "
"provided (e.g. using a login form) with the salt and compare both to "
"determine if the given password is valid."
msgstr ""

#: ../../components/security/authentication.rst:127
msgid ""
"This functionality is offered by the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Provider\\\\DaoAuthenticationProvider`."
" It fetches the user's data from a "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserProviderInterface`,"
" uses a "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface`"
" to create a hash of the password and returns an authenticated token if the "
"password was valid::"
msgstr ""

#: ../../components/security/authentication.rst:165
msgid ""
"The example above demonstrates the use of the \"in-memory\" user provider, "
"but you may use any user provider, as long as it implements "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserProviderInterface`."
" It is also possible to let multiple user providers try to find the user's "
"data, using the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\ChainUserProvider`."
msgstr ""

#: ../../components/security/authentication.rst:172
msgid "The Password Encoder Factory"
msgstr ""

#: ../../components/security/authentication.rst:174
msgid ""
"The "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Provider\\\\DaoAuthenticationProvider`"
" uses an encoder factory to create a password encoder for a given type of "
"user. This allows you to use different encoding strategies for different "
"types of users. The default "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\EncoderFactory`"
" receives an array of encoders::"
msgstr ""

#: ../../components/security/authentication.rst:195
msgid ""
"Each encoder should implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface`"
" or be an array with a ``class`` and an ``arguments`` key, which allows the "
"encoder factory to construct the encoder only when it is needed."
msgstr ""

#: ../../components/security/authentication.rst:200
msgid "Creating a custom Password Encoder"
msgstr ""

#: ../../components/security/authentication.rst:202
msgid ""
"There are many built-in password encoders. But if you need to create your "
"own, it just needs to follow these rules:"
msgstr ""

#: ../../components/security/authentication.rst:205
msgid ""
"The class must implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface`;"
msgstr ""

#: ../../components/security/authentication.rst:207
msgid ""
"The implementations of "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface::encodePassword`"
" and "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface::isPasswordValid`"
" must first of all make sure the password is not too long, i.e. the password"
" length is no longer than 4096 characters. This is for security reasons (see"
" `CVE-2013-5750`_), and you can use the "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\BasePasswordEncoder::isPasswordTooLong`"
" method for this check::"
msgstr ""

#: ../../components/security/authentication.rst:239
msgid "Using Password Encoders"
msgstr ""

#: ../../components/security/authentication.rst:241
msgid ""
"When the "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\EncoderFactory::getEncoder`"
" method of the password encoder factory is called with the user object as "
"its first argument, it will return an encoder of type "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Encoder\\\\PasswordEncoderInterface`"
" which should be used to encode this user's password::"
msgstr ""

#: ../../components/security/authentication.rst:261
msgid ""
"Now, when you want to check if the submitted password (e.g. when trying to "
"log in) is correct, you can use::"
msgstr ""

#: ../../components/security/authentication.rst:1
msgid "Security, Authentication"
msgstr ""
