# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/console/introduction.rst:6
msgid "The Console Component"
msgstr ""

#: ../../components/console/introduction.rst:8
msgid ""
"The Console component eases the creation of beautiful and testable command "
"line interfaces."
msgstr ""

#: ../../components/console/introduction.rst:11
msgid ""
"The Console component allows you to create command-line commands. Your "
"console commands can be used for any recurring task, such as cronjobs, "
"imports, or other batch jobs."
msgstr ""

#: ../../components/console/introduction.rst:16
msgid "Installation"
msgstr ""

#: ../../components/console/introduction.rst:18
msgid "You can install the component in 2 different ways:"
msgstr ""

#: ../../components/console/introduction.rst:20
msgid ""
":doc:`Install it via Composer </components/using_components>` "
"(``symfony/console`` on `Packagist`_);"
msgstr ""

#: ../../components/console/introduction.rst:21
msgid "Use the official Git repository (https://github.com/symfony/Console)."
msgstr ""

#: ../../components/console/introduction.rst:24
msgid "Creating a basic Command"
msgstr ""

#: ../../components/console/introduction.rst:26
msgid ""
"To make a console command that greets you from the command line, create "
"``GreetCommand.php`` and add the following to it::"
msgstr ""

#: ../../components/console/introduction.rst:75
msgid ""
"You also need to create the file to run at the command line which creates an"
" ``Application`` and adds commands to it::"
msgstr ""

#: ../../components/console/introduction.rst:91
msgid "Test the new console command by running the following"
msgstr ""

#: ../../components/console/introduction.rst:97
msgid "This will print the following to the command line:"
msgstr ""

#: ../../components/console/introduction.rst:103
msgid "You can also use the ``--yell`` option to make everything uppercase:"
msgstr ""

#: ../../components/console/introduction.rst:109
msgid "This prints::"
msgstr ""

#: ../../components/console/introduction.rst:116
msgid "Coloring the Output"
msgstr ""

#: ../../components/console/introduction.rst:120
msgid ""
"By default, the Windows command console doesn't support output coloring. The"
" Console component disables output coloring for Windows systems, but if your"
" commands invoke other scripts which emit color sequences, they will be "
"wrongly displayed as raw escape characters. Install the `ConEmu`_ or "
"`ANSICON`_ free applications to add coloring support to your Windows command"
" console."
msgstr ""

#: ../../components/console/introduction.rst:126
msgid ""
"Whenever you output text, you can surround the text with tags to color its "
"output. For example::"
msgstr ""

#: ../../components/console/introduction.rst:141
msgid ""
"It is possible to define your own styles using the class "
":class:`Symfony\\\\Component\\\\Console\\\\Formatter\\\\OutputFormatterStyle`::"
msgstr ""

#: ../../components/console/introduction.rst:151
msgid ""
"Available foreground and background colors are: ``black``, ``red``, "
"``green``, ``yellow``, ``blue``, ``magenta``, ``cyan`` and ``white``."
msgstr ""

#: ../../components/console/introduction.rst:154
msgid ""
"And available options are: ``bold``, ``underscore``, ``blink``, ``reverse`` "
"and ``conceal``."
msgstr ""

#: ../../components/console/introduction.rst:156
msgid "You can also set these colors and options inside the tagname::"
msgstr ""

#: ../../components/console/introduction.rst:170
msgid "Verbosity Levels"
msgstr ""

#: ../../components/console/introduction.rst:172
msgid ""
"The ``VERBOSITY_VERY_VERBOSE`` and ``VERBOSITY_DEBUG`` constants were "
"introduced in version 2.3"
msgstr ""

#: ../../components/console/introduction.rst:176
msgid ""
"The console has 5 levels of verbosity. These are defined in the "
":class:`Symfony\\\\Component\\\\Console\\\\Output\\\\OutputInterface`:"
msgstr ""

#: ../../components/console/introduction.rst:180
#: ../../components/console/introduction.rst:297
msgid "Mode"
msgstr ""

#: ../../components/console/introduction.rst:180
#: ../../components/console/introduction.rst:297
#: ../../components/console/introduction.rst:376
msgid "Value"
msgstr ""

#: ../../components/console/introduction.rst:182
msgid "OutputInterface::VERBOSITY_QUIET"
msgstr ""

#: ../../components/console/introduction.rst:182
msgid "Do not output any messages"
msgstr ""

#: ../../components/console/introduction.rst:183
msgid "OutputInterface::VERBOSITY_NORMAL"
msgstr ""

#: ../../components/console/introduction.rst:183
msgid "The default verbosity level"
msgstr ""

#: ../../components/console/introduction.rst:184
msgid "OutputInterface::VERBOSITY_VERBOSE"
msgstr ""

#: ../../components/console/introduction.rst:184
msgid "Increased verbosity of messages"
msgstr ""

#: ../../components/console/introduction.rst:185
msgid "OutputInterface::VERBOSITY_VERY_VERBOSE"
msgstr ""

#: ../../components/console/introduction.rst:185
msgid "Informative non essential messages"
msgstr ""

#: ../../components/console/introduction.rst:186
msgid "OutputInterface::VERBOSITY_DEBUG"
msgstr ""

#: ../../components/console/introduction.rst:186
msgid "Debug messages"
msgstr ""

#: ../../components/console/introduction.rst:189
msgid ""
"You can specify the quiet verbosity level with the ``--quiet`` or ``-q`` "
"option. The ``--verbose`` or ``-v`` option is used when you want an "
"increased level of verbosity."
msgstr ""

#: ../../components/console/introduction.rst:195
msgid ""
"The full exception stacktrace is printed if the ``VERBOSITY_VERBOSE`` level "
"or above is used."
msgstr ""

#: ../../components/console/introduction.rst:198
msgid ""
"It is possible to print a message in a command for only a specific verbosity"
" level. For example::"
msgstr ""

#: ../../components/console/introduction.rst:205
msgid ""
"There are also more semantic methods you can use to test for each of the "
"verbosity levels::"
msgstr ""

#: ../../components/console/introduction.rst:224
msgid ""
"When the quiet level is used, all output is suppressed as the default "
":method:`Symfony\\\\Component\\\\Console\\\\Output\\\\Output::write` method "
"returns without actually printing."
msgstr ""

#: ../../components/console/introduction.rst:230
msgid ""
"The MonologBridge provides a "
":class:`Symfony\\\\Bridge\\\\Monolog\\\\Handler\\\\ConsoleHandler` class "
"that allows you to display messages on the console. This is cleaner than "
"wrapping your output calls in conditions. For an example use in the Symfony "
"Framework, see :doc:`/cookbook/logging/monolog_console`."
msgstr ""

#: ../../components/console/introduction.rst:236
msgid "Using Command Arguments"
msgstr ""

#: ../../components/console/introduction.rst:238
msgid ""
"The most interesting part of the commands are the arguments and options that"
" you can make available. Arguments are the strings - separated by spaces - "
"that come after the command name itself. They are ordered, and can be "
"optional or required. For example, add an optional ``last_name`` argument to"
" the command and make the ``name`` argument required::"
msgstr ""

#: ../../components/console/introduction.rst:257
msgid "You now have access to a ``last_name`` argument in your command::"
msgstr ""

#: ../../components/console/introduction.rst:263
msgid "The command can now be used in either of the following ways:"
msgstr ""

#: ../../components/console/introduction.rst:270
msgid ""
"It is also possible to let an argument take a list of values (imagine you "
"want to greet all your friends). For this it must be specified at the end of"
" the argument list::"
msgstr ""

#: ../../components/console/introduction.rst:282
msgid "To use this, just specify as many names as you want:"
msgstr ""

#: ../../components/console/introduction.rst:288
msgid "You can access the ``names`` argument as an array::"
msgstr ""

#: ../../components/console/introduction.rst:294
msgid "There are 3 argument variants you can use:"
msgstr ""

#: ../../components/console/introduction.rst:299
msgid "InputArgument::REQUIRED"
msgstr ""

#: ../../components/console/introduction.rst:299
msgid "The argument is required"
msgstr ""

#: ../../components/console/introduction.rst:300
msgid "InputArgument::OPTIONAL"
msgstr ""

#: ../../components/console/introduction.rst:300
msgid "The argument is optional and therefore can be omitted"
msgstr ""

#: ../../components/console/introduction.rst:301
msgid "InputArgument::IS_ARRAY"
msgstr ""

#: ../../components/console/introduction.rst:301
msgid ""
"The argument can contain an indefinite number of arguments and must be used "
"at the end of the argument list"
msgstr ""

#: ../../components/console/introduction.rst:304
msgid ""
"You can combine ``IS_ARRAY`` with ``REQUIRED`` and ``OPTIONAL`` like this::"
msgstr ""

#: ../../components/console/introduction.rst:315
msgid "Using Command Options"
msgstr ""

#: ../../components/console/introduction.rst:317
msgid ""
"Unlike arguments, options are not ordered (meaning you can specify them in "
"any order) and are specified with two dashes (e.g. ``--yell`` - you can also"
" declare a one-letter shortcut that you can call with a single dash like "
"``-y``). Options are *always* optional, and can be setup to accept a value "
"(e.g. ``--dir=src``) or simply as a boolean flag without a value (e.g. "
"``--yell``)."
msgstr ""

#: ../../components/console/introduction.rst:326
msgid ""
"There is nothing forbidding you to create a command with an option that "
"optionally accepts a value. However, there is no way you can distinguish "
"when the option was used without a value (``command --yell``) or when it "
"wasn't used at all (``command``). In both cases, the value retrieved for the"
" option will be ``null``."
msgstr ""

#: ../../components/console/introduction.rst:332
msgid ""
"For example, add a new option to the command that can be used to specify how"
" many times in a row the message should be printed::"
msgstr ""

#: ../../components/console/introduction.rst:345
msgid "Next, use this in the command to print the message multiple times:"
msgstr ""

#: ../../components/console/introduction.rst:353
msgid ""
"Now, when you run the task, you can optionally specify a ``--iterations`` "
"flag:"
msgstr ""

#: ../../components/console/introduction.rst:361
msgid ""
"The first example will only print once, since ``iterations`` is empty and "
"defaults to ``1`` (the last argument of ``addOption``). The second example "
"will print five times."
msgstr ""

#: ../../components/console/introduction.rst:365
msgid ""
"Recall that options don't care about their order. So, either of the "
"following will work:"
msgstr ""

#: ../../components/console/introduction.rst:373
msgid "There are 4 option variants you can use:"
msgstr ""

#: ../../components/console/introduction.rst:376
msgid "Option"
msgstr ""

#: ../../components/console/introduction.rst:378
msgid "InputOption::VALUE_IS_ARRAY"
msgstr ""

#: ../../components/console/introduction.rst:378
msgid "This option accepts multiple values (e.g. ``--dir=/foo --dir=/bar``)"
msgstr ""

#: ../../components/console/introduction.rst:379
msgid "InputOption::VALUE_NONE"
msgstr ""

#: ../../components/console/introduction.rst:379
msgid "Do not accept input for this option (e.g. ``--yell``)"
msgstr ""

#: ../../components/console/introduction.rst:380
msgid "InputOption::VALUE_REQUIRED"
msgstr ""

#: ../../components/console/introduction.rst:380
msgid ""
"This value is required (e.g. ``--iterations=5``), the option itself is still"
" optional"
msgstr ""

#: ../../components/console/introduction.rst:381
msgid "InputOption::VALUE_OPTIONAL"
msgstr ""

#: ../../components/console/introduction.rst:381
msgid ""
"This option may or may not have a value (e.g. ``--yell`` or ``--yell=loud``)"
msgstr ""

#: ../../components/console/introduction.rst:384
msgid ""
"You can combine ``VALUE_IS_ARRAY`` with ``VALUE_REQUIRED`` or "
"``VALUE_OPTIONAL`` like this:"
msgstr ""

#: ../../components/console/introduction.rst:399
msgid "Console Helpers"
msgstr ""

#: ../../components/console/introduction.rst:401
msgid ""
"The console component also contains a set of \"helpers\" - different small "
"tools capable of helping you with different tasks:"
msgstr ""

#: ../../components/console/introduction.rst:404
msgid ""
":doc:`/components/console/helpers/questionhelper`: interactively ask the "
"user for information"
msgstr ""

#: ../../components/console/introduction.rst:405
msgid ""
":doc:`/components/console/helpers/formatterhelper`: customize the output "
"colorization"
msgstr ""

#: ../../components/console/introduction.rst:406
msgid ":doc:`/components/console/helpers/progressbar`: shows a progress bar"
msgstr ""

#: ../../components/console/introduction.rst:407
msgid ""
":doc:`/components/console/helpers/table`: displays tabular data as a table"
msgstr ""

#: ../../components/console/introduction.rst:412
msgid "Testing Commands"
msgstr ""

#: ../../components/console/introduction.rst:414
msgid ""
"Symfony provides several tools to help you test your commands. The most "
"useful one is the "
":class:`Symfony\\\\Component\\\\Console\\\\Tester\\\\CommandTester` class. "
"It uses special input and output classes to ease testing without a real "
"console::"
msgstr ""

#: ../../components/console/introduction.rst:440
msgid ""
"The "
":method:`Symfony\\\\Component\\\\Console\\\\Tester\\\\CommandTester::getDisplay`"
" method returns what would have been displayed during a normal call from the"
" console."
msgstr ""

#: ../../components/console/introduction.rst:444
msgid ""
"You can test sending arguments and options to the command by passing them as"
" an array to the "
":method:`Symfony\\\\Component\\\\Console\\\\Tester\\\\CommandTester::execute`"
" method::"
msgstr ""

#: ../../components/console/introduction.rst:475
msgid ""
"You can also test a whole console application by using "
":class:`Symfony\\\\Component\\\\Console\\\\Tester\\\\ApplicationTester`."
msgstr ""

#: ../../components/console/introduction.rst:479
msgid "Calling an Existing Command"
msgstr ""

#: ../../components/console/introduction.rst:481
msgid ""
"If a command depends on another one being run before it, instead of asking "
"the user to remember the order of execution, you can call it directly "
"yourself. This is also useful if you want to create a \"meta\" command that "
"just runs a bunch of other commands (for instance, all commands that need to"
" be run when the project's code has changed on the production servers: "
"clearing the cache, generating Doctrine2 proxies, dumping Assetic assets, "
"...)."
msgstr ""

#: ../../components/console/introduction.rst:488
msgid "Calling a command from another one is straightforward::"
msgstr ""

#: ../../components/console/introduction.rst:506
msgid ""
"First, you :method:`Symfony\\\\Component\\\\Console\\\\Application::find` "
"the command you want to execute by passing the command name."
msgstr ""

#: ../../components/console/introduction.rst:509
msgid ""
"Then, you need to create a new "
":class:`Symfony\\\\Component\\\\Console\\\\Input\\\\ArrayInput` with the "
"arguments and options you want to pass to the command."
msgstr ""

#: ../../components/console/introduction.rst:513
msgid ""
"Eventually, calling the ``run()`` method actually executes the command and "
"returns the returned code from the command (return value from command's "
"``execute()`` method)."
msgstr ""

#: ../../components/console/introduction.rst:519
msgid ""
"Most of the time, calling a command from code that is not executed on the "
"command line is not a good idea for several reasons. First, the command's "
"output is optimized for the console. But more important, you can think of a "
"command as being like a controller; it should use the model to do something "
"and display feedback to the user. So, instead of calling a command from the "
"Web, refactor your code and move the logic to a new class."
msgstr ""

#: ../../components/console/introduction.rst:528
msgid "Learn More!"
msgstr ""

#: ../../components/console/introduction.rst:530
msgid ":doc:`/components/console/usage`"
msgstr ""

#: ../../components/console/introduction.rst:531
msgid ":doc:`/components/console/single_command_tool`"
msgstr ""

#: ../../components/console/introduction.rst:532
msgid ":doc:`/components/console/changing_default_command`"
msgstr ""

#: ../../components/console/introduction.rst:533
msgid ":doc:`/components/console/events`"
msgstr ""

#: ../../components/console/introduction.rst:534
msgid ":doc:`/components/console/console_arguments`"
msgstr ""

#: ../../components/console/introduction.rst:1
#: ../../components/console/introduction.rst:1
msgid "Console"
msgstr ""

#: ../../components/console/introduction.rst:1
msgid "CLI"
msgstr ""

#: ../../components/console/introduction.rst:1
msgid "Components"
msgstr ""
