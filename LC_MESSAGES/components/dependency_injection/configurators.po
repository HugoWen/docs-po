# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/dependency_injection/configurators.rst:5
msgid "Configuring Services with a Service Configurator"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:7
msgid ""
"The Service Configurator is a feature of the Dependency Injection Container "
"that allows you to use a callable to configure a service after its "
"instantiation."
msgstr ""

#: ../../components/dependency_injection/configurators.rst:10
msgid ""
"You can specify a method in another service, a PHP function or a static "
"method in a class. The service instance is passed to the callable, allowing "
"the configurator to do whatever it needs to configure the service after its "
"creation."
msgstr ""

#: ../../components/dependency_injection/configurators.rst:15
msgid ""
"A Service Configurator can be used, for example, when you have a service "
"that requires complex setup based on configuration settings coming from "
"different sources/services. Using an external configurator, you can maintain"
" the service implementation cleanly and keep it decoupled from the other "
"objects that provide the configuration needed."
msgstr ""

#: ../../components/dependency_injection/configurators.rst:21
msgid ""
"Another interesting use case is when you have multiple objects that share a "
"common configuration or that should be configured in a similar way at "
"runtime."
msgstr ""

#: ../../components/dependency_injection/configurators.rst:24
msgid ""
"For example, suppose you have an application where you send different types "
"of emails to users. Emails are passed through different formatters that "
"could be enabled or not depending on some dynamic application settings. You "
"start defining a ``NewsletterManager`` class like this::"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:47
msgid "and also a ``GreetingCardManager`` class::"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:67
msgid ""
"As mentioned before, the goal is to set the formatters at runtime depending "
"on application settings. To do this, you also have an "
"``EmailFormatterManager`` class which is responsible for loading and "
"validating formatters enabled in the application::"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:93
msgid ""
"If your goal is to avoid having to couple ``NewsletterManager`` and "
"``GreetingCardManager`` with ``EmailFormatterManager``, then you might want "
"to create a configurator class to configure these instances::"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:116
msgid ""
"The ``EmailConfigurator``'s job is to inject the enabled filters into "
"``NewsletterManager`` and ``GreetingCardManager`` because they are not aware"
" of where the enabled filters come from. In the other hand, the "
"``EmailFormatterManager`` holds the knowledge about the enabled formatters "
"and how to load them, keeping the single responsibility principle."
msgstr ""

#: ../../components/dependency_injection/configurators.rst:123
msgid "Configurator Service Config"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:125
msgid ""
"The service config for the above classes would look something like this:"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:1
msgid "DependencyInjection"
msgstr ""

#: ../../components/dependency_injection/configurators.rst:1
msgid "Service configurators"
msgstr ""
