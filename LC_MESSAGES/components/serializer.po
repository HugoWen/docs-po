# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/serializer.rst:6
msgid "The Serializer Component"
msgstr ""

#: ../../components/serializer.rst:8
msgid ""
"The Serializer component is meant to be used to turn objects into a specific"
" format (XML, JSON, YAML, ...) and the other way around."
msgstr ""

#: ../../components/serializer.rst:11
msgid ""
"In order to do so, the Serializer component follows the following simple "
"schema."
msgstr ""

#: ../../components/serializer.rst:19
msgid ""
"As you can see in the picture above, an array is used as a man in the "
"middle. This way, Encoders will only deal with turning specific **formats** "
"into **arrays** and vice versa. The same way, Normalizers will deal with "
"turning specific **objects** into **arrays** and vice versa."
msgstr ""

#: ../../components/serializer.rst:24
msgid ""
"Serialization is a complicated topic, and while this component may not work "
"in all cases, it can be a useful tool while developing tools to serialize "
"and deserialize your objects."
msgstr ""

#: ../../components/serializer.rst:29
msgid "Installation"
msgstr ""

#: ../../components/serializer.rst:31
msgid "You can install the component in 2 different ways:"
msgstr ""

#: ../../components/serializer.rst:33
msgid ""
":doc:`Install it via Composer </components/using_components>` "
"(``symfony/serializer`` on `Packagist`_);"
msgstr ""

#: ../../components/serializer.rst:34
msgid ""
"Use the official Git repository (https://github.com/symfony/Serializer)."
msgstr ""

#: ../../components/serializer.rst:37
msgid "Usage"
msgstr ""

#: ../../components/serializer.rst:39
msgid ""
"Using the Serializer component is really simple. You just need to set up the"
" :class:`Symfony\\\\Component\\\\Serializer\\\\Serializer` specifying which "
"Encoders and Normalizer are going to be available::"
msgstr ""

#: ../../components/serializer.rst:53
msgid ""
"There are several normalizers available, e.g. the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
" or the "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\PropertyNormalizer`."
" To read more about them, refer to the `Normalizers`_ section of this page. "
"All the examples shown below use the ``GetSetMethodNormalizer``."
msgstr ""

#: ../../components/serializer.rst:60
msgid "Serializing an Object"
msgstr ""

#: ../../components/serializer.rst:62
msgid ""
"For the sake of this example, assume the following class already exists in "
"your project::"
msgstr ""

#: ../../components/serializer.rst:107
msgid ""
"Now, if you want to serialize this object into JSON, you only need to use "
"the Serializer service created before::"
msgstr ""

#: ../../components/serializer.rst:121
msgid ""
"The first parameter of the "
":method:`Symfony\\\\Component\\\\Serializer\\\\Serializer::serialize` is the"
" object to be serialized and the second is used to choose the proper "
"encoder, in this case "
":class:`Symfony\\\\Component\\\\Serializer\\\\Encoder\\\\JsonEncoder`."
msgstr ""

#: ../../components/serializer.rst:126
msgid "Ignoring Attributes when Serializing"
msgstr ""

#: ../../components/serializer.rst:128
msgid ""
"The "
":method:`GetSetMethodNormalizer::setIgnoredAttributes<Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer::setIgnoredAttributes>`"
" method was introduced in Symfony 2.3."
msgstr ""

#: ../../components/serializer.rst:132
msgid ""
"As an option, there's a way to ignore attributes from the origin object when"
" serializing. To remove those attributes use the "
":method:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer::setIgnoredAttributes`"
" method on the normalizer definition::"
msgstr ""

#: ../../components/serializer.rst:149
msgid "Deserializing an Object"
msgstr ""

#: ../../components/serializer.rst:151
msgid ""
"You'll now learn how to do the exact opposite. This time, the information of"
" the ``Person`` class would be encoded in XML format::"
msgstr ""

#: ../../components/serializer.rst:164
msgid ""
"In this case, "
":method:`Symfony\\\\Component\\\\Serializer\\\\Serializer::deserialize` "
"needs three parameters:"
msgstr ""

#: ../../components/serializer.rst:167
msgid "The information to be decoded"
msgstr ""

#: ../../components/serializer.rst:168
msgid "The name of the class this information will be decoded to"
msgstr ""

#: ../../components/serializer.rst:169
msgid "The encoder used to convert that information into an array"
msgstr ""

#: ../../components/serializer.rst:172
msgid "Converting Property Names when Serializing and Deserializing"
msgstr ""

#: ../../components/serializer.rst:174
msgid ""
"The "
":class:`Symfony\\\\Component\\\\Serializer\\\\NameConverter\\\\NameConverterInterface`"
" interface was introduced in Symfony 2.7."
msgstr ""

#: ../../components/serializer.rst:178
msgid ""
"Sometimes serialized attributes must be named differently than properties or"
" getter/setter methods of PHP classes."
msgstr ""

#: ../../components/serializer.rst:181
msgid ""
"The Serializer Component provides a handy way to translate or map PHP field "
"names to serialized names: The Name Converter System."
msgstr ""

#: ../../components/serializer.rst:184
msgid "Given you have the following object::"
msgstr ""

#: ../../components/serializer.rst:192
msgid ""
"And in the serialized form, all attributes must be prefixed by ``org_`` like"
" the following::"
msgstr ""

#: ../../components/serializer.rst:197
msgid "A custom name converter can handle such cases::"
msgstr ""

#: ../../components/serializer.rst:215
msgid ""
"The custom normalizer can be used by passing it as second parameter of any "
"class extending "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\AbstractNormalizer`,"
" including "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
" and "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\PropertyNormalizer`::"
msgstr ""

#: ../../components/serializer.rst:241
msgid "CamelCase to snake_case"
msgstr ""

#: ../../components/serializer.rst:243
msgid ""
"The "
":class:`Symfony\\\\Component\\\\Serializer\\\\NameConverter\\\\CamelCaseToUnderscoreNameConverter`"
" interface was introduced in Symfony 2.7."
msgstr ""

#: ../../components/serializer.rst:247
msgid ""
"In many formats, it's common to use underscores to separate words (also "
"known as snake_case). However, PSR-1 specifies that the preferred style for "
"PHP properties and methods is CamelCase."
msgstr ""

#: ../../components/serializer.rst:251
msgid ""
"Symfony provides a built-in name converter designed to transform between "
"snake_case and CamelCased styles during serialization and deserialization "
"processes::"
msgstr ""

#: ../../components/serializer.rst:283
msgid "Serializing Boolean Attributes"
msgstr ""

#: ../../components/serializer.rst:285
msgid ""
"If you are using isser methods (methods prefixed by ``is``, like "
"``Acme\\Person::isSportsman()``), the Serializer component will "
"automatically detect and use it to serialize related attributes."
msgstr ""

#: ../../components/serializer.rst:290
msgid "Using Callbacks to Serialize Properties with Object Instances"
msgstr ""

#: ../../components/serializer.rst:292
msgid ""
"When serializing, you can set a callback to format a specific object "
"property::"
msgstr ""

#: ../../components/serializer.rst:321
msgid "Normalizers"
msgstr ""

#: ../../components/serializer.rst:323
msgid "There are several types of normalizers available:"
msgstr ""

#: ../../components/serializer.rst:331
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
msgstr ""

#: ../../components/serializer.rst:326
msgid ""
"This normalizer reads the content of the class by calling the \"getters\" "
"(public methods starting with \"get\"). It will denormalize data by calling "
"the constructor and the \"setters\" (public methods starting with \"set\")."
msgstr ""

#: ../../components/serializer.rst:330
msgid ""
"Objects are serialized to a map of property names (method name stripped of "
"the \"get\" prefix and converted to lower case) to property values."
msgstr ""

#: ../../components/serializer.rst:336
msgid ":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\PropertyNormalizer`"
msgstr ""

#: ../../components/serializer.rst:334
msgid ""
"This normalizer directly reads and writes public properties as well as "
"**private and protected** properties. Objects are normalized to a map of "
"property names to property values."
msgstr ""

#: ../../components/serializer.rst:338
msgid ""
"The "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\PropertyNormalizer`"
" class was introduced in Symfony 2.6."
msgstr ""

#: ../../components/serializer.rst:343
msgid "Handling Circular References"
msgstr ""

#: ../../components/serializer.rst:345
msgid ""
"Handling of circular references was introduced in Symfony 2.6. In previous "
"versions of Symfony, circular references led to infinite loops."
msgstr ""

#: ../../components/serializer.rst:349
msgid "Circular references are common when dealing with entity relations::"
msgstr ""

#: ../../components/serializer.rst:403
msgid ""
"To avoid infinite loops, "
":class:`Symfony\\\\Component\\\\Serializer\\\\Normalizer\\\\GetSetMethodNormalizer`"
" throws a "
":class:`Symfony\\\\Component\\\\Serializer\\\\Exception\\\\CircularReferenceException`"
" when such a case is encountered::"
msgstr ""

#: ../../components/serializer.rst:418
msgid ""
"The ``setCircularReferenceLimit()`` method of this normalizer sets the "
"number of times it will serialize the same object before considering it a "
"circular reference. Its default value is ``1``."
msgstr ""

#: ../../components/serializer.rst:422
msgid ""
"Instead of throwing an exception, circular references can also be handled by"
" custom callables. This is especially useful when serializing entities "
"having unique identifiers::"
msgstr ""

#: ../../components/serializer.rst:438
msgid "JMSSerializer"
msgstr ""

#: ../../components/serializer.rst:440
msgid ""
"A popular third-party library, `JMS serializer`_, provides a more "
"sophisticated albeit more complex solution. This library includes the "
"ability to configure how your objects should be serialized/deserialized via "
"annotations (as well as YAML, XML and PHP), integration with the Doctrine "
"ORM, and handling of other complex cases."
msgstr ""

#: ../../components/serializer.rst:1 ../../components/serializer.rst:1
msgid "Serializer"
msgstr ""

#: ../../components/serializer.rst:1
msgid "Components"
msgstr ""
