# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/expression_language/caching.rst:5
msgid "Caching Expressions Using Parser Caches"
msgstr ""

#: ../../components/expression_language/caching.rst:7
msgid ""
"The ExpressionLanguage component already provides a "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage::compile`"
" method to be able to cache the expressions in plain PHP. But internally, "
"the component also caches the parsed expressions, so duplicated expressions "
"can be compiled/evaluated quicker."
msgstr ""

#: ../../components/expression_language/caching.rst:14
msgid "The Workflow"
msgstr ""

#: ../../components/expression_language/caching.rst:16
msgid ""
"Both "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage::evaluate`"
" and ``compile()`` need to do some things before each can provide the return"
" values. For ``evaluate()``, this overhead is even bigger."
msgstr ""

#: ../../components/expression_language/caching.rst:20
msgid ""
"Both methods need to tokenize and parse the expression. This is done by the "
":method:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage::parse`"
" method. It  returns a "
":class:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ParsedExpression`. "
"Now, the ``compile()`` method just returns the string conversion of this "
"object. The ``evaluate()`` method needs to loop through the \"nodes\" "
"(pieces of an expression saved in the ``ParsedExpression``) and evaluate "
"them on the fly."
msgstr ""

#: ../../components/expression_language/caching.rst:27
msgid ""
"To save time, the ``ExpressionLanguage`` caches the ``ParsedExpression`` so "
"it can skip the tokenize and parse steps with duplicate expressions. The "
"caching is done by a "
":class:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ParserCache\\\\ParserCacheInterface`"
" instance (by default, it uses an "
":class:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ParserCache\\\\ArrayParserCache`)."
" You can customize this by creating a custom ``ParserCache`` and injecting "
"this in the object using the constructor::"
msgstr ""

#: ../../components/expression_language/caching.rst:44
msgid ""
"The `DoctrineBridge`_ provides a Parser Cache implementation using the "
"`doctrine cache library`_, which gives you caching for all sorts of cache "
"strategies, like Apc, Filesystem and Memcached."
msgstr ""

#: ../../components/expression_language/caching.rst:49
msgid "Using Parsed and Serialized Expressions"
msgstr ""

#: ../../components/expression_language/caching.rst:51
msgid ""
"Both ``evaluate()`` and ``compile()`` can handle ``ParsedExpression`` and "
"``SerializedParsedExpression``::"
msgstr ""

#: ../../components/expression_language/caching.rst:1
msgid "Caching"
msgstr ""

#: ../../components/expression_language/caching.rst:1
msgid "ExpressionLanguage"
msgstr ""
