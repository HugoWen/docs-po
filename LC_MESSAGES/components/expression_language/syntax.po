# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/expression_language/syntax.rst:5
msgid "The Expression Syntax"
msgstr ""

#: ../../components/expression_language/syntax.rst:7
msgid ""
"The ExpressionLanguage component uses a specific syntax which is based on "
"the expression syntax of Twig. In this document, you can find all supported "
"syntaxes."
msgstr ""

#: ../../components/expression_language/syntax.rst:12
msgid "Supported Literals"
msgstr ""

#: ../../components/expression_language/syntax.rst:14
msgid "The component supports:"
msgstr ""

#: ../../components/expression_language/syntax.rst:16
msgid "**strings** - single and double quotes (e.g. ``'hello'``)"
msgstr ""

#: ../../components/expression_language/syntax.rst:17
msgid "**numbers** - e.g. ``103``"
msgstr ""

#: ../../components/expression_language/syntax.rst:18
msgid "**arrays** - using JSON-like notation (e.g. ``[1, 2]``)"
msgstr ""

#: ../../components/expression_language/syntax.rst:19
msgid "**hashes** - using JSON-like notation (e.g. ``{ foo: 'bar' }``)"
msgstr ""

#: ../../components/expression_language/syntax.rst:20
msgid "**booleans** - ``true`` and ``false``"
msgstr ""

#: ../../components/expression_language/syntax.rst:21
msgid "**null** - ``null``"
msgstr ""

#: ../../components/expression_language/syntax.rst:26
msgid "Working with Objects"
msgstr ""

#: ../../components/expression_language/syntax.rst:28
msgid ""
"When passing objects into an expression, you can use different syntaxes to "
"access properties and call methods on the object."
msgstr ""

#: ../../components/expression_language/syntax.rst:32
msgid "Accessing Public Properties"
msgstr ""

#: ../../components/expression_language/syntax.rst:34
msgid ""
"Public properties on objects can be accessed by using the ``.`` syntax, "
"similar to JavaScript::"
msgstr ""

#: ../../components/expression_language/syntax.rst:52
msgid "This will print out ``Honeycrisp``."
msgstr ""

#: ../../components/expression_language/syntax.rst:55
msgid "Calling Methods"
msgstr ""

#: ../../components/expression_language/syntax.rst:57
msgid ""
"The ``.`` syntax can also be used to call methods on an object, similar to "
"JavaScript::"
msgstr ""

#: ../../components/expression_language/syntax.rst:82
msgid "This will print out ``Hi Hi Hi!``."
msgstr ""

#: ../../components/expression_language/syntax.rst:87
msgid "Working with Functions"
msgstr ""

#: ../../components/expression_language/syntax.rst:89
msgid ""
"You can also use registered functions in the expression by using the same "
"syntax as PHP and JavaScript. The ExpressionLanguage component comes with "
"one function by default: ``constant()``, which will return the value of the "
"PHP constant::"
msgstr ""

#: ../../components/expression_language/syntax.rst:100
msgid "This will print out ``root``."
msgstr ""

#: ../../components/expression_language/syntax.rst:104
msgid ""
"To read how to register your own functions to use in an expression, see "
"\":doc:`/components/expression_language/extending`\"."
msgstr ""

#: ../../components/expression_language/syntax.rst:110
msgid "Working with Arrays"
msgstr ""

#: ../../components/expression_language/syntax.rst:112
msgid ""
"If you pass an array into an expression, use the ``[]`` syntax to access "
"array keys, similar to JavaScript::"
msgstr ""

#: ../../components/expression_language/syntax.rst:124
#: ../../components/expression_language/syntax.rst:152
msgid "This will print out ``42``."
msgstr ""

#: ../../components/expression_language/syntax.rst:127
msgid "Supported Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:129
msgid "The component comes with a lot of operators:"
msgstr ""

#: ../../components/expression_language/syntax.rst:132
msgid "Arithmetic Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:134
msgid "``+`` (addition)"
msgstr ""

#: ../../components/expression_language/syntax.rst:135
msgid "``-`` (subtraction)"
msgstr ""

#: ../../components/expression_language/syntax.rst:136
msgid "``*`` (multiplication)"
msgstr ""

#: ../../components/expression_language/syntax.rst:137
msgid "``/`` (division)"
msgstr ""

#: ../../components/expression_language/syntax.rst:138
msgid "``%`` (modulus)"
msgstr ""

#: ../../components/expression_language/syntax.rst:139
msgid "``**`` (pow)"
msgstr ""

#: ../../components/expression_language/syntax.rst:141
#: ../../components/expression_language/syntax.rst:213
#: ../../components/expression_language/syntax.rst:231
#: ../../components/expression_language/syntax.rst:249
#: ../../components/expression_language/syntax.rst:273
msgid "For example::"
msgstr ""

#: ../../components/expression_language/syntax.rst:155
msgid "Bitwise Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:157
msgid "``&`` (and)"
msgstr ""

#: ../../components/expression_language/syntax.rst:158
msgid "``|`` (or)"
msgstr ""

#: ../../components/expression_language/syntax.rst:159
msgid "``^`` (xor)"
msgstr ""

#: ../../components/expression_language/syntax.rst:162
msgid "Comparison Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:164
msgid "``==`` (equal)"
msgstr ""

#: ../../components/expression_language/syntax.rst:165
msgid "``===`` (identical)"
msgstr ""

#: ../../components/expression_language/syntax.rst:166
msgid "``!=`` (not equal)"
msgstr ""

#: ../../components/expression_language/syntax.rst:167
msgid "``!==`` (not identical)"
msgstr ""

#: ../../components/expression_language/syntax.rst:168
msgid "``<`` (less than)"
msgstr ""

#: ../../components/expression_language/syntax.rst:169
msgid "``>`` (greater than)"
msgstr ""

#: ../../components/expression_language/syntax.rst:170
msgid "``<=`` (less than or equal to)"
msgstr ""

#: ../../components/expression_language/syntax.rst:171
msgid "``>=`` (greater than or equal to)"
msgstr ""

#: ../../components/expression_language/syntax.rst:172
msgid "``matches`` (regex match)"
msgstr ""

#: ../../components/expression_language/syntax.rst:176
msgid ""
"To test if a string does *not* match a regex, use the logical ``not`` "
"operator in combination with the ``matches`` operator::"
msgstr ""

#: ../../components/expression_language/syntax.rst:181
msgid ""
"You must use parenthesis because the unary operator ``not`` has precedence "
"over the binary operator ``matches``."
msgstr ""

#: ../../components/expression_language/syntax.rst:184
msgid "Examples::"
msgstr ""

#: ../../components/expression_language/syntax.rst:204
msgid "Both variables would be set to ``false``."
msgstr ""

#: ../../components/expression_language/syntax.rst:207
msgid "Logical Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:209
msgid "``not`` or ``!``"
msgstr ""

#: ../../components/expression_language/syntax.rst:210
msgid "``and`` or ``&&``"
msgstr ""

#: ../../components/expression_language/syntax.rst:211
msgid "``or`` or ``||``"
msgstr ""

#: ../../components/expression_language/syntax.rst:224
msgid "This ``$ret`` variable will be set to ``true``."
msgstr ""

#: ../../components/expression_language/syntax.rst:227
msgid "String Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:229
msgid "``~`` (concatenation)"
msgstr ""

#: ../../components/expression_language/syntax.rst:241
msgid "This would print out ``Arthur Dent``."
msgstr ""

#: ../../components/expression_language/syntax.rst:244
msgid "Array Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:246
msgid "``in`` (contain)"
msgstr ""

#: ../../components/expression_language/syntax.rst:247
msgid "``not in`` (does not contain)"
msgstr ""

#: ../../components/expression_language/syntax.rst:266
msgid "The ``$inGroup`` would evaluate to ``true``."
msgstr ""

#: ../../components/expression_language/syntax.rst:269
msgid "Numeric Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:271
msgid "``..`` (range)"
msgstr ""

#: ../../components/expression_language/syntax.rst:290
msgid ""
"This will evaluate to ``true``, because ``user.age`` is in the range from "
"``18`` to ``45``."
msgstr ""

#: ../../components/expression_language/syntax.rst:294
msgid "Ternary Operators"
msgstr ""

#: ../../components/expression_language/syntax.rst:296
msgid "``foo ? 'yes' : 'no'``"
msgstr ""

#: ../../components/expression_language/syntax.rst:297
msgid "``foo ?: 'no'`` (equal to ``foo ? foo : 'no'``)"
msgstr ""

#: ../../components/expression_language/syntax.rst:298
msgid "``foo ? 'yes'`` (equal to ``foo ? 'yes' : ''``)"
msgstr ""

#: ../../components/expression_language/syntax.rst:1
msgid "Syntax"
msgstr ""

#: ../../components/expression_language/syntax.rst:1
msgid "ExpressionLanguage"
msgstr ""
