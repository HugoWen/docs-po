# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../components/expression_language/introduction.rst:6
msgid "The ExpressionLanguage Component"
msgstr ""

#: ../../components/expression_language/introduction.rst:8
msgid ""
"The ExpressionLanguage component provides an engine that can compile and "
"evaluate expressions. An expression is a one-liner that returns a value "
"(mostly, but not limited to, Booleans)."
msgstr ""

#: ../../components/expression_language/introduction.rst:13
msgid "Installation"
msgstr ""

#: ../../components/expression_language/introduction.rst:15
msgid "You can install the component in 2 different ways:"
msgstr ""

#: ../../components/expression_language/introduction.rst:17
msgid ""
":doc:`Install it via Composer </components/using_components>` (``symfony"
"/expression-language`` on `Packagist`_);"
msgstr ""

#: ../../components/expression_language/introduction.rst:18
msgid ""
"Use the official Git repository (https://github.com/symfony/expression-"
"language)."
msgstr ""

#: ../../components/expression_language/introduction.rst:21
msgid "How can the Expression Engine Help Me?"
msgstr ""

#: ../../components/expression_language/introduction.rst:23
msgid ""
"The purpose of the component is to allow users to use expressions inside "
"configuration for more complex logic. For some examples, the Symfony2 "
"Framework uses expressions in security, for validation rules and in route "
"matching."
msgstr ""

#: ../../components/expression_language/introduction.rst:27
msgid ""
"Besides using the component in the framework itself, the ExpressionLanguage "
"component is a perfect candidate for the foundation of a *business rule "
"engine*. The idea is to let the webmaster of a website configure things in a"
" dynamic way without using PHP and without introducing security problems:"
msgstr ""

#: ../../components/expression_language/introduction.rst:45
msgid ""
"Expressions can be seen as a very restricted PHP sandbox and are immune to "
"external injections as you must explicitly declare which variables are "
"available in an expression."
msgstr ""

#: ../../components/expression_language/introduction.rst:50
msgid "Usage"
msgstr ""

#: ../../components/expression_language/introduction.rst:52
msgid ""
"The ExpressionLanguage component can compile and evaluate expressions. "
"Expressions are one-liners that often return a Boolean, which can be used by"
" the code executing the expression in an ``if`` statement. A simple example "
"of an expression is ``1 + 2``. You can also use more complicated "
"expressions, such as ``someArray[3].someMethod('bar')``."
msgstr ""

#: ../../components/expression_language/introduction.rst:58
msgid "The component provides 2 ways to work with expressions:"
msgstr ""

#: ../../components/expression_language/introduction.rst:60
msgid ""
"**evaluation**: the expression is evaluated without being compiled to PHP;"
msgstr ""

#: ../../components/expression_language/introduction.rst:61
msgid ""
"**compile**: the expression is compiled to PHP, so it can be cached and "
"evaluated."
msgstr ""

#: ../../components/expression_language/introduction.rst:64
msgid ""
"The main class of the component is "
":class:`Symfony\\\\Component\\\\ExpressionLanguage\\\\ExpressionLanguage`::"
msgstr ""

#: ../../components/expression_language/introduction.rst:76
msgid "Expression Syntax"
msgstr ""

#: ../../components/expression_language/introduction.rst:78
msgid ""
"See :doc:`/components/expression_language/syntax` to learn the syntax of the"
" ExpressionLanguage component."
msgstr ""

#: ../../components/expression_language/introduction.rst:82
msgid "Passing in Variables"
msgstr ""

#: ../../components/expression_language/introduction.rst:84
msgid ""
"You can also pass variables into the expression, which can be of any valid "
"PHP type (including objects)::"
msgstr ""

#: ../../components/expression_language/introduction.rst:106
msgid ""
"This will print \"Honeycrisp\". For more information, see the "
":doc:`/components/expression_language/syntax` entry, especially :ref"
":`component-expression-objects` and :ref:`component-expression-arrays`."
msgstr ""

#: ../../components/expression_language/introduction.rst:110
msgid "Caching"
msgstr ""

#: ../../components/expression_language/introduction.rst:112
msgid ""
"The component provides some different caching strategies, read more about "
"them in :doc:`/components/expression_language/caching`."
msgstr ""

#: ../../components/expression_language/introduction.rst:1
msgid "Expressions"
msgstr ""

#: ../../components/expression_language/introduction.rst:1
msgid "Single: Components"
msgstr ""

#: ../../components/expression_language/introduction.rst:1
msgid "Expression Language"
msgstr ""
