# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../contributing/code/standards.rst:2
msgid "Coding Standards"
msgstr ""

#: ../../contributing/code/standards.rst:4
msgid ""
"When contributing code to Symfony, you must follow its coding standards. To "
"make a long story short, here is the golden rule: **Imitate the existing "
"Symfony code**. Most open-source Bundles and libraries used by Symfony also "
"follow the same guidelines, and you should too."
msgstr ""

#: ../../contributing/code/standards.rst:9
msgid ""
"Remember that the main advantage of standards is that every piece of code "
"looks and feels familiar, it's not about this or that being more readable."
msgstr ""

#: ../../contributing/code/standards.rst:12
msgid ""
"Symfony follows the standards defined in the `PSR-0`_, `PSR-1`_ and `PSR-2`_"
" documents."
msgstr ""

#: ../../contributing/code/standards.rst:15
msgid ""
"Since a picture - or some code - is worth a thousand words, here's a short "
"example containing most features described below:"
msgstr ""

#: ../../contributing/code/standards.rst:94
msgid "Structure"
msgstr ""

#: ../../contributing/code/standards.rst:96
msgid "Add a single space after each comma delimiter;"
msgstr ""

#: ../../contributing/code/standards.rst:98
msgid ""
"Add a single space around binary operators (``==``, ``&&``, ...), with the "
"exception of the concatenation (``.``) operator;"
msgstr ""

#: ../../contributing/code/standards.rst:101
msgid ""
"Place unary operators (``!``, ``--``, ...) adjacent to the affected "
"variable;"
msgstr ""

#: ../../contributing/code/standards.rst:103
msgid ""
"Add a comma after each array item in a multi-line array, even after the last"
" one;"
msgstr ""

#: ../../contributing/code/standards.rst:106
msgid ""
"Add a blank line before ``return`` statements, unless the return is alone "
"inside a statement-group (like an ``if`` statement);"
msgstr ""

#: ../../contributing/code/standards.rst:109
msgid ""
"Use braces to indicate control structure body regardless of the number of "
"statements it contains;"
msgstr ""

#: ../../contributing/code/standards.rst:112
msgid ""
"Define one class per file - this does not apply to private helper classes "
"that are not intended to be instantiated from the outside and thus are not "
"concerned by the `PSR-0`_ standard;"
msgstr ""

#: ../../contributing/code/standards.rst:116
msgid "Declare class properties before methods;"
msgstr ""

#: ../../contributing/code/standards.rst:118
msgid ""
"Declare public methods first, then protected ones and finally private ones. "
"The exceptions to this rule are the class constructor and the ``setUp`` and "
"``tearDown`` methods of PHPUnit tests, which should always be the first "
"methods to increase readability;"
msgstr ""

#: ../../contributing/code/standards.rst:123
msgid ""
"Use parentheses when instantiating classes regardless of the number of "
"arguments the constructor has;"
msgstr ""

#: ../../contributing/code/standards.rst:126
msgid ""
"Exception message strings should be concatenated using "
":phpfunction:`sprintf`."
msgstr ""

#: ../../contributing/code/standards.rst:129
msgid "Naming Conventions"
msgstr ""

#: ../../contributing/code/standards.rst:131
msgid ""
"Use camelCase, not underscores, for variable, function and method names, "
"arguments;"
msgstr ""

#: ../../contributing/code/standards.rst:134
msgid "Use underscores for option names and parameter names;"
msgstr ""

#: ../../contributing/code/standards.rst:136
msgid "Use namespaces for all classes;"
msgstr ""

#: ../../contributing/code/standards.rst:138
msgid ""
"Prefix abstract classes with ``Abstract``. Please note some early Symfony "
"classes do not follow this convention and have not been renamed for backward"
" compatibility reasons. However all new abstract classes must follow this "
"naming convention;"
msgstr ""

#: ../../contributing/code/standards.rst:142
msgid "Suffix interfaces with ``Interface``;"
msgstr ""

#: ../../contributing/code/standards.rst:144
msgid "Suffix traits with ``Trait``;"
msgstr ""

#: ../../contributing/code/standards.rst:146
msgid "Suffix exceptions with ``Exception``;"
msgstr ""

#: ../../contributing/code/standards.rst:148
msgid "Use alphanumeric characters and underscores for file names;"
msgstr ""

#: ../../contributing/code/standards.rst:150
msgid ""
"For type-hinting in PHPDocs and casting, use ``bool`` (instead of "
"``boolean`` or ``Boolean``), ``int`` (instead of ``integer``), ``float`` "
"(instead of ``double`` or ``real``);"
msgstr ""

#: ../../contributing/code/standards.rst:154
msgid ""
"Don't forget to look at the more verbose :doc:`conventions` document for "
"more subjective naming considerations."
msgstr ""

#: ../../contributing/code/standards.rst:160
msgid "Service Naming Conventions"
msgstr ""

#: ../../contributing/code/standards.rst:162
msgid "A service name contains groups, separated by dots;"
msgstr ""

#: ../../contributing/code/standards.rst:164
msgid "The DI alias of the bundle is the first group (e.g. ``fos_user``);"
msgstr ""

#: ../../contributing/code/standards.rst:166
msgid "Use lowercase letters for service and parameter names;"
msgstr ""

#: ../../contributing/code/standards.rst:168
msgid "A group name uses the underscore notation;"
msgstr ""

#: ../../contributing/code/standards.rst:170
msgid ""
"Each service has a corresponding parameter containing the class name, "
"following the ``SERVICE NAME.class`` convention."
msgstr ""

#: ../../contributing/code/standards.rst:174
msgid "Documentation"
msgstr ""

#: ../../contributing/code/standards.rst:176
msgid "Add PHPDoc blocks for all classes, methods, and functions;"
msgstr ""

#: ../../contributing/code/standards.rst:178
msgid "Omit the ``@return`` tag if the method does not return anything;"
msgstr ""

#: ../../contributing/code/standards.rst:180
msgid "The ``@package`` and ``@subpackage`` annotations are not used."
msgstr ""

#: ../../contributing/code/standards.rst:183
msgid "License"
msgstr ""

#: ../../contributing/code/standards.rst:185
msgid ""
"Symfony is released under the MIT license, and the license block has to be "
"present at the top of every PHP file, before the namespace."
msgstr ""
