# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../best_practices/business-logic.rst:2
msgid "Organizing Your Business Logic"
msgstr ""

#: ../../best_practices/business-logic.rst:4
msgid ""
"In computer software, **business logic** or domain logic is \"the part of "
"the program that encodes the real-world business rules that determine how "
"data can be created, displayed, stored, and changed\" (read `full "
"definition`_)."
msgstr ""

#: ../../best_practices/business-logic.rst:8
msgid ""
"In Symfony applications, business logic is all the custom code you write for"
" your app that's not specific to the framework (e.g. routing and "
"controllers). Domain classes, Doctrine entities and regular PHP classes that"
" are used as services are good examples of business logic."
msgstr ""

#: ../../best_practices/business-logic.rst:13
msgid ""
"For most projects, you should store everything inside the AppBundle. Inside "
"here, you can create whatever directories you want to organize things:"
msgstr ""

#: ../../best_practices/business-logic.rst:28
msgid "Storing Classes Outside of the Bundle?"
msgstr ""

#: ../../best_practices/business-logic.rst:30
msgid ""
"But there's no technical reason for putting business logic inside of a "
"bundle. If you like, you can create your own namespace inside the ``src/`` "
"directory and put things there:"
msgstr ""

#: ../../best_practices/business-logic.rst:48
msgid ""
"The recommended approach of using the ``AppBundle/`` directory is for "
"simplicity. If you're advanced enough to know what needs to live in a bundle"
" and what can live outside of one, then feel free to do that."
msgstr ""

#: ../../best_practices/business-logic.rst:53
msgid "Services: Naming and Format"
msgstr ""

#: ../../best_practices/business-logic.rst:55
msgid ""
"The blog application needs a utility that can transform a post title (e.g. "
"\"Hello World\") into a slug (e.g. \"hello-world\"). The slug will be used "
"as part of the post URL."
msgstr ""

#: ../../best_practices/business-logic.rst:59
msgid ""
"Let's create a new ``Slugger`` class inside ``src/AppBundle/Utils/`` and add"
" the following ``slugify()`` method:"
msgstr ""

#: ../../best_practices/business-logic.rst:77
msgid "Next, define a new service for that class."
msgstr ""

#: ../../best_practices/business-logic.rst:87
msgid ""
"Traditionally, the naming convention for a service involved following the "
"class name and location to avoid name collisions. Thus, the service *would "
"have been* called ``app.utils.slugger``. But by using short service names, "
"your code will be easier to read and use."
msgstr ""

#: ../../best_practices/business-logic.rst:0
#: ../../best_practices/business-logic.rst:0
#: ../../best_practices/business-logic.rst:0
#: ../../best_practices/business-logic.rst:0
msgid "Best Practice"
msgstr ""

#: ../../best_practices/business-logic.rst:94
msgid ""
"The name of your application's services should be as short as possible, but "
"unique enough that you can search your project for the service if you ever "
"need to."
msgstr ""

#: ../../best_practices/business-logic.rst:98
msgid ""
"Now you can use the custom slugger in any controller class, such as the "
"``AdminController``:"
msgstr ""

#: ../../best_practices/business-logic.rst:116
msgid "Service Format: YAML"
msgstr ""

#: ../../best_practices/business-logic.rst:118
msgid "In the previous section, YAML was used to define the service."
msgstr ""

#: ../../best_practices/business-logic.rst:122
msgid "Use the YAML format to define your own services."
msgstr ""

#: ../../best_practices/business-logic.rst:124
msgid ""
"This is controversial, and in our experience, YAML and XML usage is evenly "
"distributed among developers, with a slight preference towards YAML. Both "
"formats have the same performance, so this is ultimately a matter of "
"personal taste."
msgstr ""

#: ../../best_practices/business-logic.rst:129
msgid ""
"We recommend YAML because it's friendly to newcomers and concise. You can of"
" course use whatever format you like."
msgstr ""

#: ../../best_practices/business-logic.rst:133
msgid "Service: No Class Parameter"
msgstr ""

#: ../../best_practices/business-logic.rst:135
msgid ""
"You may have noticed that the previous service definition doesn't configure "
"the class namespace as a parameter:"
msgstr ""

#: ../../best_practices/business-logic.rst:150
msgid ""
"This practice is cumbersome and completely unnecessary for your own "
"services:"
msgstr ""

#: ../../best_practices/business-logic.rst:154
msgid "Don't define parameters for the classes of your services."
msgstr ""

#: ../../best_practices/business-logic.rst:156
msgid ""
"This practice was wrongly adopted from third-party bundles. When Symfony "
"introduced its service container, some developers used this technique to "
"easily allow overriding services. However, overriding a service by just "
"changing its class name is a very rare use case because, frequently, the new"
" service has different constructor arguments."
msgstr ""

#: ../../best_practices/business-logic.rst:163
msgid "Using a Persistence Layer"
msgstr ""

#: ../../best_practices/business-logic.rst:165
msgid ""
"Symfony is an HTTP framework that only cares about generating an HTTP "
"response for each HTTP request. That's why Symfony doesn't provide a way to "
"talk to a persistence layer (e.g. database, external API). You can choose "
"whatever library or strategy you want for this."
msgstr ""

#: ../../best_practices/business-logic.rst:170
msgid ""
"In practice, many Symfony applications rely on the independent `Doctrine "
"project`_ to define their model using entities and repositories. Just like "
"with business logic, we recommend storing Doctrine entities in the "
"AppBundle."
msgstr ""

#: ../../best_practices/business-logic.rst:175
msgid ""
"The three entities defined by our sample blog application are a good "
"example:"
msgstr ""

#: ../../best_practices/business-logic.rst:190
msgid ""
"If you're more advanced, you can of course store them under your own "
"namespace in ``src/``."
msgstr ""

#: ../../best_practices/business-logic.rst:194
msgid "Doctrine Mapping Information"
msgstr ""

#: ../../best_practices/business-logic.rst:196
msgid ""
"Doctrine Entities are plain PHP objects that you store in some \"database\"."
" Doctrine only knows about your entities through the mapping metadata "
"configured for your model classes. Doctrine supports four metadata formats: "
"YAML, XML, PHP and annotations."
msgstr ""

#: ../../best_practices/business-logic.rst:203
msgid ""
"Use annotations to define the mapping information of the Doctrine entities."
msgstr ""

#: ../../best_practices/business-logic.rst:205
msgid ""
"Annotations are by far the most convenient and agile way of setting up and "
"looking for mapping information:"
msgstr ""

#: ../../best_practices/business-logic.rst:273
msgid ""
"All formats have the same performance, so this is once again ultimately a "
"matter of taste."
msgstr ""

#: ../../best_practices/business-logic.rst:277
msgid "Data Fixtures"
msgstr ""

#: ../../best_practices/business-logic.rst:279
msgid ""
"As fixtures support is not enabled by default in Symfony, you should execute"
" the following command to install the Doctrine fixtures bundle:"
msgstr ""

#: ../../best_practices/business-logic.rst:286
msgid ""
"Then, enable the bundle in ``AppKernel.php``, but only for the ``dev`` and "
"``test`` environments:"
msgstr ""

#: ../../best_practices/business-logic.rst:312
msgid ""
"We recommend creating just *one* `fixture class`_ for simplicity, though "
"you're welcome to have more if that class gets quite large."
msgstr ""

#: ../../best_practices/business-logic.rst:315
msgid ""
"Assuming you have at least one fixtures class and that the database access "
"is configured properly, you can load your fixtures by executing the "
"following command:"
msgstr ""

#: ../../best_practices/business-logic.rst:328
msgid "Coding Standards"
msgstr ""

#: ../../best_practices/business-logic.rst:330
msgid ""
"The Symfony source code follows the `PSR-1`_ and `PSR-2`_ coding standards "
"that were defined by the PHP community. You can learn more about :doc:`the "
"Symfony Coding standards </contributing/code/standards>` and even use the "
"`PHP-CS-Fixer`_, which is a command-line utility that can fix the coding "
"standards of an entire codebase in a matter of seconds."
msgstr ""
