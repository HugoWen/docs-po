# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../best_practices/configuration.rst:2
msgid "Configuration"
msgstr ""

#: ../../best_practices/configuration.rst:4
msgid ""
"Configuration usually involves different application parts (such as "
"infrastructure and security credentials) and different environments "
"(development, production). That's why Symfony recommends that you split the "
"application configuration into three parts."
msgstr ""

#: ../../best_practices/configuration.rst:12
msgid "Infrastructure-Related Configuration"
msgstr ""

#: ../../best_practices/configuration.rst:0
#: ../../best_practices/configuration.rst:0
#: ../../best_practices/configuration.rst:0
#: ../../best_practices/configuration.rst:0
#: ../../best_practices/configuration.rst:0
msgid "Best Practice"
msgstr ""

#: ../../best_practices/configuration.rst:16
msgid ""
"Define the infrastructure-related configuration options in the "
"``app/config/parameters.yml`` file."
msgstr ""

#: ../../best_practices/configuration.rst:19
msgid ""
"The default ``parameters.yml`` file follows this recommendation and defines "
"the options related to the database and mail server infrastructure:"
msgstr ""

#: ../../best_practices/configuration.rst:40
msgid ""
"These options aren't defined inside the ``app/config/config.yml`` file "
"because they have nothing to do with the application's behavior. In other "
"words, your application doesn't care about the location of your database or "
"the credentials to access to it, as long as the database is correctly "
"configured."
msgstr ""

#: ../../best_practices/configuration.rst:48
msgid "Canonical Parameters"
msgstr ""

#: ../../best_practices/configuration.rst:52
msgid ""
"Define all your application's parameters in the "
"``app/config/parameters.yml.dist`` file."
msgstr ""

#: ../../best_practices/configuration.rst:55
msgid ""
"Since version 2.3, Symfony includes a configuration file called "
"``parameters.yml.dist``, which stores the canonical list of configuration "
"parameters for the application."
msgstr ""

#: ../../best_practices/configuration.rst:58
msgid ""
"Whenever a new configuration parameter is defined for the application, you "
"should also add it to this file and submit the changes to your version "
"control system. Then, whenever a developer updates the project or deploys it"
" to a server, Symfony will check if there is any difference between the "
"canonical ``parameters.yml.dist`` file and your local ``parameters.yml`` "
"file. If there is a difference, Symfony will ask you to provide a value for "
"the new parameter and it will add it to your local ``parameters.yml`` file."
msgstr ""

#: ../../best_practices/configuration.rst:67
msgid "Application-Related Configuration"
msgstr ""

#: ../../best_practices/configuration.rst:71
msgid ""
"Define the application behavior related configuration options in the "
"``app/config/config.yml`` file."
msgstr ""

#: ../../best_practices/configuration.rst:74
msgid ""
"The ``config.yml`` file contains the options used by the application to "
"modify its behavior, such as the sender of email notifications, or the "
"enabled `feature toggles`_. Defining these values in ``parameters.yml`` file"
" would add an extra layer of configuration that's not needed because you "
"don't need or want these configuration values to change on each server."
msgstr ""

#: ../../best_practices/configuration.rst:80
msgid ""
"The configuration options defined in the ``config.yml`` file usually vary "
"from one :doc:`environment </cookbook/configuration/environments>` to "
"another. That's why Symfony already includes ``app/config/config_dev.yml`` "
"and ``app/config/config_prod.yml`` files so that you can override specific "
"values for each environment."
msgstr ""

#: ../../best_practices/configuration.rst:86
msgid "Constants vs Configuration Options"
msgstr ""

#: ../../best_practices/configuration.rst:88
msgid ""
"One of the most common errors when defining application configuration is to "
"create new options for values that never change, such as the number of items"
" for paginated results."
msgstr ""

#: ../../best_practices/configuration.rst:94
msgid "Use constants to define configuration options that rarely change."
msgstr ""

#: ../../best_practices/configuration.rst:96
msgid ""
"The traditional approach for defining configuration options has caused many "
"Symfony apps to include an option like the following, which would be used to"
" control the number of posts to display on the blog homepage:"
msgstr ""

#: ../../best_practices/configuration.rst:106
msgid ""
"If you've done something like this in the past, it's likely that you've in "
"fact *never* actually needed to change that value. Creating a configuration "
"option for a value that you are never going to configure just isn't "
"necessary. Our recommendation is to define these values as constants in your"
" application. You could, for example, define a ``NUM_ITEMS`` constant in the"
" ``Post`` entity:"
msgstr ""

#: ../../best_practices/configuration.rst:124
msgid ""
"The main advantage of defining constants is that you can use their values "
"everywhere in your application. When using parameters, they are only "
"available from places with access to the Symfony container."
msgstr ""

#: ../../best_practices/configuration.rst:128
msgid ""
"Constants can be used for example in your Twig templates thanks to the "
"``constant()`` function:"
msgstr ""

#: ../../best_practices/configuration.rst:137
msgid ""
"And Doctrine entities and repositories can now easily access these values, "
"whereas they cannot access the container parameters:"
msgstr ""

#: ../../best_practices/configuration.rst:155
msgid ""
"The only notable disadvantage of using constants for this kind of "
"configuration values is that you cannot redefine them easily in your tests."
msgstr ""

#: ../../best_practices/configuration.rst:159
msgid "Semantic Configuration: Don't Do It"
msgstr ""

#: ../../best_practices/configuration.rst:163
msgid ""
"Don't define a semantic dependency injection configuration for your bundles."
msgstr ""

#: ../../best_practices/configuration.rst:165
msgid ""
"As explained in :doc:`/cookbook/bundles/extension` article, Symfony bundles "
"have two choices on how to handle configuration: normal service "
"configuration through the ``services.yml`` file and semantic configuration "
"through a special ``*Extension`` class."
msgstr ""

#: ../../best_practices/configuration.rst:170
msgid ""
"Although semantic configuration is much more powerful and provides nice "
"features such as configuration validation, the amount of work needed to "
"define that configuration isn't worth it for bundles that aren't meant to be"
" shared as third-party bundles."
msgstr ""

#: ../../best_practices/configuration.rst:176
msgid "Moving Sensitive Options Outside of Symfony Entirely"
msgstr ""

#: ../../best_practices/configuration.rst:178
msgid ""
"When dealing with sensitive options, like database credentials, we also "
"recommend that you store them outside the Symfony project and make them "
"available through environment variables. Learn how to do it in the following"
" article: :doc:`/cookbook/configuration/external_parameters`"
msgstr ""
