# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../best_practices/forms.rst:2
msgid "Forms"
msgstr "表单"

#: ../../best_practices/forms.rst:4
msgid ""
"Forms are one of the most misused Symfony components due to its vast scope "
"and endless list of features. In this chapter we'll show you some of the "
"best practices so you can leverage forms but get work done quickly."
msgstr ""

#: ../../best_practices/forms.rst:9
msgid "Building Forms"
msgstr "定义Forms"

#: ../../best_practices/forms.rst:0 ../../best_practices/forms.rst:0
#: ../../best_practices/forms.rst:0
msgid "Best Practice"
msgstr "最佳实践"

#: ../../best_practices/forms.rst:13
msgid "Define your forms as PHP classes."
msgstr ""

#: ../../best_practices/forms.rst:15
msgid ""
"The Form component allows you to build forms right inside your controller "
"code. This is perfectly fine if you don't need to reuse the form somewhere "
"else. But for organization and reuse, we recommend that you define each form"
" in its own PHP class::"
msgstr ""

#: ../../best_practices/forms.rst:52
msgid "To use the class, use ``createForm`` and instantiate the new class::"
msgstr ""

#: ../../best_practices/forms.rst:66
msgid "Registering Forms as Services"
msgstr "把表单注册为Services"

#: ../../best_practices/forms.rst:68
msgid ""
"You can also :ref:`register your form type as a service <form-cookbook-form-"
"field-service>`. But this is *not* recommended unless you plan to reuse the "
"new form type in many places or embed it in other forms directly or via the "
":doc:`collection type </reference/forms/types/collection>`."
msgstr ""

#: ../../best_practices/forms.rst:74
msgid ""
"For most forms that are used only to edit or create something, registering "
"the form as a service is over-kill, and makes it more difficult to figure "
"out exactly which form class is being used in a controller."
msgstr ""

#: ../../best_practices/forms.rst:79
msgid "Form Button Configuration"
msgstr "表单按钮的配置"

#: ../../best_practices/forms.rst:81
msgid ""
"Form classes should try to be agnostic to *where* they will be used. This "
"makes them easier to re-use later."
msgstr ""

#: ../../best_practices/forms.rst:86
msgid ""
"Add buttons in the templates, not in the form classes or the controllers."
msgstr ""

#: ../../best_practices/forms.rst:88
msgid ""
"Since Symfony 2.5, you can add buttons as fields on your form. This is a "
"nice way to simplify the template that renders your form. But if you add the"
" buttons directly in your form class, this would effectively limit the scope"
" of that form:"
msgstr ""

#: ../../best_practices/forms.rst:107
msgid ""
"This form *may* have been designed for creating posts, but if you wanted to "
"reuse it for editing posts, the button label would be wrong. Instead, some "
"developers configure form buttons in the controller::"
msgstr ""

#: ../../best_practices/forms.rst:135
msgid ""
"This is also an important error, because you are mixing presentation markup "
"(labels, CSS classes, etc.) with pure PHP code. Separation of concerns is "
"always a good practice to follow, so put all the view-related things in the "
"view layer:"
msgstr ""

#: ../../best_practices/forms.rst:150
msgid "Rendering the Form"
msgstr "输出表单HTML"

#: ../../best_practices/forms.rst:152
msgid ""
"There are a lot of ways to render your form, ranging from rendering the "
"entire thing in one line to rendering each part of each field independently."
" The best way depends on how much customization you need."
msgstr ""

#: ../../best_practices/forms.rst:156
msgid ""
"One of the simplest ways - which is especially useful during development - "
"is to render the form tags and use ``form_widget()`` to render all of the "
"fields:"
msgstr ""

#: ../../best_practices/forms.rst:166
msgid ""
"If you need more control over how your fields are rendered, then you should "
"remove the ``form_widget(form)`` function and render your fields "
"individually. See the :doc:`/cookbook/form/form_customization` article for "
"more information on this and how you can control *how* the form renders at a"
" global level using form theming."
msgstr ""

#: ../../best_practices/forms.rst:173
msgid "Handling Form Submits"
msgstr "处理表单提交"

#: ../../best_practices/forms.rst:175
msgid "Handling a form submit usually follows a similar template:"
msgstr ""

#: ../../best_practices/forms.rst:199
msgid ""
"There are really only two notable things here. First, we recommend that you "
"use a single action for both rendering the form and handling the form "
"submit. For example, you *could* have a ``newAction`` that *only* renders "
"the form and a ``createAction`` that *only* processes the form submit. Both "
"those actions will be almost identical. So it's much simpler to let "
"``newAction`` handle everything."
msgstr ""

#: ../../best_practices/forms.rst:206
msgid ""
"Second, we recommend using ``$form->isSubmitted()`` in the ``if`` statement "
"for clarity. This isn't technically needed, since ``isValid()`` first calls "
"``isSubmitted()``. But without this, the flow doesn't read well as it "
"*looks* like the form is *always* processed (even on the GET request)."
msgstr ""

#: ../../best_practices/forms.rst:212
msgid "Custom Form Field Types"
msgstr ""

#: ../../best_practices/forms.rst:216
msgid ""
"Add the ``app_`` prefix to your custom form field types to avoid collisions."
msgstr ""

#: ../../best_practices/forms.rst:218
msgid ""
"Custom form field types inherit from the ``AbstractType`` class, which "
"defines the ``getName()`` method to configure the name of that form type. "
"These names must be unique in the application."
msgstr ""

#: ../../best_practices/forms.rst:222
msgid ""
"If a custom form type uses the same name as any of the Symfony's built-in "
"form types, it will override it. The same happens when the custom form type "
"matches any of the types defined by the third-party bundles installed in "
"your application."
msgstr ""

#: ../../best_practices/forms.rst:226
msgid ""
"Add the ``app_`` prefix to your custom form field types to avoid name "
"collisions that can lead to hard to debug errors."
msgstr ""
