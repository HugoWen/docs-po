# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/deployment/azure-website.rst:5
#: ../../cookbook/deployment/azure-website.rst:1
msgid "Deploying to Microsoft Azure Website Cloud"
msgstr "部署到Microsoft Azure Website Cloud"

#: ../../cookbook/deployment/azure-website.rst:7
msgid ""
"This step by step cookbook describes how to deploy a small Symfony web "
"application to the Microsoft Azure Website cloud platform. It will explain "
"how to setup a new Azure website including configuring the right PHP version"
" and global environment variables. The document also shows how to you can "
"leverage Git and Composer to deploy your Symfony application to the cloud."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:14
msgid "Setting up the Azure Website"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:16
msgid ""
"To setup a new Microsoft Azure Website, first `signup with Azure`_ or sign "
"in with your credentials. Once you're connected to your `Azure Portal`_ "
"interface, scroll down to the bottom and select the **New** panel. On this "
"panel, click **Web Site** and choose **Custom Create**:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:25
msgid "Step 1: Create Web Site"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:27
msgid "Here, you will be prompted to fill in some basic information."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:32
msgid ""
"For the URL, enter the URL that you would like to use for your Symfony "
"application, then pick **Create new web hosting plan** in the region you "
"want. By default, a *free 20 MB SQL database* is selected in the database "
"dropdown list. In this tutorial, the Symfony app will connect to a MySQL "
"database. Pick the **Create a new MySQL database** option in the dropdown "
"list. You can keep the **DefaultConnection** string name. Finally, check the"
" box **Publish from source control** to enable a Git repository and go to "
"the next step."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:42
msgid "Step 2: New MySQL Database"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:44
msgid ""
"On this step, you will be prompted to setup your MySQL database storage with"
" a database name and a region. The MySQL database storage is provided by "
"Microsoft in partnership with ClearDB. Choose the same region you selected "
"for the hosting plan configuration in the previous step."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:52
msgid ""
"Agree to the terms and conditions and click on the right arrow to continue."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:55
msgid "Step 3: Where Is your Source Code"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:57
msgid ""
"Now, on the third step, select a **Local Git repository** item and click on "
"the right arrow to configure your Azure Website credentials."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:64
msgid "Step 4: New Username and Password"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:66
msgid ""
"Great! You're now on the final step. Create a username and a secure "
"password: these will become essential identifiers to connect to the FTP "
"server and also to push your application code to the Git repository."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:73
msgid ""
"Congratulations! Your Azure Website is now up and running. You can check it "
"by browsing to the Website url you configured in the first step. You should "
"see the following display in your web browser:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:80
msgid ""
"The Microsoft Azure portal also provides a complete control panel for the "
"Azure Website."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:86
msgid ""
"Your Azure Website is ready! But to run a Symfony site, you need to "
"configure just a few additional things."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:90
msgid "Configuring the Azure Website for Symfony"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:92
msgid ""
"This section of the tutorial details how to configure the correct version of"
" PHP to run Symfony. It also shows you how to enable some mandatory PHP "
"extensions and how to properly configure PHP for a production environment."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:97
msgid "Configuring the latest PHP Runtime"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:99
msgid ""
"Even though Symfony only requires PHP 5.3.3 to run, it's always recommended "
"to use the most recent PHP version whenever possible. PHP 5.3 is no longer "
"supported by the PHP core team, but you can update it easily in Azure."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:103
msgid ""
"To update your PHP version on Azure, go to the **Configure** tab of the "
"control panel and select the version you want."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:109
msgid ""
"Click the **Save** button in the bottom bar to save your changes and restart"
" the web server."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:114
msgid ""
"Choosing a more recent PHP version can greatly improve runtime performance. "
"PHP 5.5 ships with a new built-in PHP accelerator called OPCache that "
"replaces APC. On an Azure Website, OPCache is already enabled and there is "
"no need to install and setup APC."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:119
msgid ""
"The following screenshot shows the output of a :phpfunction:`phpinfo` script"
" run from an Azure Website to verify that PHP 5.5 is running with OPCache "
"enabled."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:127
msgid "Tweaking php.ini Configuration Settings"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:129
msgid ""
"Microsoft Azure allows you to override the ``php.ini`` global configuration "
"settings by creating a custom ``.user.ini`` file under the project root "
"directory (``site/wwwroot``)."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:140
msgid ""
"None of these settings *needs* to be overridden. The default PHP "
"configuration is already pretty good, so this is just an example to show how"
" you can easily tweak PHP internal settings by uploading your custom "
"``.ini`` file."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:144
msgid ""
"You can either manually create this file on your Azure Website FTP server "
"under the ``site/wwwroot`` directory or deploy it with Git. You can get your"
" FTP server credentials from the Azure Website Control panel under the "
"**Dashboard** tab on the right sidebar. If you want to use Git, simply put "
"your ``.user.ini`` file at the root of your local repository and push your "
"commits to your Azure Website repository."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:153
msgid ""
"This cookbook has a section dedicated to explaining how to configure your "
"Azure Website Git repository and how to push the commits to be deployed. See"
" `Deploying from Git`_. You can also learn more about configuring PHP "
"internal settings on the official `PHP MSDN documentation`_ page."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:159
msgid "Enabling the PHP intl Extension"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:161
msgid ""
"This is the tricky part of the guide! At the time of writing this cookbook, "
"Microsoft Azure Website provided the ``intl`` extension, but it's not "
"enabled by default. To enable the ``intl`` extension, there is no need to "
"upload any DLL files as the ``php_intl.dll`` file already exists on Azure. "
"In fact, this file just needs to be moved into the custom website extension "
"directory."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:169
msgid ""
"The Microsoft Azure team is currently working on enabling the ``intl`` PHP "
"extension by default. In the near future, the following steps will no longer"
" be necessary."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:173
msgid ""
"To get the ``php_intl.dll`` file under your ``site/wwwroot`` directory, "
"simply access the online **Kudu** tool by browsing to the following url:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:180
msgid ""
"**Kudu** is a set of tools to manage your application. It comes with a file "
"explorer, a command line prompt, a log stream and a configuration settings "
"summary page. Of course, this section can only be accessed if you're logged "
"in to your main Azure Website account."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:188
msgid ""
"From the Kudu front page, click on the **Debug Console** navigation item in "
"the main menu and choose **CMD**. This should open the **Debug Console** "
"page that shows a file explorer and a console prompt below."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:192
msgid ""
"In the console prompt, type the following three commands to copy the "
"original ``php_intl.dll`` extension file into a custom website ``ext/`` "
"directory. This new directory must be created under the main directory "
"``site/wwwroot``."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:202
msgid "The whole process and output should look like this:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:207
msgid ""
"To complete the activation of the ``php_intl.dll`` extension, you must tell "
"Azure Website to load it from the newly created ``ext`` directory. This can "
"be done by registering a global ``PHP_EXTENSIONS`` environment variable from"
" the **Configure** tab of the main Azure Website Control panel."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:212
msgid ""
"In the **app settings** section, register the ``PHP_EXTENSIONS`` environment"
" variable with the value ``ext\\php_intl.dll`` as shown in the screenshot "
"below:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:218
msgid ""
"Hit \"save\" to confirm your changes and restart the web server. The PHP "
"``Intl`` extension should now be available in your web server environment. "
"The following screenshot of a :phpfunction:`phpinfo` page verifies the "
"``intl`` extension is properly enabled:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:226
msgid ""
"Great! The PHP environment setup is now complete. Next, you'll learn how to "
"configure the Git repository and push code to production. You'll also learn "
"how to install and configure the Symfony app after it's deployed."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:231
msgid "Deploying from Git"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:233
msgid ""
"First, make sure Git is correctly installed on your local machine using the "
"following command in your terminal:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:242
msgid ""
"Get your Git from the `git-scm.com`_ website and follow the instructions to "
"install and configure it on your local machine."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:245
msgid ""
"In the Azure Website Control panel, browse the **Deployment** tab to get the"
" Git repository URL where you should push your code:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:251
msgid ""
"Now, you'll want to connect your local Symfony application with this remote "
"Git repository on Azure Website. If your Symfony application is not yet "
"stored with Git, you must first create a Git repository in your Symfony "
"application directory with the ``git init`` command and commit to it with "
"the ``git commit`` command."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:257
msgid ""
"Also, make sure your Symfony repository has a ``.gitignore`` file at its "
"root directory with at least the following contents:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:277
msgid ""
"The ``.gitignore`` file asks Git not to track any of the files and "
"directories that match these patterns. This means these files won't be "
"deployed to the Azure Website."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:281
msgid ""
"Now, from the command line on your local machine, type the following at the "
"root of your Symfony project:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:289
msgid ""
"Don't forget to replace the values enclosed by ``<`` and ``>`` with your "
"custom settings displayed in the **Deployment** tab of your Azure Website "
"panel. The ``git remote`` command connects the Azure Website remote Git "
"repository and assigns an alias to it with the name ``azure``. The second "
"``git push`` command pushes all your commits to the remote ``master`` branch"
" of your remote ``azure`` Git repository."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:296
msgid ""
"The deployment with Git should produce an output similar to the screenshot "
"below:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:302
msgid ""
"The code of the Symfony application has now been deployed to the Azure "
"Website which you can browse from the file explorer of the Kudu application."
" You should see the ``app/``, ``src/`` and ``web/`` directories under your "
"``site/wwwroot`` directory on the Azure Website filesystem."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:308
msgid "Configure the Symfony Application"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:310
msgid ""
"PHP has been configured and your code has been pushed with Git. The last "
"step is to configure the application and install the third party "
"dependencies it requires that aren't tracked by Git. Switch back to the "
"online **Console** of the Kudu application and execute the following "
"commands in it:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:321
msgid ""
"The ``curl`` command retrieves and downloads the Composer command line tool "
"and installs it at the root of the ``site/wwwroot`` directory. Then, running"
" the Composer ``install`` command downloads and installs all necessary "
"third-party libraries."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:326
msgid ""
"This may take a while depending on the number of third-party dependencies "
"you've configured in your ``composer.json`` file."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:331
msgid ""
"The ``-d`` switch allows you to quickly override/add any ``php.ini`` "
"settings. In this command, we are forcing PHP to use the ``intl`` extension,"
" because it is not enabled by default in Azure Website at the moment. Soon, "
"this ``-d`` option will no longer be needed since Microsoft will enable the "
"``intl`` extension by default."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:337
msgid ""
"At the end of the ``composer install`` command, you will be prompted to fill"
" in the values of some Symfony settings like database credentials, locale, "
"mailer credentials, CSRF token protection, etc. These parameters come from "
"the ``app/config/parameters.yml.dist`` file."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:345
msgid ""
"The most important thing in this cookbook is to correctly setup your "
"database settings. You can get your MySQL database settings on the right "
"sidebar of the **Azure Website Dashboard** panel. Simply click on the **View"
" Connection Strings** link to make them appear in a pop-in."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:353
msgid ""
"The displayed MySQL database settings should be something similar to the "
"code below. Of course, each value depends on what you've already configured."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:360
msgid ""
"Switch back to the console and answer the prompted questions and provide the"
" following answers. Don't forget to adapt the values below with your real "
"values from the MySQL connection string."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:374
msgid ""
"Don't forget to answer all the questions. It's important to set a unique "
"random string for the ``secret`` variable. For the mailer configuration, "
"Azure Website doesn't provide a built-in mailer service. You should consider"
" configuring the host-name and credentials of some other third-party mailing"
" service if your application needs to send emails."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:383
msgid ""
"Your Symfony application is now configured and should be almost operational."
" The final step is to build the database schema. This can easily be done "
"with the command line interface if you're using Doctrine. In the online "
"**Console** tool of the Kudu application, run the following command to mount"
" the tables into your MySQL database."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:393
msgid ""
"This command builds the tables and indexes for your MySQL database. If your "
"Symfony application is more complex than a basic Symfony Standard Edition, "
"you may have additional commands to execute for setup (see "
":doc:`/cookbook/deployment/tools`)."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:397
msgid ""
"Make sure that your application is running by browsing the ``app.php`` front"
" controller with your web browser and the following url:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:404
msgid ""
"If Symfony is correctly installed, you should see the front page of your "
"Symfony application showing."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:408
msgid "Configure the Web Server"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:410
msgid ""
"At this point, the Symfony application has been deployed and works perfectly"
" on the Azure Website. However, the ``web`` folder is still part of the url,"
" which you definitely don't want. But don't worry! You can easily configure "
"the web server to point to the ``web`` folder and remove the ``web`` in the "
"URL (and guarantee that nobody can access files outside of the ``web`` "
"directory.)"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:416
msgid ""
"To do this, create and deploy (see previous section about Git) the following"
" ``web.config`` file. This file must be located at the root of your project "
"next to the ``composer.json`` file. This file is the Microsoft IIS Server "
"equivalent to the well-known ``.htaccess`` file from Apache. For a Symfony "
"application, configure it with the following content:"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:455
msgid ""
"As you can see, the latest rule ``RewriteRequestsToPublic`` is responsible "
"for rewriting any urls to the ``web/app.php`` front controller which allows "
"you to skip the ``web/`` folder in the URL. The first rule called "
"``BlockAccessToPublic`` matches all url patterns that contain the ``web/`` "
"folder and serves a ``403 Forbidden`` HTTP response instead. This example is"
" based on Benjamin Eberlei's sample you can find on GitHub in the "
"`SymfonyAzureEdition`_ bundle."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:462
msgid ""
"Deploy this file under the ``site/wwwroot`` directory of the Azure Website "
"and browse to your application without the ``web/app.php`` segment in the "
"URL."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:466
msgid "Conclusion"
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:468
msgid ""
"Nice work! You've now deployed your Symfony application to the Microsoft "
"Azure Website Cloud platform. You also saw that Symfony can be easily "
"configured and executed on a Microsoft IIS web server. The process is simple"
" and easy to implement. And as a bonus, Microsoft is continuing to reduce "
"the number of steps needed so that deployment becomes even easier."
msgstr ""

#: ../../cookbook/deployment/azure-website.rst:1
msgid "Deployment"
msgstr ""
