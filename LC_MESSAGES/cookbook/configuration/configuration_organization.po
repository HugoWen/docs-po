# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/configuration/configuration_organization.rst:5
msgid "How to Organize Configuration Files"
msgstr "如何组织配置文件"

#: ../../cookbook/configuration/configuration_organization.rst:7
msgid ""
"The default Symfony Standard Edition defines three :doc:`execution "
"environments </cookbook/configuration/environments>` called ``dev``, "
"``prod`` and ``test``. An environment simply represents a way to execute the"
" same codebase with different configurations."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:12
msgid ""
"In order to select the configuration file to load for each environment, "
"Symfony executes the ``registerContainerConfiguration()`` method of the "
"``AppKernel`` class::"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:30
msgid ""
"This method loads the ``app/config/config_dev.yml`` file for the ``dev`` "
"environment and so on. In turn, this file loads the common configuration "
"file located at ``app/config/config.yml``. Therefore, the configuration "
"files of the default Symfony Standard Edition follow this structure:"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:53
msgid ""
"This default structure was chosen for its simplicity — one file per "
"environment. But as any other Symfony feature, you can customize it to "
"better suit your needs. The following sections explain different ways to "
"organize your configuration files. In order to simplify the examples, only "
"the ``dev`` and ``prod`` environments are taken into account."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:60
msgid "Different Directories per Environment"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:62
msgid ""
"Instead of suffixing the files with ``_dev`` and ``_prod``, this technique "
"groups all the related configuration files under a directory with the same "
"name as the environment:"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:90
msgid ""
"To make this work, change the code of the "
":method:`Symfony\\\\Component\\\\HttpKernel\\\\KernelInterface::registerContainerConfiguration`"
" method::"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:108
msgid ""
"Then, make sure that each ``config.yml`` file loads the rest of the "
"configuration files, including the common files. For instance, this would be"
" the imports needed for the ``app/config/dev/config.yml`` file:"
msgstr ""

#: ../../components/dependency_injection/_imports-parameters-note.rst.inc:3
msgid ""
"Due to the way in which parameters are resolved, you cannot use them to "
"build paths in imports dynamically. This means that something like the "
"following doesn't work:"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:156
msgid "Semantic Configuration Files"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:158
msgid ""
"A different organization strategy may be needed for complex applications "
"with large configuration files. For instance, you could create one file per "
"bundle and several files to define all application services:"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:189
msgid ""
"Again, change the code of the ``registerContainerConfiguration()`` method to"
" make Symfony aware of the new file organization::"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:206
msgid ""
"Following the same technique explained in the previous section, make sure to"
" import the appropriate configuration files from each main file "
"(``common.yml``, ``dev.yml`` and ``prod.yml``)."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:211
msgid "Advanced Techniques"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:213
msgid ""
"Symfony loads configuration files using the :doc:`Config component "
"</components/config/introduction>`, which provides some advanced features."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:218
msgid "Mix and Match Configuration Formats"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:220
msgid ""
"Configuration files can import files defined with any other built-in "
"configuration format (``.yml``, ``.xml``, ``.php``, ``.ini``):"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:269
msgid ""
"The ``IniFileLoader`` parses the file contents using the "
":phpfunction:`parse_ini_file` function. Therefore, you can only set "
"parameters to string values. Use one of the other loaders if you want to use"
" other data types (e.g. boolean, integer, etc.)."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:274
msgid ""
"If you use any other configuration format, you have to define your own "
"loader class extending it from "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\FileLoader`."
" When the configuration values are dynamic, you can use the PHP "
"configuration file to execute your own logic. In addition, you can define "
"your own services to load configurations from databases or web services."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:281
msgid "Global Configuration Files"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:283
msgid ""
"Some system administrators may prefer to store sensitive parameters in files"
" outside the project directory. Imagine that the database credentials for "
"your website are stored in the ``/etc/sites/mysite.com/parameters.yml`` "
"file. Loading this file is as simple as indicating the full file path when "
"importing it from any other configuration file:"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:327
msgid ""
"Most of the time, local developers won't have the same files that exist on "
"the production servers. For that reason, the Config component provides the "
"``ignore_errors`` option to silently discard errors when the loaded file "
"doesn't exist:"
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:370
msgid ""
"As you've seen, there are lots of ways to organize your configuration files."
" You can choose one of these or even create your own custom way of "
"organizing the files. Don't feel limited by the Standard Edition that comes "
"with Symfony. For even more customization, see "
"\":doc:`/cookbook/configuration/override_dir_structure`\"."
msgstr ""

#: ../../cookbook/configuration/configuration_organization.rst:1
msgid "Configuration"
msgstr ""
