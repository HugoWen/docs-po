# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/service_container/scopes.rst:5
msgid "How to Work with Scopes"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:7
msgid ""
"This entry is all about scopes, a somewhat advanced topic related to the "
":doc:`/book/service_container`. If you've ever gotten an error mentioning "
"\"scopes\" when creating services, then this entry is for you."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:13
msgid ""
"If you are trying to inject the ``request`` service, the simple solution is "
"to inject the ``request_stack`` service instead and access the current "
"Request by calling the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\RequestStack::getCurrentRequest`"
" method (see :ref:`book-container-request-stack`). The rest of this entry "
"talks about scopes in a theoretical and more advanced way. If you're dealing"
" with scopes for the ``request`` service, simply inject ``request_stack``."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:22
msgid "Understanding Scopes"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:24
msgid ""
"The scope of a service controls how long an instance of a service is used by"
" the container. The DependencyInjection component provides two generic "
"scopes:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:28
msgid ""
"``container`` (the default one): The same instance is used each time you "
"request it from this container."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:31
msgid ""
"``prototype``: A new instance is created each time you request the service."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:33
msgid ""
"The "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\DependencyInjection\\\\ContainerAwareHttpKernel`"
" also defines a third scope: ``request``. This scope is tied to the request,"
" meaning a new instance is created for each subrequest and is unavailable "
"outside the request (for instance in the CLI)."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:40
msgid "An Example: Client Scope"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:42
msgid ""
"Other than the ``request`` service (which has a simple solution, see the "
"above note), no services in the default Symfony2 container belong to any "
"scope other than ``container`` and ``prototype``. But for the purposes of "
"this entry, imagine there is another scope ``client`` and a service "
"``client_configuration`` that belongs to it. This is not a common situation,"
" but the idea is that you may enter and exit multiple ``client`` scopes "
"during a request, and each has its own ``client_configuration`` service."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:50
msgid ""
"Scopes add a constraint on the dependencies of a service: a service cannot "
"depend on services from a narrower scope. For example, if you create a "
"generic ``my_foo`` service, but try to inject the ``client_configuration`` "
"service, you will receive a "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\Exception\\\\ScopeWideningInjectionException`"
" when compiling the container. Read the sidebar below for more details."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:0
msgid "Scopes and Dependencies"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:59
msgid ""
"Imagine you've configured a ``my_mailer`` service. You haven't configured "
"the scope of the service, so it defaults to ``container``. In other words, "
"every time you ask the container for the ``my_mailer`` service, you get the "
"same object back. This is usually how you want your services to work."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:64
msgid ""
"Imagine, however, that you need the ``client_configuration`` service in your"
" ``my_mailer`` service, maybe because you're reading some details from it, "
"such as what the \"sender\" address should be. You add it as a constructor "
"argument. There are several reasons why this presents a problem:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:69
msgid ""
"When requesting ``my_mailer``, an instance of ``my_mailer`` (called "
"*MailerA* here) is created and the ``client_configuration`` service ( called"
" *ConfigurationA* here) is passed to it. Life is good!"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:73
msgid ""
"Your application now needs to do something with another client, and you've "
"architected your application in such a way that you handle this by entering "
"a new ``client_configuration`` scope and setting a new "
"``client_configuration`` service into the container. Call this "
"*ConfigurationB*."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:79
msgid ""
"Somewhere in your application, you once again ask for the ``my_mailer`` "
"service. Since your service is in the ``container`` scope, the same instance"
" (*MailerA*) is just re-used. But here's the problem: the *MailerA* instance"
" still contains the old *ConfigurationA* object, which is now **not** the "
"correct configuration object to have (*ConfigurationB* is now the current "
"``client_configuration`` service). This is subtle, but the mis-match could "
"cause major problems, which is why it's not allowed."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:88
msgid ""
"So, that's the reason *why* scopes exist, and how they can cause problems. "
"Keep reading to find out the common solutions."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:93
msgid ""
"A service can of course depend on a service from a wider scope without any "
"issue."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:97
msgid "Using a Service from a Narrower Scope"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:99
msgid "There are several solutions to the scope problem:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:101
msgid ""
"A) Use setter injection if the dependency is ``synchronized`` (see :ref"
":`using-synchronized-service`);"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:104
msgid ""
"B) Put your service in the same scope as the dependency (or a narrower one)."
" If you depend on the ``client_configuration`` service, this means putting "
"your new service in the ``client`` scope (see :ref:`changing-service-"
"scope`);"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:108
msgid ""
"C) Pass the entire container to your service and retrieve your dependency "
"from the container each time you need it to be sure you have the right "
"instance -- your service can live in the default ``container`` scope (see "
":ref:`passing-container`)."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:113
msgid "Each scenario is detailed in the following sections."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:118
msgid "A) Using a Synchronized Service"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:120
msgid "Synchronized services were introduced in Symfony 2.3."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:123
msgid ""
"Both injecting the container and setting your service to a narrower scope "
"have drawbacks. Assume first that the ``client_configuration`` service has "
"been marked as ``synchronized``:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:175
msgid ""
"Now, if you inject this service using setter injection, there are no "
"drawbacks and everything works without any special code in your service or "
"in your definition::"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:202
msgid ""
"Whenever the ``client`` scope is active, the service container will "
"automatically call the ``setClientConfiguration()`` method when the "
"``client_configuration`` service is set in the container."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:206
msgid ""
"You might have noticed that the ``setClientConfiguration()`` method accepts "
"``null`` as a valid value for the ``client_configuration`` argument. That's "
"because when leaving the ``client`` scope, the ``client_configuration`` "
"instance can be ``null``. Of course, you should take care of this "
"possibility in your code. This should also be taken into account when "
"declaring your service:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:262
msgid "B) Changing the Scope of your Service"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:264
msgid ""
"Changing the scope of a service should be done in its definition. This "
"example assumes that the ``Mailer`` class has a ``__construct`` function "
"whose first argument is the ``ClientConfiguration`` object:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:306
msgid "C) Passing the Container as a Dependency of your Service"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:308
msgid ""
"Setting the scope to a narrower one is not always possible (for instance, a "
"twig extension must be in the ``container`` scope as the Twig environment "
"needs it as a dependency). In these cases, you can pass the entire container"
" into your service::"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:336
msgid ""
"Take care not to store the client configuration in a property of the object "
"for a future call of the service as it would cause the same issue described "
"in the first section (except that Symfony cannot detect that you are wrong)."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:341
msgid "The service config for this class would look something like this:"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:376
msgid ""
"Injecting the whole container into a service is generally not a good idea "
"(only inject what you need)."
msgstr ""

#: ../../cookbook/service_container/scopes.rst:1
msgid "DependencyInjection"
msgstr ""

#: ../../cookbook/service_container/scopes.rst:1
msgid "Scopes"
msgstr ""
