# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/service_container/event_listener.rst:5
msgid "How to Create an Event Listener"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:7
msgid ""
"Symfony has various events and hooks that can be used to trigger custom "
"behavior in your application. Those events are thrown by the HttpKernel "
"component and can be viewed in the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\KernelEvents` class."
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:11
msgid ""
"To hook into an event and add your own custom logic, you have to create a "
"service that will act as an event listener on that event. In this entry, you"
" will create a service that will act as an Exception Listener, allowing you "
"to modify how exceptions are shown by your application. The "
"``KernelEvents::EXCEPTION`` event is just one of the core kernel events::"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:56
msgid ""
"Each event receives a slightly different type of ``$event`` object. For the "
"``kernel.exception`` event, it is "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\GetResponseForExceptionEvent`."
" To see what type of object each event listener receives, see "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\KernelEvents`."
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:62
msgid ""
"When setting a response for the ``kernel.request``, ``kernel.view`` or "
"``kernel.exception`` events, the propagation is stopped, so the lower "
"priority listeners on that event don't get called."
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:66
msgid ""
"Now that the class is created, you just need to register it as a service and"
" notify Symfony that it is a \"listener\" on the ``kernel.exception`` event "
"by using a special \"tag\":"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:98
msgid ""
"There is an additional tag option ``priority`` that is optional and defaults"
" to 0. This value can be from -255 to 255, and the listeners will be "
"executed in the order of their priority (highest to lowest). This is useful "
"when you need to guarantee that one listener is executed before another."
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:104
msgid "Request Events, Checking Types"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:106
msgid ""
"A single page can make several requests (one master request, and then "
"multiple sub-requests), which is why when working with the "
"``KernelEvents::REQUEST`` event, you might need to check the type of the "
"request. This can be easily done as follow::"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:132
msgid ""
"Two types of request are available in the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\HttpKernelInterface` "
"interface: ``HttpKernelInterface::MASTER_REQUEST`` and "
"``HttpKernelInterface::SUB_REQUEST``."
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:137
msgid "Debugging Event Listeners"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:139
msgid "The ``debug:event-dispatcher`` command was introduced in Symfony 2.6."
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:142
msgid ""
"You can find out what listeners are registered in the event dispatcher using"
" the console. To show all events and their listeners, run:"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:149
msgid ""
"You can get registered listeners for a particular event by specifying its "
"name:"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:1
msgid "Events"
msgstr ""

#: ../../cookbook/service_container/event_listener.rst:1
msgid "Create listener"
msgstr ""
