# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/form/data_transformers.rst:5
msgid "How to Use Data Transformers"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:7
msgid ""
"You'll often find the need to transform the data the user entered in a form "
"into something else for use in your program. You could easily do this "
"manually in your controller, but what if you want to use this specific form "
"in different places?"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:11
msgid ""
"Say you have a one-to-one relation of Task to Issue, e.g. a Task optionally "
"has an issue linked to it. Adding a listbox with all possible issues can "
"eventually lead to a really long listbox in which it is impossible to find "
"something. You might want to add a textbox instead, where the user can "
"simply enter the issue number."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:16
msgid ""
"You could try to do this in your controller, but it's not the best solution."
" It would be better if this issue were automatically converted to an Issue "
"object. This is where Data Transformers come into play."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:22
msgid ""
"When a form field has the ``inherit_data`` option set, Data Transformers "
"won't be applied to that field."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:26
msgid "Creating the Transformer"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:28
msgid ""
"First, create an ``IssueToNumberTransformer`` class - this class will be "
"responsible for converting to and from the issue number and the ``Issue`` "
"object::"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:102
msgid ""
"If you want a new issue to be created when an unknown number is entered, you"
" can instantiate it rather than throwing the "
"``TransformationFailedException``."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:107
msgid ""
"When ``null`` is passed to the ``transform()`` method, your transformer "
"should return an equivalent value of the type it is transforming to (e.g. an"
" empty string, 0 for integers or 0.0 for floats)."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:112
msgid "Using the Transformer"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:114
msgid ""
"Now that you have the transformer built, you just need to add it to your "
"issue field in some form."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:117
msgid ""
"You can also use transformers without creating a new custom form type by "
"calling ``addModelTransformer`` (or ``addViewTransformer`` - see `Model and "
"View Transformers`_) on any field builder::"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:159
msgid ""
"This example requires that you pass in the entity manager as an option when "
"creating your form. Later, you'll learn how you could create a custom "
"``issue`` field type to avoid needing to do this in your controller::"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:167
msgid ""
"Cool, you're done! Your user will be able to enter an issue number into the "
"text field and it will be transformed back into an Issue object. This means "
"that, after a successful submission, the Form framework will pass a real "
"Issue object to ``Task::setIssue()`` instead of the issue number."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:172
msgid ""
"If the issue isn't found, a form error will be created for that field and "
"its error message can be controlled with the ``invalid_message`` field "
"option."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:177
msgid ""
"Notice that adding a transformer requires using a slightly more complicated "
"syntax when adding the field. The following is **wrong**, as the transformer"
" would be applied to the entire form, instead of just this field::"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:187
msgid "Model and View Transformers"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:189
msgid ""
"In the above example, the transformer was used as a \"model\" transformer. "
"In fact, there are two different types of transformers and three different "
"types of underlying data."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:196
msgid "In any form, the three different types of data are:"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:198
msgid ""
"**Model data** - This is the data in the format used in your application "
"(e.g. an ``Issue`` object). If you call ``Form::getData`` or "
"``Form::setData``, you're dealing with the \"model\" data."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:202
msgid ""
"**Norm Data** - This is a normalized version of your data, and is commonly "
"the same as your \"model\" data (though not in our example). It's not "
"commonly used directly."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:206
msgid ""
"**View Data** - This is the format that's used to fill in the form fields "
"themselves. It's also the format in which the user will submit the data. "
"When you call ``Form::submit($data)``, the ``$data`` is in the \"view\" data"
" format."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:210
msgid ""
"The two different types of transformers help convert to and from each of "
"these types of data:"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:215
msgid "**Model transformers**:"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:214
msgid "``transform``: \"model data\" => \"norm data\""
msgstr ""

#: ../../cookbook/form/data_transformers.rst:215
msgid "``reverseTransform``: \"norm data\" => \"model data\""
msgstr ""

#: ../../cookbook/form/data_transformers.rst:219
msgid "**View transformers**:"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:218
msgid "``transform``: \"norm data\" => \"view data\""
msgstr ""

#: ../../cookbook/form/data_transformers.rst:219
msgid "``reverseTransform``: \"view data\" => \"norm data\""
msgstr ""

#: ../../cookbook/form/data_transformers.rst:221
msgid "Which transformer you need depends on your situation."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:223
msgid "To use the view transformer, call ``addViewTransformer``."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:226
msgid "So why Use the Model Transformer?"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:228
msgid ""
"In this example, the field is a ``text`` field, and a text field is always "
"expected to be a simple, scalar format in the \"norm\" and \"view\" formats."
" For this reason, the most appropriate transformer was the \"model\" "
"transformer (which converts to/from the *norm* format - string issue number "
"- to the *model* format - Issue object)."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:234
msgid ""
"The difference between the transformers is subtle and you should always "
"think about what the \"norm\" data for a field should really be. For "
"example, the \"norm\" data for a ``text`` field is a string, but is a "
"``DateTime`` object for a ``date`` field."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:240
msgid "Using Transformers in a custom Field Type"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:242
msgid ""
"In the above example, you applied the transformer to a normal ``text`` "
"field. This was easy, but has two downsides:"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:245
msgid ""
"1) You need to always remember to apply the transformer whenever you're "
"adding a field for issue numbers."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:248
msgid ""
"2) You need to worry about passing in the ``em`` option whenever you're "
"creating a form that uses the transformer."
msgstr ""

#: ../../cookbook/form/data_transformers.rst:251
msgid ""
"Because of these, you may choose to :doc:`create a custom field type "
"</cookbook/form/create_custom_field_type>`. First, create the custom field "
"type class::"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:302
msgid ""
"Next, register your type as a service and tag it with ``form.type`` so that "
"it's recognized as a custom field type:"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:334
msgid ""
"Now, whenever you need to use your special ``issue_selector`` field type, "
"it's quite easy::"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:1
msgid "Form"
msgstr ""

#: ../../cookbook/form/data_transformers.rst:1
msgid "Data transformers"
msgstr ""
