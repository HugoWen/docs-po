# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/form/create_custom_field_type.rst:5
msgid "How to Create a Custom Form Field Type"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:7
msgid ""
"Symfony comes with a bunch of core field types available for building forms."
" However there are situations where you may want to create a custom form "
"field type for a specific purpose. This recipe assumes you need a field "
"definition that holds a person's gender, based on the existing choice field."
" This section explains how the field is defined, how you can customize its "
"layout and finally, how you can register it for use in your application."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:15
msgid "Defining the Field Type"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:17
msgid ""
"In order to create the custom field type, first you have to create the class"
" representing the field. In this situation the class holding the field type "
"will be called ``GenderType`` and the file will be stored in the default "
"location for form fields, which is ``<BundleName>\\Form\\Type``. Make sure "
"the field extends :class:`Symfony\\\\Component\\\\Form\\\\AbstractType`::"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:54
msgid ""
"The location of this file is not important - the ``Form\\Type`` directory is"
" just a convention."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:57
msgid ""
"Here, the return value of the ``getParent`` function indicates that you're "
"extending the ``choice`` field type. This means that, by default, you "
"inherit all of the logic and rendering of that field type. To see some of "
"the logic, check out the `ChoiceType`_ class. There are three methods that "
"are particularly important:"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:66
msgid "``buildForm()``"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:64
msgid ""
"Each field type has a ``buildForm`` method, which is where you configure and"
" build any field(s). Notice that this is the same method you use to setup "
"*your* forms, and it works the same here."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:73
msgid "``buildView()``"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:69
msgid ""
"This method is used to set any extra variables you'll need when rendering "
"your field in a template. For example, in `ChoiceType`_, a ``multiple`` "
"variable is set and used in the template to set (or not set) the "
"``multiple`` attribute on the ``select`` field. See `Creating a Template for"
" the Field`_ for more details."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:75
msgid ""
"The ``configureOptions()`` method was introduced in Symfony 2.7. Previously,"
" the method was called ``setDefaultOptions()``."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:83
msgid "``configureOptions()``"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:80
msgid ""
"This defines options for your form type that can be used in ``buildForm()`` "
"and ``buildView()``. There are a lot of options common to all fields (see "
":doc:`/reference/forms/types/form`), but you can create any others that you "
"need here."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:87
msgid ""
"If you're creating a field that consists of many fields, then be sure to set"
" your \"parent\" type as ``form`` or something that extends ``form``. Also, "
"if you need to modify the \"view\" of any of your child types from your "
"parent type, use the ``finishView()`` method."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:92
msgid ""
"The ``getName()`` method returns an identifier which should be unique in "
"your application. This is used in various places, such as when customizing "
"how your form type will be rendered."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:96
msgid ""
"The goal of this field was to extend the choice type to enable selection of "
"a gender. This is achieved by fixing the ``choices`` to a list of possible "
"genders."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:101
msgid "Creating a Template for the Field"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:103
msgid ""
"Each field type is rendered by a template fragment, which is determined in "
"part by the value of your ``getName()`` method. For more information, see "
":ref:`cookbook-form-customization-form-themes`."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:107
msgid ""
"In this case, since the parent field is ``choice``, you don't *need* to do "
"any work as the custom field type will automatically be rendered like a "
"``choice`` type. But for the sake of this example, suppose that when your "
"field is \"expanded\" (i.e. radio buttons or checkboxes, instead of a select"
" field), you want to always render it in a ``ul`` element. In your form "
"theme template (see above link for details), create a ``gender_widget`` "
"block to handle this:"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:156
msgid ""
"Make sure the correct widget prefix is used. In this example the name should"
" be ``gender_widget``, according to the value returned by ``getName``. "
"Further, the main config file should point to the custom form template so "
"that it's used when rendering all forms."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:161
msgid "When using Twig this is:"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:188
msgid ""
"For the PHP templating engine, your configuration should look like this:"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:234
msgid "Using the Field Type"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:236
msgid ""
"You can now use your custom field type immediately, simply by creating a new"
" instance of the type in one of your forms::"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:255
msgid ""
"But this only works because the ``GenderType()`` is very simple. What if the"
" gender codes were stored in configuration or in a database? The next "
"section explains how more complex field types solve this problem."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:259
msgid ""
"The ``placeholder`` option was introduced in Symfony 2.6 in favor of "
"``empty_value``, which is available prior to 2.6."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:266
msgid "Creating your Field Type as a Service"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:268
msgid ""
"So far, this entry has assumed that you have a very simple custom field "
"type. But if you need access to configuration, a database connection, or "
"some other service, then you'll want to register your custom type as a "
"service. For example, suppose that you're storing the gender parameters in "
"configuration:"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:299
msgid ""
"To use the parameter, define your custom field type as a service, injecting "
"the ``genders`` parameter value as the first argument to its to-be-created "
"``__construct`` function:"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:341
msgid ""
"Make sure the services file is being imported. See :ref:`service-container-"
"imports-directive` for details."
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:344
msgid ""
"Be sure that the ``alias`` attribute of the tag corresponds with the value "
"returned by the ``getName`` method defined earlier. You'll see the "
"importance of this in a moment when you use the custom field type. But "
"first, add a ``__construct`` method to ``GenderType``, which receives the "
"gender configuration::"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:376
msgid ""
"Great! The ``GenderType`` is now fueled by the configuration parameters and "
"registered as a service. Additionally, because you used the ``form.type`` "
"alias in its configuration, using the field is now much easier::"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:397
msgid ""
"Notice that instead of instantiating a new instance, you can just refer to "
"it by the alias used in your service configuration, ``gender``. Have fun!"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:1
msgid "Form"
msgstr ""

#: ../../cookbook/form/create_custom_field_type.rst:1
msgid "Custom field type"
msgstr ""
