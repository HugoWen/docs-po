# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/bundles/configuration.rst:6
msgid "How to Create Friendly Configuration for a Bundle"
msgstr "如何给Bundle创建友好的配置项"

#: ../../cookbook/bundles/configuration.rst:8
msgid ""
"If you open your application configuration file (usually "
"``app/config/config.yml``), you'll see a number of different configuration "
"\"namespaces\", such as ``framework``, ``twig`` and ``doctrine``. Each of "
"these configures a specific bundle, allowing you to configure things at a "
"high level and then let the bundle make all the low-level, complex changes "
"based on your settings."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:14
msgid ""
"For example, the following tells the FrameworkBundle to enable the form "
"integration, which involves the definition of quite a few services as well "
"as integration of other related components:"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:0
msgid "Using Parameters to Configure your Bundle"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:48
msgid ""
"If you don't have plans to share your bundle between projects, it doesn't "
"make sense to use this more advanced way of configuration. Since you use the"
" bundle only in one project, you can just change the service configuration "
"each time."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:53
msgid ""
"If you *do* want to be able to configure something from within "
"``config.yml``, you can always create a parameter there and use that "
"parameter somewhere else."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:58
msgid "Using the Bundle Extension"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:60
msgid ""
"The basic idea is that instead of having the user override individual "
"parameters, you let the user configure just a few, specifically created, "
"options. As the bundle developer, you then parse through that configuration "
"and load correct services and parameters inside an \"Extension\" class."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:65
msgid ""
"As an example, imagine you are creating a social bundle, which provides "
"integration with Twitter and such. To be able to reuse your bundle, you have"
" to make the ``client_id`` and ``client_secret`` variables configurable. "
"Your bundle configuration would look like:"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:107
msgid "Read more about the extension in :doc:`/cookbook/bundles/extension`."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:111
msgid ""
"If a bundle provides an Extension class, then you should *not* generally "
"override any service container parameters from that bundle. The idea is that"
" if an Extension class is present, every setting that should be configurable"
" should be present in the configuration made available by that class. In "
"other words, the extension class defines all the public configuration "
"settings for which backward compatibility will be maintained."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:120
msgid ""
"For parameter handling within a Dependency Injection class see "
":doc:`/cookbook/configuration/using_parameters_in_dic`."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:125
msgid "Processing the ``$configs`` Array"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:127
msgid ""
"First things first, you have to create an extension class as explained in "
":doc:`extension`."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:130
msgid ""
"Whenever a user includes the ``acme_social`` key (which is the DI alias) in "
"a configuration file, the configuration under it is added to an array of "
"configurations and passed to the ``load()`` method of your extension "
"(Symfony automatically converts XML and YAML to an array)."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:135
msgid ""
"For the configuration example in the previous section, the array passed to "
"your ``load()`` method will look like this::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:147
msgid ""
"Notice that this is an *array of arrays*, not just a single flat array of "
"the configuration values. This is intentional, as it allows Symfony to parse"
" several configuration resources. For example, if ``acme_social`` appears in"
" another configuration file - say ``config_dev.yml`` - with different values"
" beneath it, the incoming array might look like this::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:169
msgid "The order of the two arrays depends on which one is set first."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:171
msgid ""
"But don't worry! Symfony's Config component will help you merge these "
"values, provide defaults and give the user validation errors on bad "
"configuration. Here's how it works. Create a ``Configuration`` class in the "
"``DependencyInjection`` directory and build a tree that defines the "
"structure of your bundle's configuration."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:177
msgid ""
"The ``Configuration`` class to handle the sample configuration looks like::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:209
msgid ""
"The ``Configuration`` class can be much more complicated than shown here, "
"supporting \"prototype\" nodes, advanced validation, XML-specific "
"normalization and advanced merging. You can read more about this in "
":doc:`the Config component documentation </components/config/definition>`. "
"You can also see it in action by checking out some of the core Configuration"
" classes, such as the one from the `FrameworkBundle Configuration`_ or the "
"`TwigBundle Configuration`_."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:217
msgid ""
"This class can now be used in your ``load()`` method to merge configurations"
" and force validation (e.g. if an additional option was passed, an exception"
" will be thrown)::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:229
msgid ""
"The ``processConfiguration()`` method uses the configuration tree you've "
"defined in the ``Configuration`` class to validate, normalize and merge all "
"of the configuration arrays together."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:235
msgid ""
"Instead of calling ``processConfiguration()`` in your extension each time "
"you provide some configuration options, you might want to use the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\DependencyInjection\\\\ConfigurableExtension`"
" to do this automatically for you::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:255
msgid ""
"This class uses the ``getConfiguration()`` method to get the Configuration "
"instance, you should override it if your Configuration class is not called "
"``Configuration`` or if it is not placed in the same namespace as the "
"extension."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:0
msgid "Processing the Configuration yourself"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:262
msgid ""
"Using the Config component is fully optional. The ``load()`` method gets an "
"array of configuration values. You can simply parse these arrays yourself "
"(e.g. by overriding configurations and using :phpfunction:`isset` to check "
"for the existence of a value). Be aware that it'll be very hard to support "
"XML."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:281
msgid "Modifying the Configuration of Another Bundle"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:283
msgid ""
"If you have multiple bundles that depend on each other, it may be useful to "
"allow one ``Extension`` class to modify the configuration passed to another "
"bundle's ``Extension`` class, as if the end-developer has actually placed "
"that configuration in their ``app/config/config.yml`` file. This can be "
"achieved using a prepend extension. For more details, see "
":doc:`/cookbook/bundles/prepend_extension`."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:291
msgid "Dump the Configuration"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:293
msgid ""
"The ``config:dump-reference`` command dumps the default configuration of a "
"bundle in the console using the Yaml format."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:296
msgid ""
"As long as your bundle's configuration is located in the standard location "
"(``YourBundle\\DependencyInjection\\Configuration``) and does not require "
"arguments to be passed to the constructor it will work automatically. If you"
" have something different, your ``Extension`` class must override the "
":method:`Extension::getConfiguration() "
"<Symfony\\\\Component\\\\HttpKernel\\\\DependencyInjection\\\\Extension::getConfiguration>`"
" method and return an instance of your ``Configuration``."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:304
msgid "Supporting XML"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:306
msgid ""
"Symfony allows people to provide the configuration in three different "
"formats: Yaml, XML and PHP. Both Yaml and PHP use the same syntax and are "
"supported by default when using the Config component. Supporting XML "
"requires you to do some more things. But when sharing your bundle with "
"others, it is recommended that you follow these steps."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:313
msgid "Make your Config Tree ready for XML"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:315
msgid ""
"The Config component provides some methods by default to allow it to "
"correctly process XML configuration. See \":ref:`component-config-"
"normalization`\" of the component documentation. However, you can do some "
"optional things as well, this will improve the experience of using XML "
"configuration:"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:321
msgid "Choosing an XML Namespace"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:323
msgid ""
"In XML, the `XML namespace`_ is used to determine which elements belong to "
"the configuration of a specific bundle. The namespace is returned from the "
":method:`Extension::getNamespace() "
"<Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\Extension::getNamespace>`"
" method. By convention, the namespace is a URL (it doesn't have to be a "
"valid URL nor does it need to exists). By default, the namespace for a "
"bundle is ``http://example.org/dic/schema/DI_ALIAS``, where ``DI_ALIAS`` is "
"the DI alias of the extension. You might want to change this to a more "
"professional URL::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:345
msgid "Providing an XML Schema"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:347
msgid ""
"XML has a very useful feature called `XML schema`_. This allows you to "
"describe all possible elements and attributes and their values in an XML "
"Schema Definition (an xsd file). This XSD file is used by IDEs for auto "
"completion and it is used by the Config component to validate the elements."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:352
msgid ""
"In order to use the schema, the XML configuration file must provide an "
"``xsi:schemaLocation`` attribute pointing to the XSD file for a certain XML "
"namespace. This location always starts with the XML namespace. This XML "
"namespace is then replaced with the XSD validation base path returned from "
":method:`Extension::getXsdValidationBasePath() "
"<Symfony\\\\Component\\\\DependencyInjection\\\\ExtensionInterface::getXsdValidationBasePath>`"
" method. This namespace is then followed by the rest of the path from the "
"base path to the file itself."
msgstr ""

#: ../../cookbook/bundles/configuration.rst:360
msgid ""
"By convention, the XSD file lives in the ``Resources/config/schema``, but "
"you can place it anywhere you like. You should return this path as the base "
"path::"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:376
msgid ""
"Assume the XSD file is called ``hello-1.0.xsd``, the schema location will be"
" ``http://acme_company.com/schema/dic/hello/hello-1.0.xsd``:"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:1
msgid "Configuration"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:1
msgid "Semantic"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:1
msgid "Bundle"
msgstr ""

#: ../../cookbook/bundles/configuration.rst:1
msgid "Extension configuration"
msgstr ""
