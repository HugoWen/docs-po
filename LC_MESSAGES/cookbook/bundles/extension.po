# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/bundles/extension.rst:6
msgid "How to Load Service Configuration inside a Bundle"
msgstr ""

#: ../../cookbook/bundles/extension.rst:8
msgid ""
"In Symfony, you'll find yourself using many services. These services can be "
"registered in the `app/config` directory of your application. But when you "
"want to decouple the bundle for use in other projects, you want to include "
"the service configuration in the bundle itself. This article will teach you "
"how to do that."
msgstr ""

#: ../../cookbook/bundles/extension.rst:15
msgid "Creating an Extension Class"
msgstr ""

#: ../../cookbook/bundles/extension.rst:17
msgid ""
"In order to load service configuration, you have to create a Dependency "
"Injection Extension for your bundle. This class has some conventions in "
"order to be detected automatically. But you'll later see how you can change "
"it to your own preferences. By default, the Extension has to comply with the"
" following conventions:"
msgstr ""

#: ../../cookbook/bundles/extension.rst:23
msgid "It has to live in the ``DependencyInjection`` namespace of the bundle;"
msgstr ""

#: ../../cookbook/bundles/extension.rst:25
msgid ""
"The name is equal to the bundle name with the ``Bundle`` suffix replaced by "
"``Extension`` (e.g. the Extension class of the AppBundle would be called "
"``AppExtension`` and the one for AcmeHelloBundle would be called "
"``AcmeHelloExtension``)."
msgstr ""

#: ../../cookbook/bundles/extension.rst:30
msgid ""
"The Extension class should implement the "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\ExtensionInterface`,"
" but usually you would simply extend the "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\Extension`"
" class::"
msgstr ""

#: ../../cookbook/bundles/extension.rst:50
msgid "Manually Registering an Extension Class"
msgstr ""

#: ../../cookbook/bundles/extension.rst:52
msgid ""
"When not following the conventions, you will have to manually register your "
"extension. To do this, you should override the "
":method:`Bundle::getContainerExtension() "
"<Symfony\\\\Component\\\\HttpKernel\\\\Bundle\\\\Bundle::build>` method to "
"return the instance of the extension::"
msgstr ""

#: ../../cookbook/bundles/extension.rst:68
msgid ""
"Since the new Extension class name doesn't follow the naming conventions, "
"you should also override :method:`Extension::getAlias() "
"<Symfony\\\\Component\\\\DependencyInjection\\\\Extension\\\\Extension::getAlias>`"
" to return the correct DI alias. The DI alias is the name used to refer to "
"the bundle in the container (e.g. in the ``app/config/config.yml`` file). By"
" default, this is done by removing the ``Extension`` suffix and converting "
"the class name to underscores (e.g. ``AcmeHelloExtension``'s DI alias is "
"``acme_hello``)."
msgstr ""

#: ../../cookbook/bundles/extension.rst:78
msgid "Using the ``load()`` Method"
msgstr ""

#: ../../cookbook/bundles/extension.rst:80
msgid ""
"In the ``load()`` method, all services and parameters related to this "
"extension will be loaded. This method doesn't get the actual container "
"instance, but a copy. This container only has the parameters from the actual"
" container. After loading the services and parameters, the copy will be "
"merged into the actual container, to ensure all services and parameters are "
"also added to the actual container."
msgstr ""

#: ../../cookbook/bundles/extension.rst:87
msgid ""
"In the ``load()`` method, you can use PHP code to register service "
"definitions, but it is more common if you put these definitions in a "
"configuration file (using the Yaml, XML or PHP format). Luckily, you can use"
" the file loaders in the extension!"
msgstr ""

#: ../../cookbook/bundles/extension.rst:92
msgid ""
"For instance, assume you have a file called ``services.xml`` in the "
"``Resources/config`` directory of your bundle, your load method looks like::"
msgstr ""

#: ../../cookbook/bundles/extension.rst:108
msgid ""
"Other available loaders are the ``YamlFileLoader``, ``PhpFileLoader`` and "
"``IniFileLoader``."
msgstr ""

#: ../../cookbook/bundles/extension.rst:113
msgid ""
"The ``IniFileLoader`` can only be used to load parameters and it can only "
"load them as strings."
msgstr ""

#: ../../cookbook/bundles/extension.rst:117
msgid "Using Configuration to Change the Services"
msgstr ""

#: ../../cookbook/bundles/extension.rst:119
msgid ""
"The Extension is also the class that handles the configuration for that "
"particular bundle (e.g. the configuration in ``app/config/config.yml``). To "
"read more about it, see the \":doc:`/cookbook/bundles/configuration`\" "
"article."
msgstr ""

#: ../../cookbook/bundles/extension.rst:1
msgid "Configuration"
msgstr ""

#: ../../cookbook/bundles/extension.rst:1
msgid "Semantic"
msgstr ""

#: ../../cookbook/bundles/extension.rst:1
msgid "Bundle"
msgstr ""

#: ../../cookbook/bundles/extension.rst:1
msgid "Extension configuration"
msgstr ""
