# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/templating/PHP.rst:5
msgid "How to Use PHP instead of Twig for Templates"
msgstr ""

#: ../../cookbook/templating/PHP.rst:7
msgid ""
"Symfony defaults to Twig for its template engine, but you can still use "
"plain PHP code if you want. Both templating engines are supported equally in"
" Symfony. Symfony adds some nice features on top of PHP to make writing "
"templates with PHP more powerful."
msgstr ""

#: ../../cookbook/templating/PHP.rst:13
msgid "Rendering PHP Templates"
msgstr ""

#: ../../cookbook/templating/PHP.rst:15
msgid ""
"If you want to use the PHP templating engine, first, make sure to enable it "
"in your application configuration file:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:48
msgid ""
"You can now render a PHP template instead of a Twig one simply by using the "
"``.php`` extension in the template name instead of ``.twig``. The controller"
" below renders the ``index.html.php`` template::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:63
msgid ""
"You can also use the `@Template`_ shortcut to render the default "
"``AppBundle:Hello:index.html.php`` template::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:81
msgid ""
"Enabling the ``php`` and ``twig`` template engines simultaneously is "
"allowed, but it will produce an undesirable side effect in your application:"
" the ``@`` notation for Twig namespaces will no longer be supported for the "
"``render()`` method::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:111
msgid "Decorating Templates"
msgstr ""

#: ../../cookbook/templating/PHP.rst:113
msgid ""
"More often than not, templates in a project share common elements, like the "
"well-known header and footer. In Symfony, this problem is thought about "
"differently: a template can be decorated by another one."
msgstr ""

#: ../../cookbook/templating/PHP.rst:117
msgid ""
"The ``index.html.php`` template is decorated by ``layout.html.php``, thanks "
"to the ``extend()`` call:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:127
msgid ""
"The ``AppBundle::layout.html.php`` notation sounds familiar, doesn't it? It "
"is the same notation used to reference a template. The ``::`` part simply "
"means that the controller element is empty, so the corresponding file is "
"directly stored under ``views/``."
msgstr ""

#: ../../cookbook/templating/PHP.rst:132
msgid "Now, have a look at the ``layout.html.php`` file:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:143
msgid ""
"The layout is itself decorated by another one (``::base.html.php``). Symfony"
" supports multiple decoration levels: a layout can itself be decorated by "
"another one. When the bundle part of the template name is empty, views are "
"looked for in the ``app/Resources/views/`` directory. This directory stores "
"global views for your entire project:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:163
msgid ""
"For both layouts, the ``$view['slots']->output('_content')`` expression is "
"replaced by the content of the child template, ``index.html.php`` and "
"``layout.html.php`` respectively (more on slots in the next section)."
msgstr ""

#: ../../cookbook/templating/PHP.rst:167
msgid ""
"As you can see, Symfony provides methods on a mysterious ``$view`` object. "
"In a template, the ``$view`` variable is always available and refers to a "
"special object that provides a bunch of methods that makes the template "
"engine tick."
msgstr ""

#: ../../cookbook/templating/PHP.rst:176
msgid "Working with Slots"
msgstr ""

#: ../../cookbook/templating/PHP.rst:178
msgid ""
"A slot is a snippet of code, defined in a template, and reusable in any "
"layout decorating the template. In the ``index.html.php`` template, define a"
" ``title`` slot:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:191
msgid ""
"The base layout already has the code to output the title in the header:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:201
msgid ""
"The ``output()`` method inserts the content of a slot and optionally takes a"
" default value if the slot is not defined. And ``_content`` is just a "
"special slot that contains the rendered child template."
msgstr ""

#: ../../cookbook/templating/PHP.rst:205
msgid "For large slots, there is also an extended syntax:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:217
msgid "Including other Templates"
msgstr ""

#: ../../cookbook/templating/PHP.rst:219
msgid ""
"The best way to share a snippet of template code is to define a template "
"that can then be included into other templates."
msgstr ""

#: ../../cookbook/templating/PHP.rst:222
msgid "Create a ``hello.html.php`` template:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:229
msgid "And change the ``index.html.php`` template to include it:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:238
msgid ""
"The ``render()`` method evaluates and returns the content of another "
"template (this is the exact same method as the one used in the controller)."
msgstr ""

#: ../../cookbook/templating/PHP.rst:245
msgid "Embedding other Controllers"
msgstr ""

#: ../../cookbook/templating/PHP.rst:247
msgid ""
"And what if you want to embed the result of another controller in a "
"template? That's very useful when working with Ajax, or when the embedded "
"template needs some variable not available in the main template."
msgstr ""

#: ../../cookbook/templating/PHP.rst:251
msgid ""
"If you create a ``fancy`` action, and want to include it into the "
"``index.html.php`` template, simply use the following code:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:264
msgid ""
"Here, the ``AppBundle:Hello:fancy`` string refers to the ``fancy`` action of"
" the ``Hello`` controller::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:285
msgid ""
"But where is the ``$view['actions']`` array element defined? Like "
"``$view['slots']``, it's called a template helper, and the next section "
"tells you more about those."
msgstr ""

#: ../../cookbook/templating/PHP.rst:293
msgid "Using Template Helpers"
msgstr ""

#: ../../cookbook/templating/PHP.rst:295
msgid ""
"The Symfony templating system can be easily extended via helpers. Helpers "
"are PHP objects that provide features useful in a template context. "
"``actions`` and ``slots`` are two of the built-in Symfony helpers."
msgstr ""

#: ../../cookbook/templating/PHP.rst:300
msgid "Creating Links between Pages"
msgstr ""

#: ../../cookbook/templating/PHP.rst:302
msgid ""
"Speaking of web applications, creating links between pages is a must. "
"Instead of hardcoding URLs in templates, the ``router`` helper knows how to "
"generate URLs based on the routing configuration. That way, all your URLs "
"can be easily updated by changing the configuration:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:313
msgid ""
"The ``generate()`` method takes the route name and an array of parameters as"
" arguments. The route name is the main key under which routes are referenced"
" and the parameters are the values of the placeholders defined in the route "
"pattern:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:326
msgid "Using Assets: Images, JavaScripts and Stylesheets"
msgstr ""

#: ../../cookbook/templating/PHP.rst:328
msgid ""
"What would the Internet be without images, JavaScripts, and stylesheets? "
"Symfony provides the ``assets`` tag to deal with them easily:"
msgstr ""

#: ../../cookbook/templating/PHP.rst:337
msgid ""
"The ``assets`` helper's main purpose is to make your application more "
"portable. Thanks to this helper, you can move the application root directory"
" anywhere under your web root directory without changing anything in your "
"template's code."
msgstr ""

#: ../../cookbook/templating/PHP.rst:343
msgid "Profiling Templates"
msgstr ""

#: ../../cookbook/templating/PHP.rst:345
msgid ""
"By using the ``stopwatch`` helper, you are able to time parts of your "
"template and display it on the timeline of the WebProfilerBundle::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:354
msgid ""
"If you use the same name more than once in your template, the times are "
"grouped on the same line in the timeline."
msgstr ""

#: ../../cookbook/templating/PHP.rst:358
msgid "Output Escaping"
msgstr ""

#: ../../cookbook/templating/PHP.rst:360
msgid ""
"When using PHP templates, escape variables whenever they are displayed to "
"the user::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:365
msgid ""
"By default, the ``escape()`` method assumes that the variable is outputted "
"within an HTML context. The second argument lets you change the context. For"
" instance, to output something in a JavaScript script, use the ``js`` "
"context::"
msgstr ""

#: ../../cookbook/templating/PHP.rst:1
msgid "PHP Templates"
msgstr ""

#: ../../cookbook/templating/PHP.rst:106 ../../cookbook/templating/PHP.rst:171
#: ../../cookbook/templating/PHP.rst:213 ../../cookbook/templating/PHP.rst:241
#: ../../cookbook/templating/PHP.rst:289
msgid "Templating"
msgstr ""

#: ../../cookbook/templating/PHP.rst:106 ../../cookbook/templating/PHP.rst:106
msgid "Layout"
msgstr ""

#: ../../cookbook/templating/PHP.rst:171 ../../cookbook/templating/PHP.rst:171
msgid "Slot"
msgstr ""

#: ../../cookbook/templating/PHP.rst:213
msgid "Include"
msgstr ""

#: ../../cookbook/templating/PHP.rst:241
msgid "Embedding pages"
msgstr ""

#: ../../cookbook/templating/PHP.rst:289
msgid "Helpers"
msgstr ""
