# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/web_services/php_soap_extension.rst:7
msgid "How to Create a SOAP Web Service in a Symfony Controller"
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:9
msgid ""
"Setting up a controller to act as a SOAP server is simple with a couple "
"tools. You must, of course, have the `PHP SOAP`_ extension installed. As the"
" PHP SOAP extension can not currently generate a WSDL, you must either "
"create one from scratch or use a 3rd party generator."
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:16
msgid ""
"There are several SOAP server implementations available for use with PHP. "
"`Zend SOAP`_ and `NuSOAP`_ are two examples. Although the PHP SOAP extension"
" is used in these examples, the general idea should still be applicable to "
"other implementations."
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:21
msgid ""
"SOAP works by exposing the methods of a PHP object to an external entity "
"(i.e. the person using the SOAP service). To start, create a class - "
"``HelloService`` - which represents the functionality that you'll expose in "
"your SOAP service. In this case, the SOAP service will allow the client to "
"call a method called ``hello``, which happens to send an email::"
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:53
msgid ""
"Next, you can train Symfony to be able to create an instance of this class. "
"Since the class sends an e-mail, it's been designed to accept a "
"``Swift_Mailer`` instance. Using the Service Container, you can configure "
"Symfony to construct a ``HelloService`` object properly:"
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:84
msgid ""
"Below is an example of a controller that is capable of handling a SOAP "
"request. If ``indexAction()`` is accessible via the route ``/soap``, then "
"the WSDL document can be retrieved via ``/soap?wsdl``."
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:113
msgid ""
"Take note of the calls to ``ob_start()`` and ``ob_get_clean()``. These "
"methods control `output buffering`_ which allows you to \"trap\" the echoed "
"output of ``$server->handle()``. This is necessary because Symfony expects "
"your controller to return a ``Response`` object with the output as its "
"\"content\". You must also remember to set the \"Content-Type\" header to "
"\"text/xml\", as this is what the client will expect. So, you use "
"``ob_start()`` to start buffering the STDOUT and use ``ob_get_clean()`` to "
"dump the echoed output into the content of the Response and clear the output"
" buffer. Finally, you're ready to return the ``Response``."
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:123
msgid ""
"Below is an example calling the service using a `NuSOAP`_ client. This "
"example assumes that the ``indexAction`` in the controller above is "
"accessible via the route ``/soap``::"
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:131
msgid "An example WSDL is below."
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:1
msgid "Web Services"
msgstr ""

#: ../../cookbook/web_services/php_soap_extension.rst:1
msgid "SOAP"
msgstr ""
