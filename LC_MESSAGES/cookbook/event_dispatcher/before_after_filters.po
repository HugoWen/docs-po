# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/event_dispatcher/before_after_filters.rst:5
msgid "How to Setup before and after Filters"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:7
msgid ""
"It is quite common in web application development to need some logic to be "
"executed just before or just after your controller actions acting as filters"
" or hooks."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:11
msgid ""
"In symfony1, this was achieved with the preExecute and postExecute methods. "
"Most major frameworks have similar methods but there is no such thing in "
"Symfony. The good news is that there is a much better way to interfere with "
"the Request -> Response process using the :doc:`EventDispatcher component "
"</components/event_dispatcher/introduction>`."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:17
msgid "Token Validation Example"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:19
msgid ""
"Imagine that you need to develop an API where some controllers are public "
"but some others are restricted to one or some clients. For these private "
"features, you might provide a token to your clients to identify themselves."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:23
msgid ""
"So, before executing your controller action, you need to check if the action"
" is restricted or not. If it is restricted, you need to validate the "
"provided token."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:29
msgid ""
"Please note that for simplicity in this recipe, tokens will be defined in "
"config and neither database setup nor authentication via the Security "
"component will be used."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:34
msgid "Before Filters with the ``kernel.controller`` Event"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:36
msgid ""
"First, store some basic token configuration using ``config.yml`` and the "
"parameters key:"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:68
msgid "Tag Controllers to Be Checked"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:70
msgid ""
"A ``kernel.controller`` listener gets notified on *every* request, right "
"before the controller is executed. So, first, you need some way to identify "
"if the controller that matches the request needs token validation."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:74
msgid ""
"A clean and easy way is to create an empty interface and make the "
"controllers implement it::"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:84
msgid "A controller that implements this interface simply looks like this::"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:101
msgid "Creating an Event Listener"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:103
msgid ""
"Next, you'll need to create an event listener, which will hold the logic "
"that you want executed before your controllers. If you're not familiar with "
"event listeners, you can learn more about them at "
":doc:`/cookbook/service_container/event_listener`::"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:146
msgid "Registering the Listener"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:148
msgid ""
"Finally, register your listener as a service and tag it as an event "
"listener. By listening on ``kernel.controller``, you're telling Symfony that"
" you want your listener to be called just before any controller is executed."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:184
msgid ""
"With this configuration, your ``TokenListener`` ``onKernelController`` "
"method will be executed on each request. If the controller that is about to "
"be executed implements ``TokenAuthenticatedController``, token "
"authentication is applied. This lets you have a \"before\" filter on any "
"controller that you want."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:191
msgid "After Filters with the ``kernel.response`` Event"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:193
msgid ""
"In addition to having a \"hook\" that's executed *before* your controller, "
"you can also add a hook that's executed *after* your controller. For this "
"example, imagine that you want to add a sha1 hash (with a salt using that "
"token) to all responses that have passed this token authentication."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:198
msgid ""
"Another core Symfony event - called ``kernel.response`` - is notified on "
"every request, but after the controller returns a Response object. Creating "
"an \"after\" listener is as easy as creating a listener class and "
"registering it as a service on this event."
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:203
msgid ""
"For example, take the ``TokenListener`` from the previous example and first "
"record the authentication token inside the request attributes. This will "
"serve as a basic flag that this request underwent token authentication::"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:222
msgid ""
"Now, add another method to this class - ``onKernelResponse`` - that looks "
"for this flag on the request object and sets a custom header on the response"
" if it's found::"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:243
msgid ""
"Finally, a second \"tag\" is needed in the service definition to notify "
"Symfony that the ``onKernelResponse`` event should be notified for the "
"``kernel.response`` event:"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:285
msgid ""
"That's it! The ``TokenListener`` is now notified before every controller is "
"executed (``onKernelController``) and after every controller returns a "
"response (``onKernelResponse``). By making specific controllers implement "
"the ``TokenAuthenticatedController`` interface, your listener knows which "
"controllers it should take action on. And by storing a value in the "
"request's \"attributes\" bag, the ``onKernelResponse`` method knows to add "
"the extra header. Have fun!"
msgstr ""

#: ../../cookbook/event_dispatcher/before_after_filters.rst:1
msgid "EventDispatcher"
msgstr ""
