# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/controller/error_pages.rst:6
msgid "How to Customize Error Pages"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:8
msgid ""
"When an exception is thrown, the core ``HttpKernel`` class catches it and "
"dispatches a ``kernel.exception`` event. This gives you the power to convert"
" the exception into a ``Response`` in a few different ways."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:12
msgid ""
"The core TwigBundle sets up a listener for this event which will run a "
"configurable (but otherwise arbitrary) controller to generate the response. "
"The default controller used has a sensible way of picking one out of the "
"available set of error templates."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:17
msgid ""
"Thus, error pages can be customized in different ways, depending on how much"
" control you need:"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:20
msgid ""
":ref:`Use the default ExceptionController and create a few templates that "
"allow you to customize how your different error pages look (easy); <use-"
"default-exception-controller>`"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:24
msgid ""
":ref:`Replace the default exception controller with your own (intermediate)."
" <custom-exception-controller>`"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:27
msgid ""
":ref:`Use the kernel.exception event to come up with your own handling "
"(advanced). <use-kernel-exception-event>`"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:33
msgid "Using the Default ExceptionController"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:35
msgid ""
"By default, the ``showAction()`` method of the "
":class:`Symfony\\\\Bundle\\\\TwigBundle\\\\Controller\\\\ExceptionController`"
" will be called when an exception occurs."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:39
msgid ""
"This controller will either display an *exception* or *error* page, "
"depending on the setting of the ``kernel.debug`` flag. While *exception* "
"pages give you a lot of helpful information during development, *error* "
"pages are meant to be shown to the user in production."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:47
msgid ""
"You can also :ref:`preview your error pages <testing-error-pages>` in "
"``kernel.debug`` mode."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:53
msgid "How the Template for the Error and Exception Pages Is Selected"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:55
msgid ""
"The TwigBundle contains some default templates for error and exception pages"
" in its ``Resources/views/Exception`` directory."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:60
msgid ""
"In a standard Symfony installation, the TwigBundle can be found at "
"``vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle``. In addition to the"
" standard HTML error page, it also provides a default error page for many of"
" the most common response formats, including JSON (``error.json.twig``), XML"
" (``error.xml.twig``) and even JavaScript (``error.js.twig``), to name a "
"few."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:67
msgid ""
"Here is how the ``ExceptionController`` will pick one of the available "
"templates based on the HTTP status code and request format:"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:70
msgid ""
"For *error* pages, it first looks for a template for the given format and "
"status code (like ``error404.json.twig``);"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:73
msgid ""
"If that does not exist or apply, it looks for a general template for the "
"given format (like ``error.json.twig`` or ``exception.json.twig``);"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:77
msgid ""
"Finally, it ignores the format and falls back to the HTML template (like "
"``error.html.twig`` or ``exception.html.twig``)."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:82
msgid ""
"If the exception being handled implements the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\HttpExceptionInterface`,"
" the ``getStatusCode()`` method will be called to obtain the HTTP status "
"code to use. Otherwise, the status code will be \"500\"."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:89
msgid "Overriding or Adding Templates"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:91
msgid ""
"To override these templates, simply rely on the standard method for "
"overriding templates that live inside a bundle. For more information, see "
":ref:`overriding-bundle-templates`."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:95
msgid ""
"For example, to override the default error template, create a new template "
"located at ``app/Resources/TwigBundle/views/Exception/error.html.twig``:"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:115
msgid ""
"You **must not** use ``is_granted`` in your error pages (or layout used by "
"your error pages), because the router runs before the firewall. If the "
"router throws an exception (for instance, when the route does not match), "
"then using ``is_granted`` will throw a further exception. You can use "
"``is_granted`` safely by saying ``{% if app.user and is_granted('...') %}``."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:123
msgid ""
"If you're not familiar with Twig, don't worry. Twig is a simple, powerful "
"and optional templating engine that integrates with Symfony. For more "
"information about Twig see :doc:`/book/templating`."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:127
msgid ""
"This works not only to replace the default templates, but also to add new "
"ones."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:130
msgid ""
"For instance, create an "
"``app/Resources/TwigBundle/views/Exception/error404.html.twig`` template to "
"display a special page for 404 (page not found) errors. Refer to the "
"previous section for the order in which the ``ExceptionController`` tries "
"different template names."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:137
msgid ""
"Often, the easiest way to customize an error page is to copy it from the "
"TwigBundle into ``app/Resources/TwigBundle/views/Exception`` and then modify"
" it."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:143
msgid ""
"The debug-friendly exception pages shown to the developer can even be "
"customized in the same way by creating templates such as "
"``exception.html.twig`` for the standard HTML exception page or "
"``exception.json.twig`` for the JSON exception page."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:151
msgid "Testing Error Pages during Development"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:153
msgid ""
"The default ``ExceptionController`` also allows you to preview your *error* "
"pages during development."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:156
msgid ""
"This feature was introduced in Symfony 2.6. Before, the third-party "
"`WebfactoryExceptionsBundle`_ could be used for the same purpose."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:160
msgid ""
"To use this feature, you need to have a definition in your "
"``routing_dev.yml`` file like so:"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:198
msgid ""
"If you're coming from an older version of Symfony, you might need to add "
"this to your ``routing_dev.yml`` file. If you're starting from scratch, the "
"`Symfony Standard Edition`_ already contains it for you."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:202
msgid "With this route added, you can use URLs like"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:209
msgid ""
"to preview the *error* page for a given status code as HTML or for a given "
"status code and format."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:215
msgid "Replacing the Default ExceptionController"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:217
msgid ""
"If you need a little more flexibility beyond just overriding the template, "
"then you can change the controller that renders the error page. For example,"
" you might need to pass some additional variables into your template."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:224
msgid ""
"Make sure you don't lose the exception pages that render the helpful error "
"messages during development."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:227
msgid ""
"To do this, simply create a new controller and set the "
":ref:`twig.exception_controller <config-twig-exception-controller>` option "
"to point to it."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:266
msgid "You can also set up your controller as a service."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:268
msgid ""
"The default value of ``twig.controller.exception:showAction`` refers to the "
"``showAction`` method of the ``ExceptionController`` described previously, "
"which is registered in the DIC as the ``twig.controller.exception`` service."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:273
msgid ""
"Your controller will be passed two parameters: ``exception``, which is a "
":class:`\\\\Symfony\\\\Component\\\\Debug\\\\Exception\\\\FlattenException` "
"instance created from the exception being handled, and ``logger``, an "
"instance of "
":class:`\\\\Symfony\\\\Component\\\\HttpKernel\\\\Log\\\\DebugLoggerInterface`"
" (which may be ``null``)."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:281
msgid ""
"The Request that will be dispatched to your controller is created in the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\EventListener\\\\ExceptionListener`."
" This event listener is set up by the TwigBundle."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:285
msgid ""
"You can, of course, also extend the previously described "
":class:`Symfony\\\\Bundle\\\\TwigBundle\\\\Controller\\\\ExceptionController`."
" In that case, you might want to override one or both of the ``showAction`` "
"and ``findTemplate`` methods. The latter one locates the template to be "
"used."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:293
msgid ""
"As of writing, the ``ExceptionController`` is *not* part of the Symfony API,"
" so be aware that it might change in following releases."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:298
msgid ""
"The :ref:`error page preview <testing-error-pages>` also works for your own "
"controllers set up this way."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:304
msgid "Working with the kernel.exception Event"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:306
msgid ""
"As mentioned in the beginning, the ``kernel.exception`` event is dispatched "
"whenever the Symfony Kernel needs to handle an exception. For more "
"information on that, see :ref:`kernel-kernel.exception`."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:310
msgid ""
"Working with this event is actually much more powerful than what has been "
"explained before but also requires a thorough understanding of Symfony "
"internals."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:314
msgid ""
"To give one example, assume your application throws specialized exceptions "
"with a particular meaning to your domain."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:317
msgid ""
"In that case, all the default ``ExceptionListener`` and "
"``ExceptionController`` could do for you was trying to figure out the right "
"HTTP status code and display your nice-looking error page."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:321
msgid ""
":doc:`Writing your own event listener "
"</cookbook/service_container/event_listener>` for the ``kernel.exception`` "
"event allows you to have a closer look at the exception and take different "
"actions depending on it. Those actions might include logging the exception, "
"redirecting the user to another page or rendering specialized error pages."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:329
msgid ""
"If your listener calls ``setResponse()`` on the "
":class:`Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\GetResponseForExceptionEvent`,"
" event propagation will be stopped and the response will be sent to the "
"client."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:334
msgid ""
"This approach allows you to create centralized and layered error handling: "
"Instead of catching (and handling) the same exceptions in various "
"controllers again and again, you can have just one (or several) listeners "
"deal with them."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:341
msgid ""
"To see an example, have a look at the `ExceptionListener`_ in the Security "
"Component."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:344
msgid ""
"It handles various security-related exceptions that are thrown in your "
"application (like "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Exception\\\\AccessDeniedException`)"
" and takes measures like redirecting the user to the login page, logging "
"them out and other things."
msgstr ""

#: ../../cookbook/controller/error_pages.rst:349
msgid "Good luck!"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:1
msgid "Controller"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:1
msgid "Customize error pages"
msgstr ""

#: ../../cookbook/controller/error_pages.rst:1
msgid "Error pages"
msgstr ""
