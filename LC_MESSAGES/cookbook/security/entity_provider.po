# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/security/entity_provider.rst:6
msgid "How to Load Security Users from the Database (the Entity Provider)"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:8
msgid ""
"Symfony's security system can load security users from anywhere - like a "
"database, via Active Directory or an OAuth server. This article will show "
"you how to load your users from the database via a Doctrine entity."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:13
msgid "Introduction"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:17
msgid ""
"Before you start, you should check out `FOSUserBundle`_. This external "
"bundle allows you to load users from the database (like you'll learn here) "
"*and* gives you built-in routes & controllers for things like login, "
"registration and forgot password. But, if you need to heavily customize your"
" user system *or* if you want to learn how things work, this tutorial is "
"even better."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:24
msgid "Loading users via a Doctrine entity has 2 basic steps:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:26
msgid ":ref:`Create your User entity <security-crete-user-entity>`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:27
msgid ""
":ref:`Configure security.yml to load from your entity <security-config-"
"entity-provider>`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:29
msgid ""
"Afterwards, you can learn more about :ref:`forbidding inactive users "
"<security-advanced-user-interface>`, :ref:`using a custom query "
"<authenticating-someone-with-a-custom-entity-provider>` and :ref:`user "
"serialization to the session <cookbook-security-serialize-equatable>`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:37
msgid "1) Create your User Entity"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:39
msgid ""
"For this entry, suppose that you already have a ``User`` entity inside an "
"``AppBundle`` with the following fields: ``id``, ``username``, ``password``,"
" ``email`` and ``isActive``:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:142
msgid ""
"To make things shorter, some of the getter and setter methods aren't shown. "
"But you can :ref:`generate <book-doctrine-generating-getters-and-setters>` "
"these by running:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:150
msgid ""
"Next, make sure to :ref:`create the database table <book-doctrine-creating-"
"the-database-tables-schema>`:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:157
msgid "What's this UserInterface?"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:159
msgid ""
"So far, this is just a normal entity. But in order to use this class in the "
"security system, it must implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface`. "
"This forces the class to have the five following methods:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:164
msgid ":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getRoles`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:165
msgid ":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getPassword`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:166
msgid ":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getSalt`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:167
msgid ":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getUsername`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:168
msgid ""
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::eraseCredentials`"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:170
msgid ""
"To learn more about each of these, see "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface`."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:173
msgid "What do the serialize and unserialize Methods do?"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:175
msgid ""
"At the end of each request, the User object is serialized to the session. On"
" the next request, it's unserialized. To help PHP do this correctly, you "
"need to implement ``Serializable``. But you don't need to serialize "
"everything: you only need a few fields (the ones shown above plus a few "
"extra if you decide to implement :ref:`AdvancedUserInterface <security-"
"advanced-user-interface>`). On each request, the ``id`` is used to query for"
" a fresh ``User`` object from the database."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:183
msgid "Want to know more? See :ref:`cookbook-security-serialize-equatable`."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:189
msgid "2) Configure Security to load from your Entity"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:191
msgid ""
"Now that you have a ``User`` entity that implements ``UserInterface``, you "
"just need to tell Symfony's security system about it in ``security.yml``."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:194
msgid ""
"In this example, the user will enter their username and password via HTTP "
"basic authentication. Symfony will query for a ``User`` entity matching the "
"username and then check the password (more on passwords in a moment):"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:275
msgid ""
"First, the ``encoders`` section tells Symfony to expect that the passwords "
"in the database will be encoded using ``bcrypt``. Second, the ``providers`` "
"section creates a \"user provider\" called ``our_db_provider`` that knows to"
" query from your ``AppBundle:User`` entity by the ``username`` property. The"
" name ``our_db_provider`` isn't important: it just needs to match the value "
"of the ``provider`` key under your firewall. Or, if you don't set the "
"``provider`` key under your firewall, the first \"user provider\" is "
"automatically used."
msgstr ""

#: ../../cookbook/security/_ircmaxwell_password-compat.rst.inc:3
msgid ""
"If you're using PHP 5.4 or lower, you'll need to install the ``ircmaxell"
"/password-compat`` library via Composer in order to be able to use the "
"``bcrypt`` encoder:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:286
msgid "Creating your First User"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:288
msgid ""
"To add users, you can implement a :doc:`registration form "
"</cookbook/doctrine/registration_form>` or add some `fixtures`_. This is "
"just a normal entity, so there's nothing tricky, *except* that you need to "
"encode each user's password. But don't worry, Symfony gives you a service "
"that will do this for you. See :ref:`security-encoding-password` for "
"details."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:294
msgid ""
"Below is an export of the ``app_users`` table from MySQL with user ``admin``"
" and password ``admin`` (which has been encoded)."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:0
msgid "Do you need to a Salt property?"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:308
msgid ""
"If you use ``bcrypt``, no. Otherwise, yes. All passwords must be hashed with"
" a salt, but ``bcrypt`` does this internally. Since this tutorial *does* use"
" ``bcrypt``, the ``getSalt()`` method in ``User`` can just return ``null`` "
"(it's not used). If you use a different algorithm, you'll need to uncomment "
"the ``salt`` lines in the ``User`` entity and add a persisted ``salt`` "
"property."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:318
msgid "Forbid Inactive Users (AdvancedUserInterface)"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:320
msgid ""
"If a User's ``isActive`` property is set to ``false`` (i.e. ``is_active`` is"
" 0 in the database), the user will still be able to login to the site "
"normally. This is easily fixable."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:324
msgid ""
"To exclude inactive users, change your ``User`` clas to implement "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\AdvancedUserInterface`."
" This extends "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface`, "
"so you only need the new interface::"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:375
msgid ""
"The "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\AdvancedUserInterface`"
" interface adds four extra methods to validate the account status:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:378
msgid ""
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\AdvancedUserInterface::isAccountNonExpired`"
" checks whether the user's account has expired;"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:380
msgid ""
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\AdvancedUserInterface::isAccountNonLocked`"
" checks whether the user is locked;"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:382
msgid ""
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\AdvancedUserInterface::isCredentialsNonExpired`"
" checks whether the user's credentials (password) has expired;"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:384
msgid ""
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\AdvancedUserInterface::isEnabled`"
" checks whether the user is enabled."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:387
msgid ""
"If *any* of these return ``false``, the user won't be allowed to login. You "
"can choose to have persisted properties for all of these, or whatever you "
"need (in this example, only ``isActive`` pulls from the database)."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:391
msgid ""
"So what's the difference between the methods? Each returns a slightly "
"different error message (and these can be translated when you render them in"
" your login template to customize them further)."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:397
msgid ""
"If you use ``AdvancedUserInterface``, you also need to add any of the "
"properties used by these methods (like ``isActive``) to the ``serialize()`` "
"and ``unserialize()`` methods. If you *don't* do this, your user may not be "
"deserialized correctly from the session on each request."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:402
msgid ""
"Congrats! Your database-loading security system is all setup! Next, add a "
"true :doc:`login form </cookbook/security/form_login>` instead of HTTP Basic"
" or keep reading for other topics."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:409
msgid "Using a Custom Query to Load the User"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:411
msgid ""
"It would be great if a user could login with their username *or* email, as "
"both are unique in the database. Unfortunately, the native entity provider "
"is only able to handle querying via a single property on the user."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:415
msgid ""
"To do this, make your ``UserRepository`` implement a special "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserProviderInterface`."
" This interface requires three methods: ``loadUserByUsername($username)``, "
"``refreshUser(UserInterface $user)``, and ``supportsClass($class)``::"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:473
msgid ""
"For more details on these methods, see "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserProviderInterface`."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:477
msgid ""
"Don't forget to add the repository class to the :ref:`mapping definition of "
"your entity <book-doctrine-custom-repository-classes>`."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:480
msgid ""
"To finish this, just remove the ``property`` key from the user provider in "
"``security.yml``:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:524
msgid ""
"This tells Symfony to *not* query automatically for the User. Instead, when "
"someone logs in, the ``loadUserByUsername()`` method on ``UserRepository`` "
"will be called."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:529
msgid "Managing Roles in the Database"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:531
msgid ""
"The end of this tutorial focuses on how to store and retrieve a list of "
"roles from the database. As mentioned previously, when your user is loaded, "
"its ``getRoles()`` method returns the array of security roles that should be"
" assigned to the user. You can load this data from anywhere - a hardcoded "
"list used for all users (e.g. ``array('ROLE_USER')``), a Doctrine array "
"property called ``roles``, or via a Doctrine relationship, as you'll learn "
"about in this section."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:541
msgid ""
"In a typical setup, you should always return at least 1 role from the "
"``getRoles()`` method. By convention, a role called ``ROLE_USER`` is usually"
" returned. If you fail to return any roles, it may appear as if your user "
"isn't authenticated at all."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:548
msgid ""
"In order to work with the security configuration examples on this page all "
"roles must be prefixed with ``ROLE_`` (see the :ref:`section about roles "
"<book-security-roles>` in the book). For example, your roles will be "
"``ROLE_ADMIN`` or ``ROLE_USER`` instead of ``ADMIN`` or ``USER``."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:554
msgid ""
"In this example, the ``AppBundle:User`` entity class defines a many-to-many "
"relationship with a ``AppBundle:Role`` entity class. A user can be related "
"to several roles and a role can be composed of one or more users. The "
"previous ``getRoles()`` method now returns the list of related roles. Notice"
" that ``__construct()`` and ``getRoles()`` methods have changed::"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:591
msgid ""
"The ``AppBundle:Role`` entity class defines three fields (``id``, ``name`` "
"and ``role``). The unique ``role`` field contains the role name (e.g. "
"``ROLE_ADMIN``) used by the Symfony security layer to secure parts of the "
"application::"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:647
msgid ""
"For brevity, the getter and setter methods are hidden, but you can "
":ref:`generate them <book-doctrine-generating-getters-and-setters>`:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:654
msgid "Don't forget also to update your database schema:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:660
msgid ""
"This will create the ``app_role`` table and a ``user_role`` that stores the "
"many-to-many relationship between ``app_user`` and ``app_role``. If you had "
"one user linked to one role, your database might look something like this:"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:681
msgid ""
"And that's it! When the user logs in, Symfony security system will call the "
"``User::getRoles`` method. This will return an array of ``Role`` objects "
"that Symfony will use to determine if the user should have access to certain"
" parts of the system."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:0
msgid "What's the purpose of the RoleInterface?"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:688
msgid ""
"Notice that the ``Role`` class implements "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Role\\\\RoleInterface`. "
"This is because Symfony's security system requires that the "
"``User::getRoles`` method returns an array of either role strings or objects"
" that implement this interface. If ``Role`` didn't implement this interface,"
" then ``User::getRoles`` would need to iterate over all the ``Role`` "
"objects, call ``getRole`` on each, and create an array of strings to return."
" Both approaches are valid and equivalent."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:700
msgid "Improving Performance with a Join"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:702
msgid ""
"To improve performance and avoid lazy loading of roles when retrieving a "
"user from the custom entity provider, you can use a Doctrine join to the "
"roles relationship in the ``UserRepository::loadUserByUsername()`` method. "
"This will fetch the user and their associated roles with a single query::"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:731
msgid ""
"The ``QueryBuilder::leftJoin()`` method joins and fetches related roles from"
" the ``AppBundle:User`` model class when a user is retrieved by their email "
"address or username."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:738
msgid "Understanding serialize and how a User is Saved in the Session"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:740
msgid ""
"If you're curious about the importance of the ``serialize()`` method inside "
"the ``User`` class or how the User object is serialized or deserialized, "
"then this section is for you. If not, feel free to skip this."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:744
msgid ""
"Once the user is logged in, the entire User object is serialized into the "
"session. On the next request, the User object is deserialized. Then, the "
"value of the ``id`` property is used to re-query for a fresh User object "
"from the database. Finally, the fresh User object is compared to the "
"deserialized User object to make sure that they represent the same user. For"
" example, if the ``username`` on the 2 User objects doesn't match for some "
"reason, then the user will be logged out for security reasons."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:752
msgid ""
"Even though this all happens automatically, there are a few important side-"
"effects."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:754
msgid ""
"First, the :phpclass:`Serializable` interface and its ``serialize`` and "
"``unserialize`` methods have been added to allow the ``User`` class to be "
"serialized to the session. This may or may not be needed depending on your "
"setup, but it's probably a good idea. In theory, only the ``id`` needs to be"
" serialized, because the "
":method:`Symfony\\\\Bridge\\\\Doctrine\\\\Security\\\\User\\\\EntityUserProvider::refreshUser`"
" method refreshes the user on each request by using the ``id`` (as explained"
" above). This gives us a \"fresh\" User object."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:762
msgid ""
"But Symfony also uses the ``username``, ``salt``, and ``password`` to verify"
" that the User has not changed between requests (it also calls your "
"``AdvancedUserInterface`` methods if you implement it). Failing to serialize"
" these may cause you to be logged out on each request. If your User "
"implements the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\EquatableInterface`,"
" then instead of these properties being checked, your ``isEqualTo`` method "
"is simply called, and you can check whatever properties you want. Unless you"
" understand this, you probably *won't* need to implement this interface or "
"worry about it."
msgstr ""

#: ../../cookbook/security/entity_provider.rst:1
#: ../../cookbook/security/entity_provider.rst:1
msgid "Security"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:1
msgid "User provider"
msgstr ""

#: ../../cookbook/security/entity_provider.rst:1
msgid "Entity provider"
msgstr ""
