# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/security/custom_password_authenticator.rst:5
msgid "How to Create a Custom Form Password Authenticator"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:7
msgid ""
"Imagine you want to allow access to your website only between 2pm and 4pm "
"UTC. Before Symfony 2.4, you had to create a custom token, factory, listener"
" and provider. In this entry, you'll learn how to do this for a login form "
"(i.e. where your user submits their username and password). Before Symfony "
"2.6, you had to use the password encoder to authenticate the user password."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:14
msgid "The Password Authenticator"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:16
msgid ""
"The ``UserPasswordEncoderInterface`` interface was introduced in Symfony "
"2.6."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:19
msgid ""
"First, create a new class that implements "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\SimpleFormAuthenticatorInterface`."
" Eventually, this will allow you to create custom logic for authenticating "
"the user::"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:88
msgid "How it Works"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:90
msgid ""
"Great! Now you just need to setup some :ref:`cookbook-security-password-"
"authenticator-config`. But first, you can find out more about what each "
"method in this class does."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:94
msgid "1) createToken"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:96
msgid ""
"When Symfony begins handling a request, ``createToken()`` is called, where "
"you create a "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\Authentication\\\\Token\\\\TokenInterface`"
" object that contains whatever information you need in "
"``authenticateToken()`` to authenticate the user (e.g. the username and "
"password)."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:101
msgid ""
"Whatever token object you create here will be passed to you later in "
"``authenticateToken()``."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:104
msgid "2) supportsToken"
msgstr ""

#: ../../cookbook/security/_supportsToken.rst.inc:1
msgid ""
"After Symfony calls ``createToken()``, it will then call ``supportsToken()``"
" on your class (and any other authentication listeners) to figure out who "
"should handle the token. This is just a way to allow several authentication "
"mechanisms to be used for the same firewall (that way, you can for instance "
"first try to authenticate the user via a certificate or an API key and fall "
"back to a form login)."
msgstr ""

#: ../../cookbook/security/_supportsToken.rst.inc:8
msgid ""
"Mostly, you just need to make sure that this method returns ``true`` for a "
"token that has been created by ``createToken()``. Your logic should probably"
" look exactly like this example."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:109
msgid "3) authenticateToken"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:111
msgid ""
"If ``supportsToken`` returns ``true``, Symfony will now call "
"``authenticateToken()``. Your job here is to check that the token is allowed"
" to log in by first getting the ``User`` object via the user provider and "
"then, by checking the password and the current time."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:118
msgid ""
"The \"flow\" of how you get the ``User`` object and determine whether or not"
" the token is valid (e.g. checking the password), may vary based on your "
"requirements."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:122
msgid ""
"Ultimately, your job is to return a *new* token object that is "
"\"authenticated\" (i.e. it has at least 1 role set on it) and which has the "
"``User`` object inside of it."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:126
msgid ""
"Inside this method, the password encoder is needed to check the password's "
"validity::"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:130
msgid ""
"This is a service that is already available in Symfony and it uses the "
"password algorithm that is configured in the security configuration (e.g. "
"``security.yml``) under the ``encoders`` key. Below, you'll see how to "
"inject that into the ``TimeAuthenticator``."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:137
msgid "Configuration"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:139
msgid "Now, configure your ``TimeAuthenticator`` as a service:"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:185
msgid ""
"Then, activate it in the ``firewalls`` section of the security configuration"
" using the ``simple_form`` key:"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:248
msgid ""
"The ``simple_form`` key has the same options as the normal ``form_login`` "
"option, but with the additional ``authenticator`` key that points to the new"
" service. For details, see :ref:`reference-security-firewall-form-login`."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:252
msgid ""
"If creating a login form in general is new to you or you don't understand "
"the ``check_path`` or ``login_path`` options, see "
":doc:`/cookbook/security/form_login`."
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:1
msgid "Security"
msgstr ""

#: ../../cookbook/security/custom_password_authenticator.rst:1
msgid "Custom Password Authenticator"
msgstr ""
