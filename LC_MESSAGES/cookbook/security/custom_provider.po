# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../cookbook/security/custom_provider.rst:5
msgid "How to Create a custom User Provider"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:7
msgid ""
"Part of Symfony's standard authentication process depends on \"user "
"providers\". When a user submits a username and password, the authentication"
" layer asks the configured user provider to return a user object for a given"
" username. Symfony then checks whether the password of this user is correct "
"and generates a security token so the user stays authenticated during the "
"current session. Out of the box, Symfony has an \"in_memory\" and an "
"\"entity\" user provider. In this entry you'll see how you can create your "
"own user provider, which could be useful if your users are accessed via a "
"custom database, a file, or - as shown in this example - a web service."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:18
msgid "Create a User Class"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:20
msgid ""
"First, regardless of *where* your user data is coming from, you'll need to "
"create a ``User`` class that represents that data. The ``User`` can look "
"however you want and contain any data. The only requirement is that the "
"class implements "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface`. "
"The methods in this interface should therefore be defined in the custom user"
" class: "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getRoles`,"
" "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getPassword`,"
" "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getSalt`,"
" "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::getUsername`,"
" "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserInterface::eraseCredentials`."
" It may also be useful to implement the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\EquatableInterface`"
" interface, which defines a method to check if the user is equal to the "
"current user. This interface requires an "
":method:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\EquatableInterface::isEqualTo`"
" method."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:36
msgid "This is how your ``WebserviceUser`` class looks in action::"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:105
msgid ""
"If you have more information about your users - like a \"first name\" - then"
" you can add a ``firstName`` field to hold that data."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:109
msgid "Create a User Provider"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:111
msgid ""
"Now that you have a ``User`` class, you'll create a user provider, which "
"will grab user information from some web service, create a "
"``WebserviceUser`` object, and populate it with data."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:115
msgid ""
"The user provider is just a plain PHP class that has to implement the "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserProviderInterface`,"
" which requires three methods to be defined: "
"``loadUserByUsername($username)``, ``refreshUser(UserInterface $user)``, and"
" ``supportsClass($class)``. For more details, see "
":class:`Symfony\\\\Component\\\\Security\\\\Core\\\\User\\\\UserProviderInterface`."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:121
msgid "Here's an example of how this might look::"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:170
msgid "Create a Service for the User Provider"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:172
msgid "Now you make the user provider available as a service:"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:202
msgid ""
"The real implementation of the user provider will probably have some "
"dependencies or configuration options or other services. Add these as "
"arguments in the service definition."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:208
msgid ""
"Make sure the services file is being imported. See :ref:`service-container-"
"imports-directive` for details."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:212
msgid "Modify ``security.yml``"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:214
msgid ""
"Everything comes together in your security configuration. Add the user "
"provider to the list of providers in the \"security\" section. Choose a name"
" for the user provider (e.g. \"webservice\") and mention the id of the "
"service you just defined."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:246
msgid ""
"Symfony also needs to know how to encode passwords that are supplied by "
"website users, e.g. by filling in a login form. You can do this by adding a "
"line to the \"encoders\" section in your security configuration:"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:275
msgid ""
"The value here should correspond with however the passwords were originally "
"encoded when creating your users (however those users were created). When a "
"user submits their password, the salt value is appended to the password and "
"then encoded using this algorithm before being compared to the hashed "
"password returned by your ``getPassword()`` method. Additionally, depending "
"on your options, the password may be encoded multiple times and encoded to "
"base64."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:0
msgid "Specifics on how Passwords are Encoded"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:284
msgid ""
"Symfony uses a specific method to combine the salt and encode the password "
"before comparing it to your encoded password. If ``getSalt()`` returns "
"nothing, then the submitted password is simply encoded using the algorithm "
"you specify in ``security.yml``. If a salt *is* specified, then the "
"following value is created and *then* hashed via the algorithm:"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:290
msgid "``$password.'{'.$salt.'}';``"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:292
msgid ""
"If your external users have their passwords salted via a different method, "
"then you'll need to do a bit more work so that Symfony properly encodes the "
"password. That is beyond the scope of this entry, but would include sub-"
"classing ``MessageDigestPasswordEncoder`` and overriding the "
"``mergePasswordAndSalt`` method."
msgstr ""

#: ../../cookbook/security/custom_provider.rst:298
msgid ""
"Additionally, the hash, by default, is encoded multiple times and encoded to"
" base64. For specific details, see `MessageDigestPasswordEncoder`_. To "
"prevent this, configure it in your configuration file:"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:1
msgid "Security"
msgstr ""

#: ../../cookbook/security/custom_provider.rst:1
msgid "User Provider"
msgstr ""
