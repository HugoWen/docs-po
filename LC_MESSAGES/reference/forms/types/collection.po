# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/forms/types/collection.rst:5
msgid "collection Field Type"
msgstr ""

#: ../../reference/forms/types/collection.rst:7
msgid ""
"This field type is used to render a \"collection\" of some field or form. In"
" the easiest sense, it could be an array of ``text`` fields that populate an"
" array ``emails`` field. In more complex examples, you can embed entire "
"forms, which is useful when creating forms that expose one-to-many "
"relationships (e.g. a product from where you can manage many related product"
" photos)."
msgstr ""

#: ../../reference/forms/types/collection.rst:14
msgid "Rendered as"
msgstr ""

#: ../../reference/forms/types/collection.rst:14
msgid "depends on the `type`_ option"
msgstr ""

#: ../../reference/forms/types/collection.rst:16
msgid "Options"
msgstr ""

#: ../../reference/forms/types/collection.rst:16
msgid "`allow_add`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:17
msgid "`allow_delete`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:18
msgid "`delete_empty`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:19
msgid "`options`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:20
msgid "`prototype`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:21
msgid "`prototype_name`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:22
msgid "`type`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:24
msgid "Inherited options"
msgstr ""

#: ../../reference/forms/types/collection.rst:24
msgid "`by_reference`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:25
msgid "`cascade_validation`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:26
msgid "`empty_data`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:27
msgid "`error_bubbling`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:28
msgid "`error_mapping`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:29
msgid "`label`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:30
msgid "`label_attr`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:31
msgid "`mapped`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:32
msgid "`required`_"
msgstr ""

#: ../../reference/forms/types/collection.rst:34
msgid "Parent type"
msgstr ""

#: ../../reference/forms/types/collection.rst:34
msgid ":doc:`form </reference/forms/types/form>`"
msgstr ""

#: ../../reference/forms/types/collection.rst:36
msgid "Class"
msgstr ""

#: ../../reference/forms/types/collection.rst:36
msgid ":class:`Symfony\\\\Component\\\\Form\\\\Extension\\\\Core\\\\Type\\\\CollectionType`"
msgstr ""

#: ../../reference/forms/types/collection.rst:41
msgid ""
"If you are working with a collection of Doctrine entities, pay special "
"attention to the `allow_add`_, `allow_delete`_ and `by_reference`_ options. "
"You can also see a complete example in the cookbook article "
":doc:`/cookbook/form/form_collections`."
msgstr ""

#: ../../reference/forms/types/collection.rst:47
msgid "Basic Usage"
msgstr ""

#: ../../reference/forms/types/collection.rst:49
msgid ""
"This type is used when you want to manage a collection of similar items in a"
" form. For example, suppose you have an ``emails`` field that corresponds to"
" an array of email addresses. In the form, you want to expose each email "
"address as its own input text box::"
msgstr ""

#: ../../reference/forms/types/collection.rst:64
msgid "The simplest way to render this is all at once:"
msgstr ""

#: ../../reference/forms/types/collection.rst:76
msgid "A much more flexible method would look like this:"
msgstr ""

#: ../../reference/forms/types/collection.rst:108
msgid ""
"In both cases, no input fields would render unless your ``emails`` data "
"array already contained some emails."
msgstr ""

#: ../../reference/forms/types/collection.rst:111
msgid ""
"In this simple example, it's still impossible to add new addresses or remove"
" existing addresses. Adding new addresses is possible by using the "
"`allow_add`_ option (and optionally the `prototype`_ option) (see example "
"below). Removing emails from the ``emails`` array is possible with the "
"`allow_delete`_ option."
msgstr ""

#: ../../reference/forms/types/collection.rst:117
msgid "Adding and Removing Items"
msgstr ""

#: ../../reference/forms/types/collection.rst:119
msgid ""
"If `allow_add`_ is set to ``true``, then if any unrecognized items are "
"submitted, they'll be added seamlessly to the array of items. This is great "
"in theory, but takes a little bit more effort in practice to get the client-"
"side JavaScript correct."
msgstr ""

#: ../../reference/forms/types/collection.rst:124
msgid ""
"Following along with the previous example, suppose you start with two emails"
" in the ``emails`` data array. In that case, two input fields will be "
"rendered that will look something like this (depending on the name of your "
"form):"
msgstr ""

#: ../../reference/forms/types/collection.rst:134
msgid ""
"To allow your user to add another email, just set `allow_add`_ to ``true`` "
"and - via JavaScript - render another field with the name "
"``form[emails][2]`` (and so on for more and more fields)."
msgstr ""

#: ../../reference/forms/types/collection.rst:138
msgid ""
"To help make this easier, setting the `prototype`_ option to ``true`` allows"
" you to render a \"template\" field, which you can then use in your "
"JavaScript to help you dynamically create these new fields. A rendered "
"prototype field will look like this:"
msgstr ""

#: ../../reference/forms/types/collection.rst:147
msgid ""
"By replacing ``__name__`` with some unique value (e.g. ``2``), you can build"
" and insert new HTML fields into your form."
msgstr ""

#: ../../reference/forms/types/collection.rst:150
msgid ""
"Using jQuery, a simple example might look like this. If you're rendering "
"your collection fields all at once (e.g. ``form_row(form.emails)``), then "
"things are even easier because the ``data-prototype`` attribute is rendered "
"automatically for you (with a slight difference - see note below) and all "
"you need is the JavaScript:"
msgstr ""

#: ../../reference/forms/types/collection.rst:205
msgid ""
"If you're rendering the entire collection at once, then the prototype is "
"automatically available on the ``data-prototype`` attribute of the element "
"(e.g. ``div`` or ``table``) that surrounds your collection. The only "
"difference is that the entire \"form row\" is rendered for you, meaning you "
"wouldn't have to wrap it in any container element as it was done above."
msgstr ""

#: ../../reference/forms/types/collection.rst:213
msgid "Field Options"
msgstr ""

#: ../../reference/forms/types/collection.rst:216
#: ../../reference/forms/types/collection.rst:393
msgid "allow_add"
msgstr ""

#: ../../reference/forms/types/collection.rst:218
#: ../../reference/forms/types/collection.rst:239
#: ../../reference/forms/types/collection.rst:262
msgid "**type**: ``Boolean`` **default**: ``false``"
msgstr ""

#: ../../reference/forms/types/collection.rst:220
msgid ""
"If set to ``true``, then if unrecognized items are submitted to the "
"collection, they will be added as new items. The ending array will contain "
"the existing items as well as the new item that was in the submitted data. "
"See the above example for more details."
msgstr ""

#: ../../reference/forms/types/collection.rst:225
msgid ""
"The `prototype`_ option can be used to help render a prototype item that can"
" be used - with JavaScript - to create new form items dynamically on the "
"client side. For more information, see the above example and :ref:`cookbook-"
"form-collections-new-prototype`."
msgstr ""

#: ../../reference/forms/types/collection.rst:231
msgid ""
"If you're embedding entire other forms to reflect a one-to-many database "
"relationship, you may need to manually ensure that the foreign key of these "
"new objects is set correctly. If you're using Doctrine, this won't happen "
"automatically. See the above link for more details."
msgstr ""

#: ../../reference/forms/types/collection.rst:237
#: ../../reference/forms/types/collection.rst:394
msgid "allow_delete"
msgstr ""

#: ../../reference/forms/types/collection.rst:241
msgid ""
"If set to ``true``, then if an existing item is not contained in the "
"submitted data, it will be correctly absent from the final array of items. "
"This means that you can implement a \"delete\" button via JavaScript which "
"simply removes a form element from the DOM. When the user submits the form, "
"its absence from the submitted data will mean that it's removed from the "
"final array."
msgstr ""

#: ../../reference/forms/types/collection.rst:247
msgid "For more information, see :ref:`cookbook-form-collections-remove`."
msgstr ""

#: ../../reference/forms/types/collection.rst:251
msgid ""
"Be careful when using this option when you're embedding a collection of "
"objects. In this case, if any embedded forms are removed, they *will* "
"correctly be missing from the final array of objects. However, depending on "
"your application logic, when one of those objects is removed, you may want "
"to delete it or at least remove its foreign key reference to the main "
"object. None of this is handled automatically. For more information, see "
":ref:`cookbook-form-collections-remove`."
msgstr ""

#: ../../reference/forms/types/collection.rst:260
msgid "delete_empty"
msgstr ""

#: ../../reference/forms/types/collection.rst:264
msgid ""
"If you want to explicitly remove entirely empty collection entries from your"
" form you have to set this option to true. However, existing collection "
"entries will only be deleted if you have the allow_delete_ option enabled. "
"Otherwise the empty values will be kept."
msgstr ""

#: ../../reference/forms/types/collection.rst:270
msgid "options"
msgstr ""

#: ../../reference/forms/types/collection.rst:272
#: ../../reference/forms/types/options/label_attr.rst.inc:4
msgid "**type**: ``array`` **default**: ``array()``"
msgstr ""

#: ../../reference/forms/types/collection.rst:274
msgid ""
"This is the array that's passed to the form type specified in the `type`_ "
"option. For example, if you used the :doc:`choice "
"</reference/forms/types/choice>` type as your `type`_ option (e.g. for a "
"collection of drop-down menus), then you'd need to at least pass the "
"``choices`` option to the underlying type::"
msgstr ""

#: ../../reference/forms/types/collection.rst:292
msgid "prototype"
msgstr ""

#: ../../reference/forms/types/collection.rst:294
#: ../../reference/forms/types/options/by_reference.rst.inc:4
#: ../../reference/forms/types/collection.rst:373
#: ../../reference/forms/types/options/required.rst.inc:4
msgid "**type**: ``Boolean`` **default**: ``true``"
msgstr ""

#: ../../reference/forms/types/collection.rst:296
msgid ""
"This option is useful when using the `allow_add`_ option. If ``true`` (and "
"if `allow_add`_ is also ``true``), a special \"prototype\" attribute will be"
" available so that you can render a \"template\" example on your page of "
"what a new element should look like. The ``name`` attribute given to this "
"element is ``__name__``. This allows you to add a \"add another\" button via"
" JavaScript which reads the prototype, replaces ``__name__`` with some "
"unique name or number, and render it inside your form. When submitted, it "
"will be added to your underlying array due to the `allow_add`_ option."
msgstr ""

#: ../../reference/forms/types/collection.rst:305
msgid ""
"The prototype field can be rendered via the ``prototype`` variable in the "
"collection field:"
msgstr ""

#: ../../reference/forms/types/collection.rst:318
msgid ""
"Note that all you really need is the \"widget\", but depending on how you're"
" rendering your form, having the entire \"form row\" may be easier for you."
msgstr ""

#: ../../reference/forms/types/collection.rst:323
msgid ""
"If you're rendering the entire collection field at once, then the prototype "
"form row is automatically available on the ``data-prototype`` attribute of "
"the element (e.g. ``div`` or ``table``) that surrounds your collection."
msgstr ""

#: ../../reference/forms/types/collection.rst:327
msgid ""
"For details on how to actually use this option, see the above example as "
"well as :ref:`cookbook-form-collections-new-prototype`."
msgstr ""

#: ../../reference/forms/types/collection.rst:331
msgid "prototype_name"
msgstr ""

#: ../../reference/forms/types/collection.rst:333
msgid "**type**: ``String`` **default**: ``__name__``"
msgstr ""

#: ../../reference/forms/types/collection.rst:335
msgid ""
"If you have several collections in your form, or worse, nested collections "
"you may want to change the placeholder so that unrelated placeholders are "
"not replaced with the same value."
msgstr ""

#: ../../reference/forms/types/collection.rst:340
msgid "type"
msgstr ""

#: ../../reference/forms/types/collection.rst:342
msgid ""
"**type**: ``string`` or "
":class:`Symfony\\\\Component\\\\Form\\\\FormTypeInterface` **required**"
msgstr ""

#: ../../reference/forms/types/collection.rst:344
msgid ""
"This is the field type for each item in this collection (e.g. ``text``, "
"``choice``, etc). For example, if you have an array of email addresses, "
"you'd use the :doc:`email </reference/forms/types/email>` type. If you want "
"to embed a collection of some other form, create a new instance of your form"
" type and pass it as this option."
msgstr ""

#: ../../reference/forms/types/collection.rst:351
msgid "Inherited Options"
msgstr ""

#: ../../reference/forms/types/collection.rst:353
msgid ""
"These options inherit from the :doc:`form </reference/forms/types/form>` "
"type. Not all options are listed here - only the most applicable to this "
"type:"
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:2
msgid "by_reference"
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:6
msgid ""
"In most cases, if you have a ``name`` field, then you expect ``setName()`` "
"to be called on the underlying object. In some cases, however, ``setName()``"
" may *not* be called. Setting ``by_reference`` ensures that the setter is "
"called in all cases."
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:11
msgid "To explain this further, here's a simple example::"
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:22
msgid ""
"If ``by_reference`` is true, the following takes place behind the scenes "
"when you call ``submit()`` (or ``handleRequest()``) on the form::"
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:29
msgid ""
"Notice that ``setAuthor()`` is not called. The author is modified by "
"reference."
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:31
msgid "If you set ``by_reference`` to false, submitting looks like this::"
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:39
msgid ""
"So, all that ``by_reference=false`` really does is force the framework to "
"call the setter on the parent object."
msgstr ""

#: ../../reference/forms/types/options/by_reference.rst.inc:42
msgid ""
"Similarly, if you're using the "
":doc:`collection</reference/forms/types/collection>` form type where your "
"underlying collection data is an object (like with Doctrine's "
"``ArrayCollection``), then ``by_reference`` must be set to ``false`` if you "
"need the adder and remover (e.g. ``addAuthor()`` and ``removeAuthor()``) to "
"be called."
msgstr ""

#: ../../reference/forms/types/options/cascade_validation.rst.inc:2
msgid "cascade_validation"
msgstr ""

#: ../../reference/forms/types/options/cascade_validation.rst.inc:4
msgid "**type**: Boolean **default**: false"
msgstr ""

#: ../../reference/forms/types/options/cascade_validation.rst.inc:6
msgid ""
"Set this option to ``true`` to force validation on embedded form types. For "
"example, if you have a ``ProductType`` with an embedded ``CategoryType``, "
"setting ``cascade_validation`` to ``true`` on ``ProductType`` will cause the"
" data from ``CategoryType`` to also be validated."
msgstr ""

#: ../../reference/forms/types/options/cascade_validation.rst.inc:13
msgid ""
"Instead of using this option, it is recommended that you use the ``Valid`` "
"constraint in your model to force validation on a child object stored on a "
"property. This cascades only the validation but not the use of the "
"``validation_group`` option on child forms. You can read more about this in "
"the section about :ref:`Embedding a Single Object <forms-embedding-single-"
"object>`."
msgstr ""

#: ../../reference/forms/types/options/_error_bubbling_hint.rst.inc:3
msgid ""
"By default the ``error_bubbling`` option is enabled for the :doc:`collection"
" Field Type </reference/forms/types/collection>`, which passes the errors to"
" the parent form. If you want to attach the errors to the locations where "
"they actually occur you have to set ``error_bubbling`` to ``false``."
msgstr ""

#: ../../reference/forms/types/options/empty_data.rst.inc:2
msgid "empty_data"
msgstr ""

#: ../../reference/forms/types/options/empty_data.rst.inc:4
msgid "**type**: ``mixed``"
msgstr ""

#: ../../reference/forms/types/collection.rst:365
msgid "The default value is ``array()`` (empty array)."
msgstr ""

#: ../../reference/forms/types/options/empty_data.rst.inc:3
msgid ""
"This option determines what value the field will return when the submitted "
"value is empty."
msgstr ""

#: ../../reference/forms/types/options/empty_data.rst.inc:6
msgid ""
"But you can customize this to your needs. For example, if you want the "
"``gender`` choice field to be explicitly set to ``null`` when no value is "
"selected, you can do it like this:"
msgstr ""

#: ../../reference/forms/types/options/empty_data.rst.inc:24
msgid ""
"If you want to set the ``empty_data`` option for your entire form class, see"
" the cookbook article :doc:`/cookbook/form/use_empty_data`."
msgstr ""

#: ../../reference/forms/types/collection.rst:371
msgid "error_bubbling"
msgstr ""

#: ../../reference/forms/types/options/_error_bubbling_body.rst.inc:1
msgid ""
"If ``true``, any errors for this field will be passed to the parent field or"
" form. For example, if set to ``true`` on a normal field, any errors for "
"that field will be attached to the main form, not to the specific field."
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:2
msgid "error_mapping"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:4
msgid "**type**: ``array`` **default**: ``empty``"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:6
msgid "This option allows you to modify the target of a validation error."
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:8
msgid ""
"Imagine you have a custom method named ``matchingCityAndZipCode`` that "
"validates whether the city and zip code match. Unfortunately, there is no "
"\"matchingCityAndZipCode\" field in your form, so all that Symfony can do is"
" display the error on top of the form."
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:13
msgid ""
"With customized error mapping, you can do better: map the error to the city "
"field so that it displays above it::"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:25
msgid "Here are the rules for the left and the right side of the mapping:"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:27
msgid "The left side contains property paths;"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:28
msgid ""
"If the violation is generated on a property or method of a class, its path "
"is simply ``propertyName``;"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:30
msgid ""
"If the violation is generated on an entry of an ``array`` or ``ArrayAccess``"
" object, the property path is ``[indexName]``;"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:32
msgid ""
"You can construct nested property paths by concatenating them, separating "
"properties by dots. For example: ``addresses[work].matchingCityAndZipCode``;"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:34
msgid ""
"The left side of the error mapping also accepts a dot ``.``, which refers to"
" the field itself. That means that any error added to the field is added to "
"the given nested field instead;"
msgstr ""

#: ../../reference/forms/types/options/error_mapping.rst.inc:37
msgid "The right side contains simply the names of fields in the form."
msgstr ""

#: ../../reference/forms/types/options/label.rst.inc:2
msgid "label"
msgstr ""

#: ../../reference/forms/types/options/label.rst.inc:4
msgid ""
"**type**: ``string`` **default**: The label is \"guessed\" from the field "
"name"
msgstr ""

#: ../../reference/forms/types/options/label.rst.inc:6
msgid ""
"Sets the label that will be used when rendering the field. Setting to false "
"will suppress the label. The label can also be directly set inside the "
"template:"
msgstr ""

#: ../../reference/forms/types/options/label_attr.rst.inc:2
msgid "label_attr"
msgstr ""

#: ../../reference/forms/types/options/label_attr.rst.inc:6
msgid ""
"Sets the HTML attributes for the ``<label>`` element, which will be used "
"when rendering the label for the field. It's an associative array with HTML "
"attribute as a key. This attributes can also be directly set inside the "
"template:"
msgstr ""

#: ../../reference/forms/types/options/mapped.rst.inc:2
msgid "mapped"
msgstr ""

#: ../../reference/forms/types/options/mapped.rst.inc:4
msgid "**type**: ``boolean``  **default**: ``true``"
msgstr ""

#: ../../reference/forms/types/options/mapped.rst.inc:6
msgid ""
"If you wish the field to be ignored when reading or writing to the object, "
"you can set the ``mapped`` option to ``false``."
msgstr ""

#: ../../reference/forms/types/options/required.rst.inc:2
msgid "required"
msgstr ""

#: ../../reference/forms/types/options/required.rst.inc:6
msgid ""
"If true, an `HTML5 required attribute`_ will be rendered. The corresponding "
"``label`` will also render with a ``required`` class."
msgstr ""

#: ../../reference/forms/types/options/required.rst.inc:9
msgid ""
"This is superficial and independent from validation. At best, if you let "
"Symfony guess your field type, then the value of this option will be guessed"
" from your validation information."
msgstr ""

#: ../../reference/forms/types/options/required.rst.inc:15
msgid ""
"The required option also affects how empty data for each field is handled. "
"For more details, see the `empty_data`_ option."
msgstr ""

#: ../../reference/forms/types/collection.rst:388
msgid "Field Variables"
msgstr ""

#: ../../reference/forms/types/collection.rst:391
msgid "Variable"
msgstr ""

#: ../../reference/forms/types/collection.rst:391
msgid "Type"
msgstr ""

#: ../../reference/forms/types/collection.rst:391
msgid "Usage"
msgstr ""

#: ../../reference/forms/types/collection.rst:393
#: ../../reference/forms/types/collection.rst:394
msgid "``Boolean``"
msgstr ""

#: ../../reference/forms/types/collection.rst:393
msgid "The value of the `allow_add`_ option."
msgstr ""

#: ../../reference/forms/types/collection.rst:394
msgid "The value of the `allow_delete`_ option."
msgstr ""

#: ../../reference/forms/types/collection.rst:1
msgid "Forms"
msgstr ""

#: ../../reference/forms/types/collection.rst:1
msgid "Fields; collection"
msgstr ""
