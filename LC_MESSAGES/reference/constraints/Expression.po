# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/constraints/Expression.rst:2
msgid "Expression"
msgstr ""

#: ../../reference/constraints/Expression.rst:4
msgid ""
"This constraint allows you to use an :ref:`expression <component-expression-"
"language-examples>` for more complex, dynamic validation. See `Basic Usage`_"
" for an example. See :doc:`/reference/constraints/Callback` for a different "
"constraint that gives you similar flexibility."
msgstr ""

#: ../../reference/constraints/Expression.rst:10
msgid "Applies to"
msgstr ""

#: ../../reference/constraints/Expression.rst:10
msgid ""
":ref:`class <validation-class-target>` or :ref:`property/method <validation-"
"property-target>`"
msgstr ""

#: ../../reference/constraints/Expression.rst:12
msgid "Options"
msgstr ""

#: ../../reference/constraints/Expression.rst:12
msgid ":ref:`expression <reference-constraint-expression-option>`"
msgstr ""

#: ../../reference/constraints/Expression.rst:13
msgid "`message`_"
msgstr ""

#: ../../reference/constraints/Expression.rst:14
msgid "`payload`_"
msgstr ""

#: ../../reference/constraints/Expression.rst:16
msgid "Class"
msgstr ""

#: ../../reference/constraints/Expression.rst:16
msgid ":class:`Symfony\\\\Component\\\\Validator\\\\Constraints\\\\Expression`"
msgstr ""

#: ../../reference/constraints/Expression.rst:18
msgid "Validator"
msgstr ""

#: ../../reference/constraints/Expression.rst:18
msgid ":class:`Symfony\\\\Component\\\\Validator\\\\Constraints\\\\ExpressionValidator`"
msgstr ""

#: ../../reference/constraints/Expression.rst:22
msgid "Basic Usage"
msgstr ""

#: ../../reference/constraints/Expression.rst:24
msgid ""
"Imagine you have a class ``BlogPost`` with ``category`` and "
"``isTechnicalPost`` properties::"
msgstr ""

#: ../../reference/constraints/Expression.rst:52
msgid "To validate the object, you have some special requirements:"
msgstr ""

#: ../../reference/constraints/Expression.rst:54
msgid ""
"If ``isTechnicalPost`` is true, then ``category`` must be either ``php`` or "
"``symfony``;"
msgstr ""

#: ../../reference/constraints/Expression.rst:56
msgid "If ``isTechnicalPost`` is false, then ``category`` can be anything."
msgstr ""

#: ../../reference/constraints/Expression.rst:58
msgid "One way to accomplish this is with the Expression constraint:"
msgstr ""

#: ../../reference/constraints/Expression.rst:129
msgid ""
"The :ref:`expression <reference-constraint-expression-option>` option is the"
" expression that must return true in order for validation to pass. To learn "
"more about the expression language syntax, see "
":doc:`/components/expression_language/syntax`."
msgstr ""

#: ../../reference/constraints/Expression.rst:0
msgid "Mapping the Error to a Specific Field"
msgstr ""

#: ../../reference/constraints/Expression.rst:136
msgid ""
"You can also attach the constraint to a specific property and still validate"
" based on the values of the entire entity. This is handy if you want to "
"attach the error to a specific field. In this context, ``value`` represents "
"the value of ``isTechnicalPost``."
msgstr ""

#: ../../reference/constraints/Expression.rst:218
msgid ""
"In Symfony 2.6, the Expression constraint *is* executed if the value is "
"``null``. Before 2.6, if the value was ``null``, the expression was never "
"executed and the value was considered valid (unless you also had a "
"constraint like ``NotBlank`` on the property)."
msgstr ""

#: ../../reference/constraints/Expression.rst:224
msgid ""
"For more information about the expression and what variables are available "
"to you, see the :ref:`expression <reference-constraint-expression-option>` "
"option details below."
msgstr ""

#: ../../reference/constraints/Expression.rst:229
msgid "Available Options"
msgstr ""

#: ../../reference/constraints/Expression.rst:234
msgid "expression"
msgstr ""

#: ../../reference/constraints/Expression.rst:236
msgid ""
"**type**: ``string`` [:ref:`default option <validation-default-option>`]"
msgstr ""

#: ../../reference/constraints/Expression.rst:238
msgid ""
"The expression that will be evaluated. If the expression evaluates to a "
"false value (using ``==``, not ``===``), validation will fail."
msgstr ""

#: ../../reference/constraints/Expression.rst:241
msgid ""
"To learn more about the expression language syntax, see "
":doc:`/components/expression_language/syntax`."
msgstr ""

#: ../../reference/constraints/Expression.rst:244
msgid "Inside of the expression, you have access to up to 2 variables:"
msgstr ""

#: ../../reference/constraints/Expression.rst:246
msgid ""
"Depending on how you use the constraint, you have access to 1 or 2 variables"
" in your expression:"
msgstr ""

#: ../../reference/constraints/Expression.rst:249
msgid "``this``: The object being validated (e.g. an instance of BlogPost);"
msgstr ""

#: ../../reference/constraints/Expression.rst:250
msgid ""
"``value``: The value of the property being validated (only available when "
"the constraint is applied directly to a property);"
msgstr ""

#: ../../reference/constraints/Expression.rst:254
msgid "message"
msgstr ""

#: ../../reference/constraints/Expression.rst:256
msgid "**type**: ``string`` **default**: ``This value is not valid.``"
msgstr ""

#: ../../reference/constraints/Expression.rst:258
msgid "The default message supplied when the expression evaluates to false."
msgstr ""

#: ../../reference/constraints/_payload-option.rst.inc:2
msgid "payload"
msgstr ""

#: ../../reference/constraints/_payload-option.rst.inc:4
msgid "**type**: ``mixed`` **default**: ``null``"
msgstr ""

#: ../../reference/constraints/_payload-option.rst.inc:6
msgid "The ``payload`` option was introduced in Symfony 2.6."
msgstr ""

#: ../../reference/constraints/_payload-option.rst.inc:9
msgid ""
"This option can be used to attach arbitrary domain-specific data to a "
"constraint. The configured payload is not used by the Validator component, "
"but its processing is completely up to."
msgstr ""

#: ../../reference/constraints/_payload-option.rst.inc:13
msgid ""
"For example, you may want to used :doc:`several error levels "
"</cookbook/validation/severity>` to present failed constraint differently in"
" the front-end depending on the severity of the error."
msgstr ""
