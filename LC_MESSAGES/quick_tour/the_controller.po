# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../quick_tour/the_controller.rst:2
msgid "The Controller"
msgstr "控制器（Controller）"

#: ../../quick_tour/the_controller.rst:4
msgid ""
"Still here after the first two parts? You are already becoming a Symfony "
"fan! Without further ado, discover what controllers can do for you."
msgstr ""

#: ../../quick_tour/the_controller.rst:8
msgid "Returning Raw Responses"
msgstr ""

#: ../../quick_tour/the_controller.rst:10
msgid ""
"Symfony defines itself as a Request-Response framework. When the user makes "
"a request to your application, Symfony creates a ``Request`` object to "
"encapsulate all the information related to that request. Similarly, the "
"result of executing any action of any controller is the creation of a "
"``Response`` object which Symfony uses to generate the HTML content returned"
" to the user."
msgstr ""

#: ../../quick_tour/the_controller.rst:16
msgid ""
"So far, all the actions shown in this tutorial used the ``$this->render()`` "
"shortcut to return a rendered response as result. In case you need it, you "
"can also create a raw ``Response`` object to return any text content::"
msgstr ""

#: ../../quick_tour/the_controller.rst:39
msgid "Route Parameters"
msgstr ""

#: ../../quick_tour/the_controller.rst:41
msgid ""
"Most of the time, the URLs of applications include variable parts on them. "
"If you are creating for example a blog application, the URL to display the "
"articles should include their title or some other unique identifier to let "
"the application know the exact article to display."
msgstr ""

#: ../../quick_tour/the_controller.rst:46
msgid ""
"In Symfony applications, the variable parts of the routes are enclosed in "
"curly braces (e.g. ``/blog/read/{article_title}/``). Each variable part is "
"assigned a unique name that can be used later in the controller to retrieve "
"each value."
msgstr ""

#: ../../quick_tour/the_controller.rst:50
msgid ""
"Let's create a new action with route variables to show this feature in "
"action. Open the ``src/AppBundle/Controller/DefaultController.php`` file and"
" add a new method called ``helloAction`` with the following content::"
msgstr ""

#: ../../quick_tour/the_controller.rst:75
msgid ""
"Open your browser and access the ``http://localhost:8000/hello/fabien`` URL "
"to see the result of executing this new action. Instead of the action "
"result, you'll see an error page. As you probably guessed, the cause of this"
" error is that we're trying to render a template "
"(``default/hello.html.twig``) that doesn't exist yet."
msgstr ""

#: ../../quick_tour/the_controller.rst:80
msgid ""
"Create the new ``app/Resources/views/default/hello.html.twig`` template with"
" the following content:"
msgstr ""

#: ../../quick_tour/the_controller.rst:92
msgid ""
"Browse again the ``http://localhost:8000/hello/fabien`` URL and you'll see "
"this new template rendered with the information passed by the controller. If"
" you change the last part of the URL (e.g. "
"``http://localhost:8000/hello/thomas``) and reload your browser, the page "
"will display a different message. And if you remove the last part of the URL"
" (e.g. ``http://localhost:8000/hello``), Symfony will display an error "
"because the route expects a name and you haven't provided it."
msgstr ""

#: ../../quick_tour/the_controller.rst:100
msgid "Using Formats"
msgstr ""

#: ../../quick_tour/the_controller.rst:102
msgid ""
"Nowadays, a web application should be able to deliver more than just HTML "
"pages. From XML for RSS feeds or Web Services, to JSON for Ajax requests, "
"there are plenty of different formats to choose from. Supporting those "
"formats in Symfony is straightforward thanks to a special variable called "
"``_format`` which stores the format requested by the user."
msgstr ""

#: ../../quick_tour/the_controller.rst:108
msgid ""
"Tweak the ``hello`` route by adding a new ``_format`` variable with ``html``"
" as its default value::"
msgstr ""

#: ../../quick_tour/the_controller.rst:127
msgid ""
"Obviously, when you support several request formats, you have to provide a "
"template for each of the supported formats. In this case, you should create "
"a new ``hello.xml.twig`` template:"
msgstr ""

#: ../../quick_tour/the_controller.rst:138
msgid ""
"Now, when you browse to ``http://localhost:8000/hello/fabien``, you'll see "
"the regular HTML page because ``html`` is the default format. When visiting "
"``http://localhost:8000/hello/fabien.html`` you'll get again the HTML page, "
"this time because you explicitly asked for the ``html`` format. Lastly, if "
"you visit ``http://localhost:8000/hello/fabien.xml`` you'll see the new XML "
"template rendered in your browser."
msgstr ""

#: ../../quick_tour/the_controller.rst:145
msgid ""
"That's all there is to it. For standard formats, Symfony will also "
"automatically choose the best ``Content-Type`` header for the response. To "
"restrict the formats supported by a given action, use the ``requirements`` "
"option of the ``@Route()`` annotation::"
msgstr ""

#: ../../quick_tour/the_controller.rst:170
msgid ""
"The ``hello`` action will now match URLs like ``/hello/fabien.xml`` or "
"``/hello/fabien.json``, but it will show a 404 error if you try to get URLs "
"like ``/hello/fabien.js``, because the value of the ``_format`` variable "
"doesn't meet its requirements."
msgstr ""

#: ../../quick_tour/the_controller.rst:178
msgid "Redirecting"
msgstr ""

#: ../../quick_tour/the_controller.rst:180
msgid ""
"If you want to redirect the user to another page, use the "
"``redirectToRoute()`` method::"
msgstr ""

#: ../../quick_tour/the_controller.rst:195
msgid ""
"The ``redirectToRoute()`` method takes as arguments the route name and an "
"optional array of parameters and redirects the user to the URL generated "
"with those arguments."
msgstr ""

#: ../../quick_tour/the_controller.rst:199
msgid "Displaying Error Pages"
msgstr ""

#: ../../quick_tour/the_controller.rst:201
msgid ""
"Errors will inevitably happen during the execution of every web application."
" In the case of ``404`` errors, Symfony includes a handy shortcut that you "
"can use in your controllers::"
msgstr ""

#: ../../quick_tour/the_controller.rst:220
msgid ""
"For ``500`` errors, just throw a regular PHP exception inside the controller"
" and Symfony will transform it into a proper ``500`` error page::"
msgstr ""

#: ../../quick_tour/the_controller.rst:239
msgid "Getting Information from the Request"
msgstr ""

#: ../../quick_tour/the_controller.rst:241
msgid ""
"Sometimes your controllers need to access the information related to the "
"user request, such as their preferred language, IP address or the URL query "
"parameters. To get access to this information, add a new argument of type "
"``Request`` to the action. The name of this new argument doesn't matter, but"
" it must be preceded by the ``Request`` type in order to work (don't forget "
"to add the new ``use`` statement that imports this ``Request`` class)::"
msgstr ""

#: ../../quick_tour/the_controller.rst:276
msgid ""
"In a template, you can also access the ``Request`` object via the special "
"``app.request`` variable automatically provided by Symfony:"
msgstr ""

#: ../../quick_tour/the_controller.rst:286
msgid "Persisting Data in the Session"
msgstr ""

#: ../../quick_tour/the_controller.rst:288
msgid ""
"Even if the HTTP protocol is stateless, Symfony provides a nice session "
"object that represents the client (be it a real person using a browser, a "
"bot, or a web service). Between two requests, Symfony stores the attributes "
"in a cookie by using native PHP sessions."
msgstr ""

#: ../../quick_tour/the_controller.rst:293
msgid ""
"Storing and retrieving information from the session can be easily achieved "
"from any controller::"
msgstr ""

#: ../../quick_tour/the_controller.rst:312
msgid ""
"You can also store \"flash messages\" that will auto-delete after the next "
"request. They are useful when you need to set a success message before "
"redirecting the user to another page (which will then show the message)::"
msgstr ""

#: ../../quick_tour/the_controller.rst:324
msgid "And you can display the flash message in the template like this:"
msgstr ""

#: ../../quick_tour/the_controller.rst:333
msgid "Final Thoughts"
msgstr ""

#: ../../quick_tour/the_controller.rst:335
msgid ""
"That's all there is to it, and I'm not even sure you'll have spent the full "
"10 minutes. You were briefly introduced to bundles in the first part, and "
"all the features you've learned about so far are part of the core framework "
"bundle. But thanks to bundles, everything in Symfony can be extended or "
"replaced. That's the topic of the :doc:`next part of this tutorial "
"<the_architecture>`."
msgstr ""
