# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../quick_tour/the_architecture.rst:2
msgid "The Architecture"
msgstr "代码结构"

#: ../../quick_tour/the_architecture.rst:4
msgid ""
"You are my hero! Who would have thought that you would still be here after "
"the first three parts? Your efforts will be well rewarded soon. The first "
"three parts didn't look too deeply at the architecture of the framework. "
"Because it makes Symfony stand apart from the framework crowd, let's dive "
"into the architecture now."
msgstr ""

#: ../../quick_tour/the_architecture.rst:11
msgid "Understanding the Directory Structure"
msgstr ""

#: ../../quick_tour/the_architecture.rst:13
msgid ""
"The directory structure of a Symfony :term:`application` is rather flexible,"
" but the recommended structure is as follows:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:16
msgid "``app/``"
msgstr ""

#: ../../quick_tour/the_architecture.rst:17
msgid "The application configuration, templates and translations."
msgstr ""

#: ../../quick_tour/the_architecture.rst:18
msgid "``src/``"
msgstr ""

#: ../../quick_tour/the_architecture.rst:19
msgid "The project's PHP code."
msgstr ""

#: ../../quick_tour/the_architecture.rst:20
msgid "``vendor/``"
msgstr ""

#: ../../quick_tour/the_architecture.rst:21
msgid "The third-party dependencies."
msgstr ""

#: ../../quick_tour/the_architecture.rst:23
msgid "``web/``"
msgstr ""

#: ../../quick_tour/the_architecture.rst:23
msgid "The web root directory."
msgstr ""

#: ../../quick_tour/the_architecture.rst:26
msgid "The ``web/`` Directory"
msgstr ""

#: ../../quick_tour/the_architecture.rst:28
msgid ""
"The web root directory is the home of all public and static files like "
"images, stylesheets, and JavaScript files. It is also where each "
":term:`front controller` lives, such as the production controller shown "
"here::"
msgstr ""

#: ../../quick_tour/the_architecture.rst:44
msgid ""
"The controller first bootstraps the application using a kernel class "
"(``AppKernel`` in this case). Then, it creates the ``Request`` object using "
"the PHP's global variables and passes it to the kernel. The last step is to "
"send the response contents returned by the kernel back to the user."
msgstr ""

#: ../../quick_tour/the_architecture.rst:52
msgid "The ``app/`` Directory"
msgstr ""

#: ../../quick_tour/the_architecture.rst:54
msgid ""
"The ``AppKernel`` class is the main entry point of the application "
"configuration and as such, it is stored in the ``app/`` directory."
msgstr ""

#: ../../quick_tour/the_architecture.rst:57
msgid "This class must implement two methods:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:60
msgid "``registerBundles()``"
msgstr ""

#: ../../quick_tour/the_architecture.rst:60
msgid ""
"Must return an array of all bundles needed to run the application, as "
"explained in the next section."
msgstr ""

#: ../../quick_tour/the_architecture.rst:63
msgid "``registerContainerConfiguration()``"
msgstr ""

#: ../../quick_tour/the_architecture.rst:63
msgid "Loads the application configuration (more on this later)."
msgstr ""

#: ../../quick_tour/the_architecture.rst:65
msgid ""
"Autoloading is handled automatically via `Composer`_, which means that you "
"can use any PHP class without doing anything at all! All dependencies are "
"stored under the ``vendor/`` directory, but this is just a convention. You "
"can store them wherever you want, globally on your server or locally in your"
" projects."
msgstr ""

#: ../../quick_tour/the_architecture.rst:72
msgid "Understanding the Bundle System"
msgstr ""

#: ../../quick_tour/the_architecture.rst:74
msgid ""
"This section introduces one of the greatest and most powerful features of "
"Symfony, the :term:`bundle` system."
msgstr ""

#: ../../quick_tour/the_architecture.rst:77
msgid ""
"A bundle is kind of like a plugin in other software. So why is it called a "
"*bundle* and not a *plugin*? This is because *everything* is a bundle in "
"Symfony, from the core framework features to the code you write for your "
"application."
msgstr ""

#: ../../quick_tour/the_architecture.rst:82
msgid ""
"All the code you write for your application is organized in bundles. In "
"Symfony speak, a bundle is a structured set of files (PHP files, "
"stylesheets, JavaScripts, images, ...) that implements a single feature (a "
"blog, a forum, ...) and which can be easily shared with other developers."
msgstr ""

#: ../../quick_tour/the_architecture.rst:87
msgid ""
"Bundles are first-class citizens in Symfony. This gives you the flexibility "
"to use pre-built features packaged in third-party bundles or to distribute "
"your own bundles. It makes it easy to pick and choose which features to "
"enable in your application and optimize them the way you want. And at the "
"end of the day, your application code is just as *important* as the core "
"framework itself."
msgstr ""

#: ../../quick_tour/the_architecture.rst:93
msgid ""
"Symfony already includes an AppBundle that you may use to start developing "
"your application. Then, if you need to split the application into reusable "
"components, you can create your own bundles."
msgstr ""

#: ../../quick_tour/the_architecture.rst:98
msgid "Registering a Bundle"
msgstr ""

#: ../../quick_tour/the_architecture.rst:100
msgid ""
"An application is made up of bundles as defined in the ``registerBundles()``"
" method of the ``AppKernel`` class. Each bundle is a directory that contains"
" a single Bundle class that describes it::"
msgstr ""

#: ../../quick_tour/the_architecture.rst:128
msgid ""
"In addition to the AppBundle that was already talked about, notice that the "
"kernel also enables other bundles that are part of Symfony, such as "
"FrameworkBundle, DoctrineBundle, SwiftmailerBundle and AsseticBundle."
msgstr ""

#: ../../quick_tour/the_architecture.rst:133
msgid "Configuring a Bundle"
msgstr ""

#: ../../quick_tour/the_architecture.rst:135
msgid ""
"Each bundle can be customized via configuration files written in YAML, XML, "
"or PHP. Have a look at this sample of the default Symfony configuration:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:176
msgid ""
"Each first level entry like ``framework``, ``twig`` and ``swiftmailer`` "
"defines the configuration for a specific bundle. For example, ``framework`` "
"configures the FrameworkBundle while ``swiftmailer`` configures the "
"SwiftmailerBundle."
msgstr ""

#: ../../quick_tour/the_architecture.rst:180
msgid ""
"Each :term:`environment` can override the default configuration by providing"
" a specific configuration file. For example, the ``dev`` environment loads "
"the ``config_dev.yml`` file, which loads the main configuration (i.e. "
"``config.yml``) and then modifies it to add some debugging tools:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:202
msgid "Extending a Bundle"
msgstr ""

#: ../../quick_tour/the_architecture.rst:204
msgid ""
"In addition to being a nice way to organize and configure your code, a "
"bundle can extend another bundle. Bundle inheritance allows you to override "
"any existing bundle in order to customize its controllers, templates, or any"
" of its files."
msgstr ""

#: ../../quick_tour/the_architecture.rst:209
msgid "Logical File Names"
msgstr ""

#: ../../quick_tour/the_architecture.rst:211
msgid ""
"When you want to reference a file from a bundle, use this notation: "
"``@BUNDLE_NAME/path/to/file``; Symfony will resolve ``@BUNDLE_NAME`` to the "
"real path to the bundle. For instance, the logical path "
"``@AppBundle/Controller/DefaultController.php`` would be converted to "
"``src/AppBundle/Controller/DefaultController.php``, because Symfony knows "
"the location of the AppBundle."
msgstr ""

#: ../../quick_tour/the_architecture.rst:219
msgid "Logical Controller Names"
msgstr ""

#: ../../quick_tour/the_architecture.rst:221
msgid ""
"For controllers, you need to reference actions using the format "
"``BUNDLE_NAME:CONTROLLER_NAME:ACTION_NAME``. For instance, "
"``AppBundle:Default:index`` maps to the ``indexAction`` method from the "
"``AppBundle\\Controller\\DefaultController`` class."
msgstr ""

#: ../../quick_tour/the_architecture.rst:227
msgid "Extending Bundles"
msgstr ""

#: ../../quick_tour/the_architecture.rst:229
msgid ""
"If you follow these conventions, then you can use :doc:`bundle inheritance "
"</cookbook/bundles/inheritance>` to override files, controllers or "
"templates. For example, you can create a bundle - NewBundle - and specify "
"that it overrides AppBundle. When Symfony loads the "
"``AppBundle:Default:index`` controller, it will first look for the "
"``DefaultController`` class in NewBundle and, if it doesn't exist, then look"
" inside AppBundle. This means that one bundle can override almost any part "
"of another bundle!"
msgstr ""

#: ../../quick_tour/the_architecture.rst:237
msgid ""
"Do you understand now why Symfony is so flexible? Share your bundles between"
" applications, store them locally or globally, your choice."
msgstr ""

#: ../../quick_tour/the_architecture.rst:243
msgid "Using Vendors"
msgstr ""

#: ../../quick_tour/the_architecture.rst:245
msgid ""
"Odds are that your application will depend on third-party libraries. Those "
"should be stored in the ``vendor/`` directory. You should never touch "
"anything in this directory, because it is exclusively managed by Composer. "
"This directory already contains the Symfony libraries, the SwiftMailer "
"library, the Doctrine ORM, the Twig templating system and some other third "
"party libraries and bundles."
msgstr ""

#: ../../quick_tour/the_architecture.rst:252
msgid "Understanding the Cache and Logs"
msgstr ""

#: ../../quick_tour/the_architecture.rst:254
msgid ""
"Symfony applications can contain several configuration files defined in "
"several formats (YAML, XML, PHP, etc.) Instead of parsing and combining all "
"those files for each request, Symfony uses its own cache system. In fact, "
"the application configuration is only parsed for the very first request and "
"then compiled down to plain PHP code stored in the ``app/cache/`` directory."
msgstr ""

#: ../../quick_tour/the_architecture.rst:260
msgid ""
"In the development environment, Symfony is smart enough to update the cache "
"when you change a file. But in the production environment, to speed things "
"up, it is your responsibility to clear the cache when you update your code "
"or change its configuration. Execute this command to clear the cache in the "
"``prod`` environment:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:269
msgid ""
"When developing a web application, things can go wrong in many ways. The log"
" files in the ``app/logs/`` directory tell you everything about the requests"
" and help you fix the problem quickly."
msgstr ""

#: ../../quick_tour/the_architecture.rst:274
msgid "Using the Command Line Interface"
msgstr ""

#: ../../quick_tour/the_architecture.rst:276
msgid ""
"Each application comes with a command line interface tool (``app/console``) "
"that helps you maintain your application. It provides commands that boost "
"your productivity by automating tedious and repetitive tasks."
msgstr ""

#: ../../quick_tour/the_architecture.rst:280
msgid "Run it without any arguments to learn more about its capabilities:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:286
msgid "The ``--help`` option helps you discover the usage of a command:"
msgstr ""

#: ../../quick_tour/the_architecture.rst:293
msgid "Final Thoughts"
msgstr ""

#: ../../quick_tour/the_architecture.rst:295
msgid ""
"Call me crazy, but after reading this part, you should be comfortable with "
"moving things around and making Symfony work for you. Everything in Symfony "
"is designed to get out of your way. So, feel free to rename and move "
"directories around as you see fit."
msgstr ""

#: ../../quick_tour/the_architecture.rst:300
msgid ""
"And that's all for the quick tour. From testing to sending emails, you still"
" need to learn a lot to become a Symfony master. Ready to dig into these "
"topics now? Look no further - go to the official :doc:`/book/index` and pick"
" any topic you want."
msgstr ""
