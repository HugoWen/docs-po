# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../book/from_flat_php_to_symfony2.rst:4
msgid "Symfony versus Flat PHP"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:6
msgid ""
"**Why is Symfony better than just opening up a file and writing flat PHP?**"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:8
msgid ""
"If you've never used a PHP framework, aren't familiar with the MVC "
"philosophy, or just wonder what all the *hype* is around Symfony, this "
"chapter is for you. Instead of *telling* you that Symfony allows you to "
"develop faster and better software than with flat PHP, you'll see for "
"yourself."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:13
msgid ""
"In this chapter, you'll write a simple application in flat PHP, and then "
"refactor it to be more organized. You'll travel through time, seeing the "
"decisions behind why web development has evolved over the past several years"
" to where it is now."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:18
msgid ""
"By the end, you'll see how Symfony can rescue you from mundane tasks and let"
" you take back control of your code."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:22
msgid "A Simple Blog in Flat PHP"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:24
msgid ""
"In this chapter, you'll build the token blog application using only flat "
"PHP. To begin, create a single page that displays blog entries that have "
"been persisted to the database. Writing in flat PHP is quick and dirty:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:61
msgid ""
"That's quick to write, fast to execute, and, as your app grows, impossible "
"to maintain. There are several problems that need to be addressed:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:64
msgid "**No error-checking**: What if the connection to the database fails?"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:66
msgid ""
"**Poor organization**: If the application grows, this single file will "
"become increasingly unmaintainable. Where should you put code to handle a "
"form submission? How can you validate data? Where should code go for sending"
" emails?"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:71
msgid ""
"**Difficult to reuse code**: Since everything is in one file, there's no way"
" to reuse any part of the application for other \"pages\" of the blog."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:76
msgid ""
"Another problem not mentioned here is the fact that the database is tied to "
"MySQL. Though not covered here, Symfony fully integrates `Doctrine`_, a "
"library dedicated to database abstraction and mapping."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:81
msgid "Isolating the Presentation"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:83
msgid ""
"The code can immediately gain from separating the application \"logic\" from"
" the code that prepares the HTML \"presentation\":"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:105
msgid ""
"The HTML code is now stored in a separate file (``templates/list.php``), "
"which is primarily an HTML file that uses a template-like PHP syntax:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:129
msgid ""
"By convention, the file that contains all the application logic - "
"``index.php`` - is known as a \"controller\". The term :term:`controller` is"
" a word you'll hear a lot, regardless of the language or framework you use. "
"It refers simply to the area of *your* code that processes user input and "
"prepares the response."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:134
msgid ""
"In this case, the controller prepares data from the database and then "
"includes a template to present that data. With the controller isolated, you "
"could easily change *just* the template file if you needed to render the "
"blog entries in some other format (e.g. ``list.json.php`` for JSON format)."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:140
msgid "Isolating the Application (Domain) Logic"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:142
msgid ""
"So far the application contains only one page. But what if a second page "
"needed to use the same database connection, or even the same array of blog "
"posts? Refactor the code so that the core behavior and data-access functions"
" of the application are isolated in a new file called ``model.php``:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:180
msgid ""
"The filename ``model.php`` is used because the logic and data access of an "
"application is traditionally known as the \"model\" layer. In a well-"
"organized application, the majority of the code representing your \"business"
" logic\" should live in the model (as opposed to living in a controller). "
"And unlike in this example, only a portion (or none) of the model is "
"actually concerned with accessing a database."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:187
msgid "The controller (``index.php``) is now very simple:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:198
msgid ""
"Now, the sole task of the controller is to get data from the model layer of "
"the application (the model) and to call a template to render that data. This"
" is a very simple example of the model-view-controller pattern."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:203
msgid "Isolating the Layout"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:205
msgid ""
"At this point, the application has been refactored into three distinct "
"pieces offering various advantages and the opportunity to reuse almost "
"everything on different pages."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:209
msgid ""
"The only part of the code that *can't* be reused is the page layout. Fix "
"that by creating a new ``layout.php`` file:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:225
msgid ""
"The template (``templates/list.php``) can now be simplified to \"extend\" "
"the layout:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:247
msgid ""
"You now have a setup that will allow you to reuse the layout. Unfortunately,"
" to accomplish this, you're forced to use a few ugly PHP functions "
"(``ob_start()``, ``ob_get_clean()``) in the template. Symfony uses a "
"Templating component that allows this to be accomplished cleanly and easily."
" You'll see it in action shortly."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:254
msgid "Adding a Blog \"show\" Page"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:256
msgid ""
"The blog \"list\" page has now been refactored so that the code is better-"
"organized and reusable. To prove it, add a blog \"show\" page, which "
"displays an individual blog post identified by an ``id`` query parameter."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:260
msgid ""
"To begin, create a new function in the ``model.php`` file that retrieves an "
"individual blog result based on a given id::"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:278
msgid ""
"Next, create a new file called ``show.php`` - the controller for this new "
"page:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:290
msgid ""
"Finally, create the new template file - ``templates/show.php`` - to render "
"the individual blog post:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:308
msgid ""
"Creating the second page is now very easy and no code is duplicated. Still, "
"this page introduces even more lingering problems that a framework can solve"
" for you. For example, a missing or invalid ``id`` query parameter will "
"cause the page to crash. It would be better if this caused a 404 page to be "
"rendered, but this can't really be done easily yet. Worse, had you forgotten"
" to clean the ``id`` parameter via the ``intval()`` function, your entire "
"database would be at risk for an SQL injection attack."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:316
msgid ""
"Another major problem is that each individual controller file must include "
"the ``model.php`` file. What if each controller file suddenly needed to "
"include an additional file or perform some other global task (e.g. enforce "
"security)? As it stands now, that code would need to be added to every "
"controller file. If you forget to include something in one file, hopefully "
"it doesn't relate to security..."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:324
msgid "A \"Front Controller\" to the Rescue"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:326
msgid ""
"The solution is to use a :term:`front controller`: a single PHP file through"
" which *all* requests are processed. With a front controller, the URIs for "
"the application change slightly, but start to become more flexible:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:341
msgid ""
"The ``index.php`` portion of the URI can be removed if using Apache rewrite "
"rules (or equivalent). In that case, the resulting URI of the blog show page"
" would be simply ``/show``."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:345
msgid ""
"When using a front controller, a single PHP file (``index.php`` in this "
"case) renders *every* request. For the blog post show page, "
"``/index.php/show`` will actually execute the ``index.php`` file, which is "
"now responsible for routing requests internally based on the full URI. As "
"you'll see, a front controller is a very powerful tool."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:352
msgid "Creating the Front Controller"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:354
msgid ""
"You're about to take a **big** step with the application. With one file "
"handling all requests, you can centralize things such as security handling, "
"configuration loading, and routing. In this application, ``index.php`` must "
"now be smart enough to render the blog post list page *or* the blog post "
"show page based on the requested URI:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:380
msgid ""
"For organization, both controllers (formerly ``index.php`` and ``show.php``)"
" are now PHP functions and each has been moved into a separate file, "
"``controllers.php``:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:397
msgid ""
"As a front controller, ``index.php`` has taken on an entirely new role, one "
"that includes loading the core libraries and routing the application so that"
" one of the two controllers (the ``list_action()`` and ``show_action()`` "
"functions) is called. In reality, the front controller is beginning to look "
"and act a lot like Symfony's mechanism for handling and routing requests."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:405
msgid ""
"Another advantage of a front controller is flexible URLs. Notice that the "
"URL to the blog post show page could be changed from ``/show`` to ``/read`` "
"by changing code in only one location. Before, an entire file needed to be "
"renamed. In Symfony, URLs are even more flexible."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:410
msgid ""
"By now, the application has evolved from a single PHP file into a structure "
"that is organized and allows for code reuse. You should be happier, but far "
"from satisfied. For example, the \"routing\" system is fickle, and wouldn't "
"recognize that the list page (``/index.php``) should be accessible also via "
"``/`` (if Apache rewrite rules were added). Also, instead of developing the "
"blog, a lot of time is being spent working on the \"architecture\" of the "
"code (e.g. routing, calling controllers, templates, etc.). More time will "
"need to be spent to handle form submissions, input validation, logging and "
"security. Why should you have to reinvent solutions to all these routine "
"problems?"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:423
msgid "Add a Touch of Symfony"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:425
msgid ""
"Symfony to the rescue. Before actually using Symfony, you need to download "
"it. This can be done by using Composer, which takes care of downloading the "
"correct version and all its dependencies and provides an autoloader. An "
"autoloader is a tool that makes it possible to start using PHP classes "
"without explicitly including the file containing the class."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:431
msgid ""
"In your root directory, create a ``composer.json`` file with the following "
"content:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:445
msgid ""
"Next, `download Composer`_ and then run the following command, which will "
"download Symfony into a vendor/ directory:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:452
msgid ""
"Beside downloading your dependencies, Composer generates a "
"``vendor/autoload.php`` file, which takes care of autoloading for all the "
"files in the Symfony Framework as well as the files mentioned in the "
"autoload section of your ``composer.json``."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:456
msgid ""
"Core to Symfony's philosophy is the idea that an application's main job is "
"to interpret each request and return a response. To this end, Symfony "
"provides both a :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` "
"and a :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` class. "
"These classes are object-oriented representations of the raw HTTP request "
"being processed and the HTTP response being returned. Use them to improve "
"the blog:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:487
msgid ""
"The controllers are now responsible for returning a ``Response`` object. To "
"make this easier, you can add a new ``render_template()`` function, which, "
"incidentally, acts quite a bit like the Symfony templating engine:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:523
msgid ""
"By bringing in a small part of Symfony, the application is more flexible and"
" reliable. The ``Request`` provides a dependable way to access information "
"about the HTTP request. Specifically, the ``getPathInfo()`` method returns a"
" cleaned URI (always returning ``/show`` and never ``/index.php/show``). So,"
" even if the user goes to ``/index.php/show``, the application is "
"intelligent enough to route the request through ``show_action()``."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:530
msgid ""
"The ``Response`` object gives flexibility when constructing the HTTP "
"response, allowing HTTP headers and content to be added via an object-"
"oriented interface. And while the responses in this application are simple, "
"this flexibility will pay dividends as your application grows."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:538
msgid "The Sample Application in Symfony"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:540
msgid ""
"The blog has come a *long* way, but it still contains a lot of code for such"
" a simple application. Along the way, you've made a simple routing system "
"and a method using ``ob_start()`` and ``ob_get_clean()`` to render "
"templates. If, for some reason, you needed to continue building this "
"\"framework\" from scratch, you could at least use Symfony's standalone "
"`Routing`_ and `Templating`_ components, which already solve these problems."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:547
msgid ""
"Instead of re-solving common problems, you can let Symfony take care of them"
" for you. Here's the same sample application, now built in Symfony::"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:583
msgid ""
"The two controllers are still lightweight. Each uses the :doc:`Doctrine ORM "
"library </book/doctrine>` to retrieve objects from the database and the "
"Templating component to render a template and return a ``Response`` object. "
"The list template is now quite a bit simpler:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:609
msgid "The layout is nearly identical:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:629
msgid ""
"The show template is left as an exercise, as it should be trivial to create "
"based on the list template."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:632
msgid ""
"When Symfony's engine (called the ``Kernel``) boots up, it needs a map so "
"that it knows which controllers to execute based on the request information."
" A routing configuration map provides this information in a readable format:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:647
msgid ""
"Now that Symfony is handling all the mundane tasks, the front controller is "
"dead simple. And since it does so little, you'll never have to touch it once"
" it's created (and if you use a `Symfony distribution`_, you won't even need"
" to create it!)::"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:661
msgid ""
"The front controller's only job is to initialize Symfony's engine "
"(``Kernel``) and pass it a ``Request`` object to handle. Symfony's core then"
" uses the routing map to determine which controller to call. Just like "
"before, the controller method is responsible for returning the final "
"``Response`` object. There's really not much else to it."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:667
msgid ""
"For a visual representation of how Symfony handles each request, see the "
":ref:`request flow diagram <request-flow-figure>`."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:673
msgid "Where Symfony Delivers"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:675
msgid ""
"In the upcoming chapters, you'll learn more about how each piece of Symfony "
"works and the recommended organization of a project. For now, have a look at"
" how migrating the blog from flat PHP to Symfony has improved life:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:679
msgid ""
"Your application now has **clear and consistently organized code** (though "
"Symfony doesn't force you into this). This promotes **reusability** and "
"allows for new developers to be productive in your project more quickly;"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:683
msgid ""
"100% of the code you write is for *your* application. You **don't need to "
"develop or maintain low-level utilities** such as :ref:`autoloading "
"<autoloading-introduction-sidebar>`, :doc:`routing </book/routing>`, or "
"rendering :doc:`controllers </book/controller>`;"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:687
msgid ""
"Symfony gives you **access to open source tools** such as Doctrine and the "
"Templating, Security, Form, Validation and Translation components (to name a"
" few);"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:691
msgid ""
"The application now enjoys **fully-flexible URLs** thanks to the Routing "
"component;"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:694
msgid ""
"Symfony's HTTP-centric architecture gives you access to powerful tools such "
"as **HTTP caching** powered by **Symfony's internal HTTP cache** or more "
"powerful tools such as `Varnish`_. This is covered in a later chapter all "
"about :doc:`caching </book/http_cache>`."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:699
msgid ""
"And perhaps best of all, by using Symfony, you now have access to a whole "
"set of **high-quality open source tools developed by the Symfony "
"community**! A good selection of Symfony community tools can be found on "
"`KnpBundles.com`_."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:704
msgid "Better Templates"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:706
msgid ""
"If you choose to use it, Symfony comes standard with a templating engine "
"called `Twig`_ that makes templates faster to write and easier to read. It "
"means that the sample application could contain even less code! Take, for "
"example, the list template written in Twig:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:731
msgid ""
"The corresponding ``layout.html.twig`` template is also easier to write:"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:746
msgid ""
"Twig is well-supported in Symfony. And while PHP templates will always be "
"supported in Symfony, the many advantages of Twig will continue to be "
"discussed. For more information, see the :doc:`templating chapter "
"</book/templating>`."
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:751
msgid "Learn more from the Cookbook"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:753
msgid ":doc:`/cookbook/templating/PHP`"
msgstr ""

#: ../../book/from_flat_php_to_symfony2.rst:754
msgid ":doc:`/cookbook/controller/service`"
msgstr ""
