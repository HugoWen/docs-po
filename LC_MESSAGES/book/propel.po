# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../book/propel.rst:5
msgid "Databases and Propel"
msgstr "数据库和Propel"

#: ../../book/propel.rst:7
msgid ""
"One of the most common and challenging tasks for any application involves "
"persisting and reading information to and from a database. Symfony does not "
"come integrated with any ORMs but the Propel integration is easy. To install"
" Propel, read `Working With Symfony2`_ on the Propel documentation."
msgstr ""

#: ../../book/propel.rst:13
msgid "A Simple Example: A Product"
msgstr ""

#: ../../book/propel.rst:15
msgid ""
"In this section, you'll configure your database, create a ``Product`` "
"object, persist it to the database and fetch it back out."
msgstr ""

#: ../../book/propel.rst:19
msgid "Configuring the Database"
msgstr ""

#: ../../book/propel.rst:21
msgid ""
"Before you can start, you'll need to configure your database connection "
"information. By convention, this information is usually configured in an "
"``app/config/parameters.yml`` file:"
msgstr ""

#: ../../book/propel.rst:36
msgid ""
"These parameters defined in ``parameters.yml`` can now be included in the "
"configuration file (``config.yml``):"
msgstr ""

#: ../../book/propel.rst:50
msgid ""
"Defining the configuration via ``parameters.yml`` is a :ref:`Symfony "
"Framework Best Practice <best-practices-canonical-parameters>`, feel free to"
" do it differently if that suits your application better."
msgstr ""

#: ../../book/propel.rst:54
msgid ""
"Now that Propel knows about your database, it can create the database for "
"you:"
msgstr ""

#: ../../book/propel.rst:63
msgid ""
"In this example, you have one configured connection, named ``default``. If "
"you want to configure more than one connection, read the `PropelBundle "
"configuration section`_."
msgstr ""

#: ../../book/propel.rst:68
msgid "Creating a Model Class"
msgstr ""

#: ../../book/propel.rst:70
msgid ""
"In the Propel world, ActiveRecord classes are known as **models** because "
"classes generated by Propel contain some business logic."
msgstr ""

#: ../../book/propel.rst:75
msgid ""
"For people who use Symfony with Doctrine2, **models** are equivalent to "
"**entities**."
msgstr ""

#: ../../book/propel.rst:78
msgid ""
"Suppose you're building an application where products need to be displayed. "
"First, create a ``schema.xml`` file inside the ``Resources/config`` "
"directory of your AppBundle:"
msgstr ""

#: ../../book/propel.rst:115
msgid "Building the Model"
msgstr ""

#: ../../book/propel.rst:117
msgid ""
"After creating your ``schema.xml``, generate your model from it by running:"
msgstr ""

#: ../../book/propel.rst:123
msgid ""
"This generates each model class to quickly develop your application in the "
"``Model/`` directory of the AppBundle bundle."
msgstr ""

#: ../../book/propel.rst:127
msgid "Creating the Database Tables/Schema"
msgstr ""

#: ../../book/propel.rst:129
msgid ""
"Now you have a usable ``Product`` class and all you need to persist it. Of "
"course, you don't yet have the corresponding ``product`` table in your "
"database. Fortunately, Propel can automatically create all the database "
"tables needed for every known model in your application. To do this, run:"
msgstr ""

#: ../../book/propel.rst:139
msgid ""
"Your database now has a fully-functional ``product`` table with columns that"
" match the schema you've specified."
msgstr ""

#: ../../book/propel.rst:144
msgid ""
"You can run the last three commands combined by using the following command:"
msgstr ""

#: ../../book/propel.rst:152
msgid "Persisting Objects to the Database"
msgstr ""

#: ../../book/propel.rst:154
msgid ""
"Now that you have a ``Product`` object and corresponding ``product`` table, "
"you're ready to persist data to the database. From inside a controller, this"
" is pretty easy. Add the following method to the ``ProductController`` of "
"the bundle::"
msgstr ""

#: ../../book/propel.rst:180
msgid ""
"In this piece of code, you instantiate and work with the ``$product`` "
"object. When you call the ``save()`` method on it, you persist it to the "
"database. No need to use other services, the object knows how to persist "
"itself."
msgstr ""

#: ../../book/propel.rst:186
msgid ""
"If you're following along with this example, you'll need to create a "
":doc:`route <routing>` that points to this action to see it in action."
msgstr ""

#: ../../book/propel.rst:190
msgid "Fetching Objects from the Database"
msgstr ""

#: ../../book/propel.rst:192
msgid ""
"Fetching an object back from the database is even easier. For example, "
"suppose you've configured a route to display a specific ``Product`` based on"
" its ``id`` value::"
msgstr ""

#: ../../book/propel.rst:220
msgid "Updating an Object"
msgstr ""

#: ../../book/propel.rst:222
msgid ""
"Once you've fetched an object from Propel, updating it is easy. Suppose you "
"have a route that maps a product id to an update action in a controller::"
msgstr ""

#: ../../book/propel.rst:251
msgid "Updating an object involves just three steps:"
msgstr ""

#: ../../book/propel.rst:253
msgid "fetching the object from Propel (line 12 - 18);"
msgstr ""

#: ../../book/propel.rst:254
msgid "modifying the object (line 20);"
msgstr ""

#: ../../book/propel.rst:255
msgid "saving it (line 21)."
msgstr ""

#: ../../book/propel.rst:258
msgid "Deleting an Object"
msgstr ""

#: ../../book/propel.rst:260
msgid ""
"Deleting an object is very similar to updating, but requires a call to the "
"``delete()`` method on the object::"
msgstr ""

#: ../../book/propel.rst:266
msgid "Querying for Objects"
msgstr ""

#: ../../book/propel.rst:268
msgid ""
"Propel provides generated ``Query`` classes to run both basic and complex "
"queries without any work::"
msgstr ""

#: ../../book/propel.rst:280
msgid ""
"Imagine that you want to query for products which cost more than 19.99, "
"ordered from cheapest to most expensive. From inside a controller, do the "
"following::"
msgstr ""

#: ../../book/propel.rst:291
msgid ""
"In one line, you get your products in a powerful oriented object way. No "
"need to waste your time with SQL or whatever, Symfony offers fully object "
"oriented programming and Propel respects the same philosophy by providing an"
" awesome abstraction layer."
msgstr ""

#: ../../book/propel.rst:296
msgid ""
"If you want to reuse some queries, you can add your own methods to the "
"``ProductQuery`` class::"
msgstr ""

#: ../../book/propel.rst:312
msgid ""
"However, note that Propel generates a lot of methods for you and a simple "
"``findAllOrderedByName()`` can be written without any effort::"
msgstr ""

#: ../../book/propel.rst:323
msgid "Relationships/Associations"
msgstr ""

#: ../../book/propel.rst:325
msgid ""
"Suppose that the products in your application all belong to exactly one "
"\"category\". In this case, you'll need a ``Category`` object and a way to "
"relate a ``Product`` object to a ``Category`` object."
msgstr ""

#: ../../book/propel.rst:329
msgid "Start by adding the ``category`` definition in your ``schema.xml``:"
msgstr ""

#: ../../book/propel.rst:386
msgid "Create the classes:"
msgstr ""

#: ../../book/propel.rst:392
msgid ""
"Assuming you have products in your database, you don't want to lose them. "
"Thanks to migrations, Propel will be able to update your database without "
"losing existing data."
msgstr ""

#: ../../book/propel.rst:401
msgid ""
"Your database has been updated, you can continue writing your application."
msgstr ""

#: ../../book/propel.rst:404
msgid "Saving Related Objects"
msgstr ""

#: ../../book/propel.rst:406
msgid "Now, try the code in action. Imagine you're inside a controller::"
msgstr ""

#: ../../book/propel.rst:437
msgid ""
"Now, a single row is added to both the ``category`` and ``product`` tables. "
"The ``product.category_id`` column for the new product is set to whatever "
"the id is of the new category. Propel manages the persistence of this "
"relationship for you."
msgstr ""

#: ../../book/propel.rst:443
msgid "Fetching Related Objects"
msgstr ""

#: ../../book/propel.rst:445
msgid ""
"When you need to fetch associated objects, your workflow looks just like it "
"did before: Fetch a ``$product`` object and then access its related "
"``Category``::"
msgstr ""

#: ../../book/propel.rst:467
msgid "Note, in the above example, only one query was made."
msgstr ""

#: ../../book/propel.rst:470
msgid "More Information on Associations"
msgstr ""

#: ../../book/propel.rst:472
msgid ""
"You will find more information on relations by reading the dedicated chapter"
" on `Relationships`_."
msgstr ""

#: ../../book/propel.rst:476
msgid "Lifecycle Callbacks"
msgstr ""

#: ../../book/propel.rst:478
msgid ""
"Sometimes, you need to perform an action right before or after an object is "
"inserted, updated, or deleted. These types of actions are known as "
"\"lifecycle\" callbacks or \"hooks\", as they're callback methods that you "
"need to execute during different stages of the lifecycle of an object (e.g. "
"the object is inserted, updated, deleted, etc)."
msgstr ""

#: ../../book/propel.rst:484
msgid "To add a hook, just add a new method to the object class::"
msgstr ""

#: ../../book/propel.rst:497
msgid "Propel provides the following hooks:"
msgstr ""

#: ../../book/propel.rst:499
msgid "``preInsert()``"
msgstr ""

#: ../../book/propel.rst:500
msgid "Code executed before insertion of a new object."
msgstr ""

#: ../../book/propel.rst:501
msgid "``postInsert()``"
msgstr ""

#: ../../book/propel.rst:502
msgid "Code executed after insertion of a new object."
msgstr ""

#: ../../book/propel.rst:503
msgid "``preUpdate()``"
msgstr ""

#: ../../book/propel.rst:504
msgid "Code executed before update of an existing object."
msgstr ""

#: ../../book/propel.rst:505
msgid "``postUpdate()``"
msgstr ""

#: ../../book/propel.rst:506
msgid "Code executed after update of an existing object."
msgstr ""

#: ../../book/propel.rst:507
msgid "``preSave()``"
msgstr ""

#: ../../book/propel.rst:508
msgid "Code executed before saving an object (new or existing)."
msgstr ""

#: ../../book/propel.rst:509
msgid "``postSave()``"
msgstr ""

#: ../../book/propel.rst:510
msgid "Code executed after saving an object (new or existing)."
msgstr ""

#: ../../book/propel.rst:511
msgid "``preDelete()``"
msgstr ""

#: ../../book/propel.rst:512
msgid "Code executed before deleting an object."
msgstr ""

#: ../../book/propel.rst:514
msgid "``postDelete()``"
msgstr ""

#: ../../book/propel.rst:514
msgid "Code executed after deleting an object."
msgstr ""

#: ../../book/propel.rst:517
msgid "Behaviors"
msgstr ""

#: ../../book/propel.rst:519
msgid ""
"All bundled behaviors in Propel are working with Symfony. To get more "
"information about how to use Propel behaviors, look at the `Behaviors "
"reference section`_."
msgstr ""

#: ../../book/propel.rst:524
msgid "Commands"
msgstr ""

#: ../../book/propel.rst:526
msgid ""
"You should read the dedicated section for `Propel commands in Symfony2`_."
msgstr ""

#: ../../book/propel.rst:1
msgid "Propel"
msgstr ""
