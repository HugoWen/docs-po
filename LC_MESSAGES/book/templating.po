# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../book/templating.rst:5
msgid "Creating and Using Templates"
msgstr "创建和使用模板"

#: ../../book/templating.rst:7
msgid ""
"As you know, the :doc:`controller </book/controller>` is responsible for "
"handling each request that comes into a Symfony application. In reality, the"
" controller delegates most of the heavy work to other places so that code "
"can be tested and reused. When a controller needs to generate HTML, CSS or "
"any other content, it hands the work off to the templating engine. In this "
"chapter, you'll learn how to write powerful templates that can be used to "
"return content to the user, populate email bodies, and more. You'll learn "
"shortcuts, clever ways to extend templates and how to reuse template code."
msgstr ""

#: ../../book/templating.rst:19
msgid ""
"How to render templates is covered in the :ref:`controller <controller-"
"rendering-templates>` page of the book."
msgstr ""

#: ../../book/templating.rst:26
msgid "Templates"
msgstr "模板"

#: ../../book/templating.rst:28
msgid ""
"A template is simply a text file that can generate any text-based format "
"(HTML, XML, CSV, LaTeX ...). The most familiar type of template is a *PHP* "
"template - a text file parsed by PHP that contains a mix of text and PHP "
"code:"
msgstr ""

#: ../../book/templating.rst:56
msgid ""
"But Symfony packages an even more powerful templating language called "
"`Twig`_. Twig allows you to write concise, readable templates that are more "
"friendly to web designers and, in several ways, more powerful than PHP "
"templates:"
msgstr ""

#: ../../book/templating.rst:78
msgid "Twig defines three types of special syntax:"
msgstr ""

#: ../../book/templating.rst:82
msgid "``{{ ... }}``"
msgstr ""

#: ../../book/templating.rst:81
msgid ""
"\"Says something\": prints a variable or the result of an expression to the "
"template."
msgstr ""

#: ../../book/templating.rst:86
msgid "``{% ... %}``"
msgstr ""

#: ../../book/templating.rst:85
msgid ""
"\"Does something\": a **tag** that controls the logic of the template; it is"
" used to execute statements such as for-loops for example."
msgstr ""

#: ../../book/templating.rst:91
msgid "``{# ... #}``"
msgstr ""

#: ../../book/templating.rst:89
msgid ""
"\"Comment something\": it's the equivalent of the PHP ``/* comment */`` "
"syntax. It's used to add single or multi-line comments. The content of the "
"comments isn't included in the rendered pages."
msgstr ""

#: ../../book/templating.rst:93
msgid ""
"Twig also contains **filters**, which modify content before being rendered. "
"The following makes the ``title`` variable all uppercase before rendering "
"it:"
msgstr ""

#: ../../book/templating.rst:101
msgid ""
"Twig comes with a long list of `tags`_ and `filters`_ that are available by "
"default. You can even `add your own extensions`_ to Twig as needed."
msgstr ""

#: ../../book/templating.rst:106
msgid ""
"Registering a Twig extension is as easy as creating a new service and "
"tagging it with ``twig.extension`` :ref:`tag <reference-dic-tags-twig-"
"extension>`."
msgstr ""

#: ../../book/templating.rst:109
msgid ""
"As you'll see throughout the documentation, Twig also supports functions and"
" new functions can be easily added. For example, the following uses a "
"standard ``for`` tag and the ``cycle`` function to print ten div tags, with "
"alternating ``odd``, ``even`` classes:"
msgstr ""

#: ../../book/templating.rst:122
msgid ""
"Throughout this chapter, template examples will be shown in both Twig and "
"PHP."
msgstr ""

#: ../../book/templating.rst:126
msgid ""
"If you *do* choose to not use Twig and you disable it, you'll need to "
"implement your own exception handler via the ``kernel.exception`` event."
msgstr ""

#: ../../book/templating.rst:0
msgid "Why Twig?"
msgstr "为何选择Twig？"

#: ../../book/templating.rst:131
msgid ""
"Twig templates are meant to be simple and won't process PHP tags. This is by"
" design: the Twig template system is meant to express presentation, not "
"program logic. The more you use Twig, the more you'll appreciate and benefit"
" from this distinction. And of course, you'll be loved by web designers "
"everywhere."
msgstr ""

#: ../../book/templating.rst:137
msgid ""
"Twig can also do things that PHP can't, such as whitespace control, "
"sandboxing, automatic and contextual output escaping, and the inclusion of "
"custom functions and filters that only affect templates. Twig contains "
"little features that make writing templates easier and more concise. Take "
"the following example, which combines a loop with a logical ``if`` "
"statement:"
msgstr ""

#: ../../book/templating.rst:158
msgid "Twig Template Caching"
msgstr "Twig模板缓存"

#: ../../book/templating.rst:160
msgid ""
"Twig is fast. Each Twig template is compiled down to a native PHP class that"
" is rendered at runtime. The compiled classes are located in the "
"``app/cache/{environment}/twig`` directory (where ``{environment}`` is the "
"environment, such as ``dev`` or ``prod``) and in some cases can be useful "
"while debugging. See :ref:`environments-summary` for more information on "
"environments."
msgstr ""

#: ../../book/templating.rst:167
msgid ""
"When ``debug`` mode is enabled (common in the ``dev`` environment), a Twig "
"template will be automatically recompiled when changes are made to it. This "
"means that during development you can happily make changes to a Twig "
"template and instantly see the changes without needing to worry about "
"clearing any cache."
msgstr ""

#: ../../book/templating.rst:173
msgid ""
"When ``debug`` mode is disabled (common in the ``prod`` environment), "
"however, you must clear the Twig cache directory so that the Twig templates "
"will regenerate. Remember to do this when deploying your application."
msgstr ""

#: ../../book/templating.rst:181
msgid "Template Inheritance and Layouts"
msgstr "模板继承和布局"

#: ../../book/templating.rst:183
msgid ""
"More often than not, templates in a project share common elements, like the "
"header, footer, sidebar or more. In Symfony, this problem is thought about "
"differently: a template can be decorated by another one. This works exactly "
"the same as PHP classes: template inheritance allows you to build a base "
"\"layout\" template that contains all the common elements of your site "
"defined as **blocks** (think \"PHP class with base methods\"). A child "
"template can extend the base layout and override any of its blocks (think "
"\"PHP subclass that overrides certain methods of its parent class\")."
msgstr ""

#: ../../book/templating.rst:192
msgid "First, build a base layout file:"
msgstr ""

#: ../../book/templating.rst:250
msgid ""
"Though the discussion about template inheritance will be in terms of Twig, "
"the philosophy is the same between Twig and PHP templates."
msgstr ""

#: ../../book/templating.rst:253
msgid ""
"This template defines the base HTML skeleton document of a simple two-column"
" page. In this example, three ``{% block %}`` areas are defined (``title``, "
"``sidebar`` and ``body``). Each block may be overridden by a child template "
"or left with its default implementation. This template could also be "
"rendered directly. In that case the ``title``, ``sidebar`` and ``body`` "
"blocks would simply retain the default values used in this template."
msgstr ""

#: ../../book/templating.rst:260
msgid "A child template might look like this:"
msgstr ""

#: ../../book/templating.rst:294
msgid ""
"The parent template is identified by a special string syntax "
"(``base.html.twig``). This path is relative to the ``app/Resources/views`` "
"directory of the project. You could also use the logical name equivalent: "
"``::base.html.twig``. This naming convention is explained fully in :ref"
":`template-naming-locations`."
msgstr ""

#: ../../book/templating.rst:300
msgid ""
"The key to template inheritance is the ``{% extends %}`` tag. This tells the"
" templating engine to first evaluate the base template, which sets up the "
"layout and defines several blocks. The child template is then rendered, at "
"which point the ``title`` and ``body`` blocks of the parent are replaced by "
"those from the child. Depending on the value of ``blog_entries``, the output"
" might look like this:"
msgstr ""

#: ../../book/templating.rst:333
msgid ""
"Notice that since the child template didn't define a ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used by default."
msgstr ""

#: ../../book/templating.rst:337
msgid ""
"You can use as many levels of inheritance as you want. In the next section, "
"a common three-level inheritance model will be explained along with how "
"templates are organized inside a Symfony project."
msgstr ""

#: ../../book/templating.rst:341
msgid ""
"When working with template inheritance, here are some tips to keep in mind:"
msgstr ""

#: ../../book/templating.rst:343
msgid ""
"If you use ``{% extends %}`` in a template, it must be the first tag in that"
" template;"
msgstr ""

#: ../../book/templating.rst:346
msgid ""
"The more ``{% block %}`` tags you have in your base templates, the better. "
"Remember, child templates don't have to define all parent blocks, so create "
"as many blocks in your base templates as you want and give each a sensible "
"default. The more blocks your base templates have, the more flexible your "
"layout will be;"
msgstr ""

#: ../../book/templating.rst:352
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent"
" template. In some cases, a better solution may be to move the content to a "
"new template and ``include`` it (see :ref:`including-templates`);"
msgstr ""

#: ../../book/templating.rst:357
msgid ""
"If you need to get the content of a block from the parent template, you can "
"use the ``{{ parent() }}`` function. This is useful if you want to add to "
"the contents of a parent block instead of completely overriding it:"
msgstr ""

#: ../../book/templating.rst:378
msgid "Template Naming and Locations"
msgstr "模板命名规则和存放位置"

#: ../../book/templating.rst:380
msgid "By default, templates can live in two different locations:"
msgstr ""

#: ../../book/templating.rst:386
msgid "``app/Resources/views/``"
msgstr ""

#: ../../book/templating.rst:383
msgid ""
"The applications ``views`` directory can contain application-wide base "
"templates (i.e. your application's layouts and templates of the application "
"bundle) as well as templates that override third party bundle templates (see"
" :ref:`overriding-bundle-templates`)."
msgstr ""

#: ../../book/templating.rst:391
msgid "``path/to/bundle/Resources/views/``"
msgstr ""

#: ../../book/templating.rst:389
msgid ""
"Each third party bundle houses its templates in its ``Resources/views/`` "
"directory (and subdirectories). When you plan to share your bundle, you "
"should put the templates in the bundle instead of the ``app/`` directory."
msgstr ""

#: ../../book/templating.rst:393
msgid ""
"Most of the templates you'll use live in the ``app/Resources/views/`` "
"directory. The path you'll use will be relative to this directory. For "
"example, to render/extend ``app/Resources/views/base.html.twig``, you'll use"
" the ``base.html.twig`` path and to render/extend "
"``app/Resources/views/blog/index.html.twig``, you'll use the "
"``blog/index.html.twig`` path."
msgstr ""

#: ../../book/templating.rst:403
msgid "Referencing Templates in a Bundle"
msgstr "引用Bundle里的模板"

#: ../../book/templating.rst:405
msgid ""
"Symfony uses a **bundle**:**directory**:**filename** string syntax for "
"templates that live inside a bundle. This allows for several types of "
"templates, each which lives in a specific location:"
msgstr ""

#: ../../book/templating.rst:409
msgid ""
"``AcmeBlogBundle:Blog:index.html.twig``: This syntax is used to specify a "
"template for a specific page. The three parts of the string, each separated "
"by a colon (``:``), mean the following:"
msgstr ""

#: ../../book/templating.rst:413
msgid ""
"``AcmeBlogBundle``: (*bundle*) the template lives inside the AcmeBlogBundle "
"(e.g. ``src/Acme/BlogBundle``);"
msgstr ""

#: ../../book/templating.rst:416
msgid ""
"``Blog``: (*directory*) indicates that the template lives inside the "
"``Blog`` subdirectory of ``Resources/views``;"
msgstr ""

#: ../../book/templating.rst:419
msgid ""
"``index.html.twig``: (*filename*) the actual name of the file is "
"``index.html.twig``."
msgstr ""

#: ../../book/templating.rst:422
msgid ""
"Assuming that the AcmeBlogBundle lives at ``src/Acme/BlogBundle``, the final"
" path to the layout would be "
"``src/Acme/BlogBundle/Resources/views/Blog/index.html.twig``."
msgstr ""

#: ../../book/templating.rst:425
msgid ""
"``AcmeBlogBundle::layout.html.twig``: This syntax refers to a base template "
"that's specific to the AcmeBlogBundle. Since the middle, \"directory\", "
"portion is missing (e.g. ``Blog``), the template lives at "
"``Resources/views/layout.html.twig`` inside AcmeBlogBundle. Yes, there are 2"
" colons in the middle of the string when the \"controller\" subdirectory "
"part is missing."
msgstr ""

#: ../../book/templating.rst:432
msgid ""
"In the :ref:`overriding-bundle-templates` section, you'll find out how each "
"template living inside the AcmeBlogBundle, for example, can be overridden by"
" placing a template of the same name in the "
"``app/Resources/AcmeBlogBundle/views/`` directory. This gives the power to "
"override templates from any vendor bundle."
msgstr ""

#: ../../book/templating.rst:439
msgid ""
"Hopefully the template naming syntax looks familiar - it's similar to the "
"naming convention used to refer to :ref:`controller-string-syntax`."
msgstr ""

#: ../../book/templating.rst:443
msgid "Template Suffix"
msgstr "模板后缀"

#: ../../book/templating.rst:445
msgid ""
"Every template name also has two extensions that specify the *format* and "
"*engine* for that template."
msgstr ""

#: ../../book/templating.rst:449
msgid "Filename"
msgstr ""

#: ../../book/templating.rst:449
msgid "Format"
msgstr ""

#: ../../book/templating.rst:449
msgid "Engine"
msgstr ""

#: ../../book/templating.rst:451
msgid "``blog/index.html.twig``"
msgstr ""

#: ../../book/templating.rst:451 ../../book/templating.rst:452
msgid "HTML"
msgstr ""

#: ../../book/templating.rst:451 ../../book/templating.rst:453
#: ../../book/templating.rst:54 ../../book/templating.rst:154
msgid "Twig"
msgstr ""

#: ../../book/templating.rst:452
msgid "``blog/index.html.php``"
msgstr ""

#: ../../book/templating.rst:452
msgid "PHP"
msgstr ""

#: ../../book/templating.rst:453
msgid "``blog/index.css.twig``"
msgstr ""

#: ../../book/templating.rst:453
msgid "CSS"
msgstr ""

#: ../../book/templating.rst:456
msgid ""
"By default, any Symfony template can be written in either Twig or PHP, and "
"the last part of the extension (e.g. ``.twig`` or ``.php``) specifies which "
"of these two *engines* should be used. The first part of the extension, "
"(e.g. ``.html``, ``.css``, etc) is the final format that the template will "
"generate. Unlike the engine, which determines how Symfony parses the "
"template, this is simply an organizational tactic used in case the same "
"resource needs to be rendered as HTML (``index.html.twig``), XML "
"(``index.xml.twig``), or any other format. For more information, read the "
":ref:`template-formats` section."
msgstr ""

#: ../../book/templating.rst:468
msgid ""
"The available \"engines\" can be configured and even new engines added. See "
":ref:`Templating Configuration <template-configuration>` for more details."
msgstr ""

#: ../../book/templating.rst:476
msgid "Tags and Helpers"
msgstr "Tag和助手"

#: ../../book/templating.rst:478
msgid ""
"You already understand the basics of templates, how they're named and how to"
" use template inheritance. The hardest parts are already behind you. In this"
" section, you'll learn about a large group of tools available to help "
"perform the most common template tasks such as including other templates, "
"linking to pages and including images."
msgstr ""

#: ../../book/templating.rst:484
msgid ""
"Symfony comes bundled with several specialized Twig tags and functions that "
"ease the work of the template designer. In PHP, the templating system "
"provides an extensible *helper* system that provides useful features in a "
"template context."
msgstr ""

#: ../../book/templating.rst:489
msgid ""
"You've already seen a few built-in Twig tags (``{% block %}`` & ``{% extends"
" %}``) as well as an example of a PHP helper (``$view['slots']``). Here you "
"will learn a few more."
msgstr ""

#: ../../book/templating.rst:499
msgid "Including other Templates"
msgstr "包含其他模板"

#: ../../book/templating.rst:501
msgid ""
"You'll often want to include the same template or code fragment on several "
"pages. For example, in an application with \"news articles\", the template "
"code displaying an article might be used on the article detail page, on a "
"page displaying the most popular articles, or in a list of the latest "
"articles."
msgstr ""

#: ../../book/templating.rst:507
msgid ""
"When you need to reuse a chunk of PHP code, you typically move the code to a"
" new PHP class or function. The same is true for templates. By moving the "
"reused template code into its own template, it can be included from any "
"other template. First, create the template that you'll need to reuse."
msgstr ""

#: ../../book/templating.rst:534
msgid "Including this template from any other template is simple:"
msgstr ""

#: ../../book/templating.rst:567
msgid ""
"The template is included using the ``{{ include() }}`` function. Notice that"
" the template name follows the same typical convention. The "
"``article_details.html.twig`` template uses an ``article`` variable, which "
"we pass to it. In this case, you could avoid doing this entirely, as all of "
"the variables available in ``list.html.twig`` are also available in "
"``article_details.html.twig`` (unless you set `with_context`_ to false)."
msgstr ""

#: ../../book/templating.rst:576
msgid ""
"The ``{'article': article}`` syntax is the standard Twig syntax for hash "
"maps (i.e. an array with named keys). If you needed to pass in multiple "
"elements, it would look like this: ``{'foo': foo, 'bar': bar}``."
msgstr ""

#: ../../book/templating.rst:586
msgid "Embedding Controllers"
msgstr "嵌入Controller"

#: ../../book/templating.rst:588
msgid ""
"In some cases, you need to do more than include a simple template. Suppose "
"you have a sidebar in your layout that contains the three most recent "
"articles. Retrieving the three articles may include querying the database or"
" performing other heavy logic that can't be done from within a template."
msgstr ""

#: ../../book/templating.rst:593
msgid ""
"The solution is to simply embed the result of an entire controller from your"
" template. First, create a controller that renders a certain number of "
"recent articles::"
msgstr ""

#: ../../book/templating.rst:617
msgid "The ``recentList`` template is perfectly straightforward:"
msgstr ""

#: ../../book/templating.rst:641
msgid ""
"Notice that the article URL is hardcoded in this example (e.g. "
"``/article/*slug*``). This is a bad practice. In the next section, you'll "
"learn how to do this correctly."
msgstr ""

#: ../../book/templating.rst:645
msgid ""
"To include the controller, you'll need to refer to it using the standard "
"string syntax for controllers (i.e. **bundle**:**controller**:**action**):"
msgstr ""

#: ../../book/templating.rst:676
msgid ""
"Whenever you find that you need a variable or a piece of information that "
"you don't have access to in a template, consider rendering a controller. "
"Controllers are fast to execute and promote good code organization and "
"reuse. Of course, like all controllers, they should ideally be \"skinny\", "
"meaning that as much code as possible lives in reusable :doc:`services "
"</book/service_container>`."
msgstr ""

#: ../../book/templating.rst:683
msgid "Asynchronous Content with hinclude.js"
msgstr "使用hinclude.js异步载入内容"

#: ../../book/templating.rst:685
msgid ""
"Controllers can be embedded asynchronously using the hinclude.js_ JavaScript"
" library. As the embedded content comes from another page (or controller for"
" that matter), Symfony uses a version of the standard ``render`` function to"
" configure ``hinclude`` tags:"
msgstr ""

#: ../../book/templating.rst:711
msgid "hinclude.js_ needs to be included in your page to work."
msgstr ""

#: ../../book/templating.rst:715
msgid ""
"When using a controller instead of a URL, you must enable the Symfony "
"``fragments`` configuration:"
msgstr ""

#: ../../book/templating.rst:751
msgid ""
"Default content (while loading or if JavaScript is disabled) can be set "
"globally in your application configuration:"
msgstr ""

#: ../../book/templating.rst:792
msgid ""
"You can define default templates per ``render`` function (which will "
"override any global default template that is defined):"
msgstr ""

#: ../../book/templating.rst:813
msgid "Or you can also specify a string to display as the default content:"
msgstr ""

#: ../../book/templating.rst:837
msgid "Linking to Pages"
msgstr "创建链接"

#: ../../book/templating.rst:839
msgid ""
"Creating links to other pages in your application is one of the most common "
"jobs for a template. Instead of hardcoding URLs in templates, use the "
"``path`` Twig function (or the ``router`` helper in PHP) to generate URLs "
"based on the routing configuration. Later, if you want to modify the URL of "
"a particular page, all you'll need to do is change the routing "
"configuration; the templates will automatically generate the new URL."
msgstr ""

#: ../../book/templating.rst:846
msgid ""
"First, link to the \"_welcome\" page, which is accessible via the following "
"routing configuration:"
msgstr ""

#: ../../book/templating.rst:885
msgid ""
"To link to the page, just use the ``path`` Twig function and refer to the "
"route:"
msgstr ""

#: ../../book/templating.rst:897
msgid ""
"As expected, this will generate the URL ``/``. Now, for a more complicated "
"route:"
msgstr ""

#: ../../book/templating.rst:936
msgid ""
"In this case, you need to specify both the route name (``article_show``) and"
" a value for the ``{slug}`` parameter. Using this route, revisit the "
"``recentList`` template from the previous section and link to the articles "
"correctly:"
msgstr ""

#: ../../book/templating.rst:965
msgid ""
"You can also generate an absolute URL by using the ``url`` Twig function:"
msgstr ""

#: ../../book/templating.rst:971
msgid ""
"The same can be done in PHP templates by passing a third argument to the "
"``generate()`` method:"
msgstr ""

#: ../../book/templating.rst:988
msgid "Linking to Assets"
msgstr "链接静态文件"

#: ../../book/templating.rst:990
msgid ""
"Templates also commonly refer to images, JavaScript, stylesheets and other "
"assets. Of course you could hard-code the path to these assets (e.g. "
"``/images/logo.png``), but Symfony provides a more dynamic option via the "
"``asset`` Twig function:"
msgstr ""

#: ../../book/templating.rst:1008
msgid ""
"The ``asset`` function's main purpose is to make your application more "
"portable. If your application lives at the root of your host (e.g. "
"http://example.com), then the rendered paths should be ``/images/logo.png``."
" But if your application lives in a subdirectory (e.g. "
"http://example.com/my_app), each asset path should render with the "
"subdirectory (e.g. ``/my_app/images/logo.png``). The ``asset`` function "
"takes care of this by determining how your application is being used and "
"generating the correct paths accordingly."
msgstr ""

#: ../../book/templating.rst:1016
msgid ""
"Additionally, if you use the ``asset`` function, Symfony can automatically "
"append a query string to your asset, in order to guarantee that updated "
"static assets won't be cached when deployed. For example, "
"``/images/logo.png`` might look like ``/images/logo.png?v2``. For more "
"information, see the :ref:`ref-framework-assets-version` configuration "
"option."
msgstr ""

#: ../../book/templating.rst:1024
msgid ""
"If you need to set a version for a specific asset, you can set the fourth "
"argument (or the ``version`` argument) to the desired version:"
msgstr ""

#: ../../book/templating.rst:1042
msgid ""
"If you don't give a version or pass ``null``, the default package version "
"(from :ref:`ref-framework-assets-version`) will be used. If you pass "
"``false``, versioned URL will be deactivated for this asset."
msgstr ""

#: ../../book/templating.rst:1046
msgid ""
"If you need absolute URLs for assets, you can set the third argument (or the"
" ``absolute`` argument) to ``true``:"
msgstr ""

#: ../../book/templating.rst:1069
msgid "Including Stylesheets and JavaScripts in Twig"
msgstr "在Twig里引入CSS和JS"

#: ../../book/templating.rst:1071
msgid ""
"No site would be complete without including JavaScript files and "
"stylesheets. In Symfony, the inclusion of these assets is handled elegantly "
"by taking advantage of Symfony's template inheritance."
msgstr ""

#: ../../book/templating.rst:1077
msgid ""
"This section will teach you the philosophy behind including stylesheet and "
"JavaScript assets in Symfony. Symfony also packages another library, called "
"Assetic, which follows this philosophy but allows you to do much more "
"interesting things with those assets. For more information on using Assetic "
"see :doc:`/cookbook/assetic/asset_management`."
msgstr ""

#: ../../book/templating.rst:1083
msgid ""
"Start by adding two blocks to your base template that will hold your assets:"
" one called ``stylesheets`` inside the ``head`` tag and another called "
"``javascripts`` just above the closing ``body`` tag. These blocks will "
"contain all of the stylesheets and JavaScripts that you'll need throughout "
"your site:"
msgstr ""

#: ../../book/templating.rst:1130
msgid ""
"That's easy enough! But what if you need to include an extra stylesheet or "
"JavaScript from a child template? For example, suppose you have a contact "
"page and you need to include a ``contact.css`` stylesheet *just* on that "
"page. From inside that contact page's template, do the following:"
msgstr ""

#: ../../book/templating.rst:1159
msgid ""
"In the child template, you simply override the ``stylesheets`` block and put"
" your new stylesheet tag inside of that block. Of course, since you want to "
"add to the parent block's content (and not actually *replace* it), you "
"should use the ``parent()`` Twig function to include everything from the "
"``stylesheets`` block of the base template."
msgstr ""

#: ../../book/templating.rst:1165
msgid ""
"You can also include assets located in your bundles' ``Resources/public`` "
"folder. You will need to run the ``php app/console assets:install target "
"[--symlink]`` command, which moves (or symlinks) files into the correct "
"location. (target is by default \"web\")."
msgstr ""

#: ../../book/templating.rst:1174
msgid ""
"The end result is a page that includes both the ``main.css`` and "
"``contact.css`` stylesheets."
msgstr ""

#: ../../book/templating.rst:1178
msgid "Global Template Variables"
msgstr "模板全局变量"

#: ../../book/templating.rst:1180
msgid ""
"During each request, Symfony will set a global template variable ``app`` in "
"both Twig and PHP template engines by default. The ``app`` variable is a "
":class:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Templating\\\\GlobalVariables`"
" instance which will give you access to some application specific variables "
"automatically:"
msgstr ""

#: ../../book/templating.rst:1186
msgid "``app.security``"
msgstr ""

#: ../../book/templating.rst:1187
msgid "The security context."
msgstr ""

#: ../../book/templating.rst:1188
msgid "``app.user``"
msgstr ""

#: ../../book/templating.rst:1189
msgid "The current user object."
msgstr ""

#: ../../book/templating.rst:1190
msgid "``app.request``"
msgstr ""

#: ../../book/templating.rst:1191
msgid "The request object."
msgstr ""

#: ../../book/templating.rst:1192
msgid "``app.session``"
msgstr ""

#: ../../book/templating.rst:1193
msgid "The session object."
msgstr ""

#: ../../book/templating.rst:1194
msgid "``app.environment``"
msgstr ""

#: ../../book/templating.rst:1195
msgid "The current environment (dev, prod, etc)."
msgstr ""

#: ../../book/templating.rst:1197
msgid "``app.debug``"
msgstr ""

#: ../../book/templating.rst:1197
msgid "True if in debug mode. False otherwise."
msgstr ""

#: ../../book/templating.rst:1217
msgid ""
"The global ``app.security`` variable (or the ``$app->getSecurity()`` method "
"in PHP templates) is deprecated as of Symfony 2.6. Use ``app.user`` "
"(``$app->getUser()``) and ``is_granted()`` "
"(``$view['security']->isGranted()``) instead."
msgstr ""

#: ../../book/templating.rst:1225
msgid ""
"You can add your own global template variables. See the cookbook example on "
":doc:`Global Variables </cookbook/templating/global_variables>`."
msgstr ""

#: ../../book/templating.rst:1232
msgid "Configuring and Using the ``templating`` Service"
msgstr "配置和使用 ``templating`` Service"

#: ../../book/templating.rst:1234
msgid ""
"The heart of the template system in Symfony is the templating ``Engine``. "
"This special object is responsible for rendering templates and returning "
"their content. When you render a template in a controller, for example, "
"you're actually using the templating engine service. For example::"
msgstr ""

#: ../../book/templating.rst:1241
msgid "is equivalent to::"
msgstr ""

#: ../../book/templating.rst:1252
msgid ""
"The templating engine (or \"service\") is preconfigured to work "
"automatically inside Symfony. It can, of course, be configured further in "
"the application configuration file:"
msgstr ""

#: ../../book/templating.rst:1294
msgid ""
"Several configuration options are available and are covered in the "
":doc:`Configuration Appendix </reference/configuration/framework>`."
msgstr ""

#: ../../book/templating.rst:1299
msgid ""
"The ``twig`` engine is mandatory to use the webprofiler (as well as many "
"third-party bundles)."
msgstr ""

#: ../../book/templating.rst:1308
msgid "Overriding Bundle Templates"
msgstr "重载Bundle的模板"

#: ../../book/templating.rst:1310
msgid ""
"The Symfony community prides itself on creating and maintaining high quality"
" bundles (see `KnpBundles.com`_) for a large number of different features. "
"Once you use a third-party bundle, you'll likely need to override and "
"customize one or more of its templates."
msgstr ""

#: ../../book/templating.rst:1315
msgid ""
"Suppose you've installed the imaginary open-source AcmeBlogBundle in your "
"project. And while you're really happy with everything, you want to override"
" the blog \"list\" page to customize the markup specifically for your "
"application. By digging into the ``Blog`` controller of the AcmeBlogBundle, "
"you find the following::"
msgstr ""

#: ../../book/templating.rst:1332
msgid ""
"When the ``AcmeBlogBundle:Blog:index.html.twig`` is rendered, Symfony "
"actually looks in two different locations for the template:"
msgstr ""

#: ../../book/templating.rst:1335
msgid "``app/Resources/AcmeBlogBundle/views/Blog/index.html.twig``"
msgstr ""

#: ../../book/templating.rst:1336
msgid "``src/Acme/BlogBundle/Resources/views/Blog/index.html.twig``"
msgstr ""

#: ../../book/templating.rst:1338
msgid ""
"To override the bundle template, just copy the ``index.html.twig`` template "
"from the bundle to "
"``app/Resources/AcmeBlogBundle/views/Blog/index.html.twig`` (the "
"``app/Resources/AcmeBlogBundle`` directory won't exist, so you'll need to "
"create it). You're now free to customize the template."
msgstr ""

#: ../../book/templating.rst:1345
msgid ""
"If you add a template in a new location, you *may* need to clear your cache "
"(``php app/console cache:clear``), even if you are in debug mode."
msgstr ""

#: ../../book/templating.rst:1348
msgid ""
"This logic also applies to base bundle templates. Suppose also that each "
"template in AcmeBlogBundle inherits from a base template called "
"``AcmeBlogBundle::layout.html.twig``. Just as before, Symfony will look in "
"the following two places for the template:"
msgstr ""

#: ../../book/templating.rst:1353
msgid "``app/Resources/AcmeBlogBundle/views/layout.html.twig``"
msgstr ""

#: ../../book/templating.rst:1354
msgid "``src/Acme/BlogBundle/Resources/views/layout.html.twig``"
msgstr ""

#: ../../book/templating.rst:1356
msgid ""
"Once again, to override the template, just copy it from the bundle to "
"``app/Resources/AcmeBlogBundle/views/layout.html.twig``. You're now free to "
"customize this copy as you see fit."
msgstr ""

#: ../../book/templating.rst:1360
msgid ""
"If you take a step back, you'll see that Symfony always starts by looking in"
" the ``app/Resources/{BUNDLE_NAME}/views/`` directory for a template. If the"
" template doesn't exist there, it continues by checking inside the "
"``Resources/views`` directory of the bundle itself. This means that all "
"bundle templates can be overridden by placing them in the correct "
"``app/Resources`` subdirectory."
msgstr ""

#: ../../book/templating.rst:1369
msgid ""
"You can also override templates from within a bundle by using bundle "
"inheritance. For more information, see :doc:`/cookbook/bundles/inheritance`."
msgstr ""

#: ../../book/templating.rst:1378
msgid "Overriding Core Templates"
msgstr "重载内置模板"

#: ../../book/templating.rst:1380
msgid ""
"Since the Symfony framework itself is just a bundle, core templates can be "
"overridden in the same way. For example, the core TwigBundle contains a "
"number of different \"exception\" and \"error\" templates that can be "
"overridden by copying each from the ``Resources/views/Exception`` directory "
"of the TwigBundle to, you guessed it, the "
"``app/Resources/TwigBundle/views/Exception`` directory."
msgstr ""

#: ../../book/templating.rst:1391
msgid "Three-level Inheritance"
msgstr "“三层”继承"

#: ../../book/templating.rst:1393
msgid ""
"One common way to use inheritance is to use a three-level approach. This "
"method works perfectly with the three different types of templates that were"
" just covered:"
msgstr ""

#: ../../book/templating.rst:1397
msgid ""
"Create a ``app/Resources/views/base.html.twig`` file that contains the main "
"layout for your application (like in the previous example). Internally, this"
" template is called ``base.html.twig``;"
msgstr ""

#: ../../book/templating.rst:1401
msgid ""
"Create a template for each \"section\" of your site. For example, the blog "
"functionality would have a template called ``blog/layout.html.twig`` that "
"contains only blog section-specific elements;"
msgstr ""

#: ../../book/templating.rst:1416
msgid ""
"Create individual templates for each page and make each extend the "
"appropriate section template. For example, the \"index\" page would be "
"called something close to ``blog/index.html.twig`` and list the actual blog "
"posts."
msgstr ""

#: ../../book/templating.rst:1432
msgid ""
"Notice that this template extends the section template "
"(``blog/layout.html.twig``) which in turn extends the base application "
"layout (``base.html.twig``). This is the common three-level inheritance "
"model."
msgstr ""

#: ../../book/templating.rst:1436
msgid ""
"When building your application, you may choose to follow this method or "
"simply make each page template extend the base application template directly"
" (e.g. ``{% extends 'base.html.twig' %}``). The three-template model is a "
"best-practice method used by vendor bundles so that the base template for a "
"bundle can be easily overridden to properly extend your application's base "
"layout."
msgstr ""

#: ../../book/templating.rst:1447
msgid "Output Escaping"
msgstr "转义"

#: ../../book/templating.rst:1449
msgid ""
"When generating HTML from a template, there is always a risk that a template"
" variable may output unintended HTML or dangerous client-side code. The "
"result is that dynamic content could break the HTML of the resulting page or"
" allow a malicious user to perform a `Cross Site Scripting`_ (XSS) attack. "
"Consider this classic example:"
msgstr ""

#: ../../book/templating.rst:1465
msgid "Imagine the user enters the following code for their name:"
msgstr ""

#: ../../book/templating.rst:1471
msgid ""
"Without any output escaping, the resulting template will cause a JavaScript "
"alert box to pop up:"
msgstr ""

#: ../../book/templating.rst:1478
msgid ""
"And while this seems harmless, if a user can get this far, that same user "
"should also be able to write JavaScript that performs malicious actions "
"inside the secure area of an unknowing, legitimate user."
msgstr ""

#: ../../book/templating.rst:1482
msgid ""
"The answer to the problem is output escaping. With output escaping on, the "
"same template will render harmlessly, and literally print the ``script`` tag"
" to the screen:"
msgstr ""

#: ../../book/templating.rst:1490
msgid ""
"The Twig and PHP templating systems approach the problem in different ways. "
"If you're using Twig, output escaping is on by default and you're protected."
" In PHP, output escaping is not automatic, meaning you'll need to manually "
"escape where necessary."
msgstr ""

#: ../../book/templating.rst:1496
msgid "Output Escaping in Twig"
msgstr "Twig转义功能"

#: ../../book/templating.rst:1498
msgid ""
"If you're using Twig templates, then output escaping is on by default. This "
"means that you're protected out-of-the-box from the unintentional "
"consequences of user-submitted code. By default, the output escaping assumes"
" that content is being escaped for HTML output."
msgstr ""

#: ../../book/templating.rst:1503
msgid ""
"In some cases, you'll need to disable output escaping when you're rendering "
"a variable that is trusted and contains markup that should not be escaped. "
"Suppose that administrative users are able to write articles that contain "
"HTML code. By default, Twig will escape the article body."
msgstr ""

#: ../../book/templating.rst:1508
msgid "To render it normally, add the ``raw`` filter:"
msgstr ""

#: ../../book/templating.rst:1514
msgid ""
"You can also disable output escaping inside a ``{% block %}`` area or for an"
" entire template. For more information, see `Output Escaping`_ in the Twig "
"documentation."
msgstr ""

#: ../../book/templating.rst:1519
msgid "Output Escaping in PHP"
msgstr "PHP中使用转义"

#: ../../book/templating.rst:1521
msgid ""
"Output escaping is not automatic when using PHP templates. This means that "
"unless you explicitly choose to escape a variable, you're not protected. To "
"use output escaping, use the special ``escape()`` view method:"
msgstr ""

#: ../../book/templating.rst:1529
msgid ""
"By default, the ``escape()`` method assumes that the variable is being "
"rendered within an HTML context (and thus the variable is escaped to be safe"
" for HTML). The second argument lets you change the context. For example, to"
" output something in a JavaScript string, use the ``js`` context:"
msgstr ""

#: ../../book/templating.rst:1542
msgid "Debugging"
msgstr "调试"

#: ../../book/templating.rst:1544
msgid ""
"When using PHP, you can use the :ref:`dump() function from the VarDumper "
"component <components-var-dumper-dump>` if you need to quickly find the "
"value of a variable passed. This is useful, for example, inside your "
"controller::"
msgstr ""

#: ../../book/templating.rst:1567
msgid ""
"The output of the ``dump()`` function is then rendered in the web developer "
"toolbar."
msgstr ""

#: ../../book/templating.rst:1570
msgid ""
"The same mechanism can be used in Twig templates thanks to ``dump`` "
"function:"
msgstr ""

#: ../../book/templating.rst:1583
msgid ""
"The variables will only be dumped if Twig's ``debug`` setting (in "
"``config.yml``) is ``true``. By default this means that the variables will "
"be dumped in the ``dev`` environment but not the ``prod`` environment."
msgstr ""

#: ../../book/templating.rst:1588
msgid "Syntax Checking"
msgstr "语法检查"

#: ../../book/templating.rst:1590
msgid ""
"You can check for syntax errors in Twig templates using the ``twig:lint`` "
"console command:"
msgstr ""

#: ../../book/templating.rst:1604
msgid "Template Formats"
msgstr "模板格式"

#: ../../book/templating.rst:1606
msgid ""
"Templates are a generic way to render content in *any* format. And while in "
"most cases you'll use templates to render HTML content, a template can just "
"as easily generate JavaScript, CSS, XML or any other format you can dream "
"of."
msgstr ""

#: ../../book/templating.rst:1610
msgid ""
"For example, the same \"resource\" is often rendered in several formats. To "
"render an article index page in XML, simply include the format in the "
"template name:"
msgstr ""

#: ../../book/templating.rst:1614
msgid "*XML template name*: ``article/index.xml.twig``"
msgstr ""

#: ../../book/templating.rst:1615
msgid "*XML template filename*: ``index.xml.twig``"
msgstr ""

#: ../../book/templating.rst:1617
msgid ""
"In reality, this is nothing more than a naming convention and the template "
"isn't actually rendered differently based on its format."
msgstr ""

#: ../../book/templating.rst:1620
msgid ""
"In many cases, you may want to allow a single controller to render multiple "
"different formats based on the \"request format\". For that reason, a common"
" pattern is to do the following::"
msgstr ""

#: ../../book/templating.rst:1631
msgid ""
"The ``getRequestFormat`` on the ``Request`` object defaults to ``html``, but"
" can return any other format based on the format requested by the user. The "
"request format is most often managed by the routing, where a route can be "
"configured so that ``/contact`` sets the request format to ``html`` while "
"``/contact.xml`` sets the format to ``xml``. For more information, see the "
":ref:`Advanced Example in the Routing chapter <advanced-routing-example>`."
msgstr ""

#: ../../book/templating.rst:1638
msgid ""
"To create links that include the format parameter, include a ``_format`` key"
" in the parameter hash:"
msgstr ""

#: ../../book/templating.rst:1659
msgid "Final Thoughts"
msgstr "总结"

#: ../../book/templating.rst:1661
msgid ""
"The templating engine in Symfony is a powerful tool that can be used each "
"time you need to generate presentational content in HTML, XML or any other "
"format. And though templates are a common way to generate content in a "
"controller, their use is not mandatory. The ``Response`` object returned by "
"a controller can be created with or without the use of a template::"
msgstr ""

#: ../../book/templating.rst:1673
msgid ""
"Symfony's templating engine is very flexible and two different template "
"renderers are available by default: the traditional *PHP* templates and the "
"sleek and powerful *Twig* templates. Both support a template hierarchy and "
"come packaged with a rich set of helper functions capable of performing the "
"most common tasks."
msgstr ""

#: ../../book/templating.rst:1679
msgid ""
"Overall, the topic of templating should be thought of as a powerful tool "
"that's at your disposal. In some cases, you may not need to render a "
"template, and in Symfony, that's absolutely fine."
msgstr ""

#: ../../book/templating.rst:1684
msgid "Learn more from the Cookbook"
msgstr "了解更多"

#: ../../book/templating.rst:1686
msgid ":doc:`/cookbook/templating/PHP`"
msgstr ""

#: ../../book/templating.rst:1687
msgid ":doc:`/cookbook/controller/error_pages`"
msgstr ""

#: ../../book/templating.rst:1688
msgid ":doc:`/cookbook/templating/twig_extension`"
msgstr ""

#: ../../book/templating.rst:1 ../../book/templating.rst:22
#: ../../book/templating.rst:177 ../../book/templating.rst:371
#: ../../book/templating.rst:371 ../../book/templating.rst:471
#: ../../book/templating.rst:471 ../../book/templating.rst:493
#: ../../book/templating.rst:580 ../../book/templating.rst:831
#: ../../book/templating.rst:982 ../../book/templating.rst:1063
#: ../../book/templating.rst:1228 ../../book/templating.rst:1387
#: ../../book/templating.rst:1443 ../../book/templating.rst:1538
msgid "Templating"
msgstr ""

#: ../../book/templating.rst:22
msgid "What is a template?"
msgstr ""

#: ../../book/templating.rst:54
msgid "Introduction"
msgstr ""

#: ../../book/templating.rst:154
msgid "Cache"
msgstr ""

#: ../../book/templating.rst:177
msgid "Inheritance"
msgstr ""

#: ../../book/templating.rst:371
msgid "Naming conventions"
msgstr ""

#: ../../book/templating.rst:371
msgid "File locations"
msgstr ""

#: ../../book/templating.rst:471
msgid "Tags and helpers"
msgstr ""

#: ../../book/templating.rst:471
msgid "Helpers"
msgstr ""

#: ../../book/templating.rst:493
msgid "Including other templates"
msgstr ""

#: ../../book/templating.rst:580
msgid "Embedding action"
msgstr ""

#: ../../book/templating.rst:831
msgid "Linking to pages"
msgstr ""

#: ../../book/templating.rst:982
msgid "Linking to assets"
msgstr ""

#: ../../book/templating.rst:1063
msgid "Including stylesheets and JavaScripts"
msgstr ""

#: ../../book/templating.rst:1063
msgid "Stylesheets"
msgstr ""

#: ../../book/templating.rst:1063
msgid "Including stylesheets"
msgstr ""

#: ../../book/templating.rst:1063
msgid "JavaScript"
msgstr ""

#: ../../book/templating.rst:1063
msgid "Including JavaScripts"
msgstr ""

#: ../../book/templating.rst:1228
msgid "The templating service"
msgstr ""

#: ../../book/templating.rst:1302 ../../book/templating.rst:1374
msgid "Template"
msgstr ""

#: ../../book/templating.rst:1302
msgid "Overriding templates"
msgstr ""

#: ../../book/templating.rst:1374
msgid "Overriding exception templates"
msgstr ""

#: ../../book/templating.rst:1387
msgid "Three-level inheritance pattern"
msgstr ""

#: ../../book/templating.rst:1443
msgid "Output escaping"
msgstr ""

#: ../../book/templating.rst:1538
msgid "Formats"
msgstr ""
