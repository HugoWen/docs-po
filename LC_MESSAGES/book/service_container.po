# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../book/service_container.rst:6 ../../book/service_container.rst:1
#: ../../book/service_container.rst:36 ../../book/service_container.rst:69
#: ../../book/service_container.rst:95 ../../book/service_container.rst:284
#: ../../book/service_container.rst:388 ../../book/service_container.rst:508
msgid "Service Container"
msgstr "服务容器（Service Container）"

#: ../../book/service_container.rst:8
msgid ""
"A modern PHP application is full of objects. One object may facilitate the "
"delivery of email messages while another may allow you to persist "
"information into a database. In your application, you may create an object "
"that manages your product inventory, or another object that processes data "
"from a third-party API. The point is that a modern application does many "
"things and is organized into many objects that handle each task."
msgstr ""

#: ../../book/service_container.rst:15
msgid ""
"This chapter is about a special PHP object in Symfony that helps you "
"instantiate, organize and retrieve the many objects of your application. "
"This object, called a service container, will allow you to standardize and "
"centralize the way objects are constructed in your application. The "
"container makes your life easier, is super fast, and emphasizes an "
"architecture that promotes reusable and decoupled code. Since all core "
"Symfony classes use the container, you'll learn how to extend, configure and"
" use any object in Symfony. In large part, the service container is the "
"biggest contributor to the speed and extensibility of Symfony."
msgstr ""

#: ../../book/service_container.rst:25
msgid ""
"Finally, configuring and using the service container is easy. By the end of "
"this chapter, you'll be comfortable creating your own objects via the "
"container and customizing objects from any third-party bundle. You'll begin "
"writing code that is more reusable, testable and decoupled, simply because "
"the service container makes writing good code so easy."
msgstr ""

#: ../../book/service_container.rst:33
msgid ""
"If you want to know a lot more after reading this chapter, check out the "
":doc:`DependencyInjection component documentation "
"</components/dependency_injection/introduction>`."
msgstr ""

#: ../../book/service_container.rst:40
msgid "What is a Service?"
msgstr "什么是Service？"

#: ../../book/service_container.rst:42
msgid ""
"Put simply, a :term:`Service` is any PHP object that performs some sort of "
"\"global\" task. It's a purposefully-generic name used in computer science "
"to describe an object that's created for a specific purpose (e.g. delivering"
" emails). Each service is used throughout your application whenever you need"
" the specific functionality it provides. You don't have to do anything "
"special to make a service: simply write a PHP class with some code that "
"accomplishes a specific task. Congratulations, you've just created a "
"service!"
msgstr ""

#: ../../book/service_container.rst:52
msgid ""
"As a rule, a PHP object is a service if it is used globally in your "
"application. A single ``Mailer`` service is used globally to send email "
"messages whereas the many ``Message`` objects that it delivers are *not* "
"services. Similarly, a ``Product`` object is not a service, but an object "
"that persists ``Product`` objects to a database *is* a service."
msgstr ""

#: ../../book/service_container.rst:58
msgid ""
"So what's the big deal then? The advantage of thinking about \"services\" is"
" that you begin to think about separating each piece of functionality in "
"your application into a series of services. Since each service does just one"
" job, you can easily access each service and use its functionality wherever "
"you need it. Each service can also be more easily tested and configured "
"since it's separated from the other functionality in your application. This "
"idea is called `service-oriented architecture`_ and is not unique to Symfony"
" or even PHP. Structuring your application around a set of independent "
"service classes is a well-known and trusted object-oriented best-practice. "
"These skills are key to being a good developer in almost any language."
msgstr ""

#: ../../book/service_container.rst:73
msgid "What is a Service Container?"
msgstr "什么是Service Container？"

#: ../../book/service_container.rst:75
msgid ""
"A :term:`Service Container` (or *dependency injection container*) is simply "
"a PHP object that manages the instantiation of services (i.e. objects)."
msgstr ""

#: ../../book/service_container.rst:78
msgid ""
"For example, suppose you have a simple PHP class that delivers email "
"messages. Without a service container, you must manually create the object "
"whenever you need it::"
msgstr ""

#: ../../book/service_container.rst:87
msgid ""
"This is easy enough. The imaginary ``Mailer`` class allows you to configure "
"the method used to deliver the email messages (e.g. ``sendmail``, ``smtp``, "
"etc). But what if you wanted to use the mailer service somewhere else? You "
"certainly don't want to repeat the mailer configuration *every* time you "
"need to use the ``Mailer`` object. What if you needed to change the "
"``transport`` from ``sendmail`` to ``smtp`` everywhere in the application? "
"You'd need to hunt down every place you create a ``Mailer`` service and "
"change it."
msgstr ""

#: ../../book/service_container.rst:101
msgid "Creating/Configuring Services in the Container"
msgstr "在Container中创建/配置Service"

#: ../../book/service_container.rst:103
msgid ""
"A better answer is to let the service container create the ``Mailer`` object"
" for you. In order for this to work, you must *teach* the container how to "
"create the ``Mailer`` service. This is done via configuration, which can be "
"specified in YAML, XML or PHP:"
msgstr ""

#: ../../book/service_container.rst:112
msgid ""
"When Symfony initializes, it builds the service container using the "
"application configuration (``app/config/config.yml`` by default). The exact "
"file that's loaded is dictated by the "
"``AppKernel::registerContainerConfiguration()`` method, which loads an "
"environment-specific configuration file (e.g. ``config_dev.yml`` for the "
"``dev`` environment or ``config_prod.yml`` for ``prod``)."
msgstr ""

#: ../../book/service_container.rst:119
msgid ""
"An instance of the ``Acme\\HelloBundle\\Mailer`` object is now available via"
" the service container. The container is available in any traditional "
"Symfony controller where you can access the services of the container via "
"the ``get()`` shortcut method::"
msgstr ""

#: ../../book/service_container.rst:136
msgid ""
"When you ask for the ``my_mailer`` service from the container, the container"
" constructs the object and returns it. This is another major advantage of "
"using the service container. Namely, a service is *never* constructed until "
"it's needed. If you define a service and never use it on a request, the "
"service is never created. This saves memory and increases the speed of your "
"application. This also means that there's very little or no performance hit "
"for defining lots of services. Services that are never used are never "
"constructed."
msgstr ""

#: ../../book/service_container.rst:144
msgid ""
"As a bonus, the ``Mailer`` service is only created once and the same "
"instance is returned each time you ask for the service. This is almost "
"always the behavior you'll need (it's more flexible and powerful), but "
"you'll learn later how you can configure a service that has multiple "
"instances in the \":doc:`/cookbook/service_container/scopes`\" cookbook "
"article."
msgstr ""

#: ../../book/service_container.rst:152
msgid ""
"In this example, the controller extends Symfony's base Controller, which "
"gives you access to the service container itself. You can then use the "
"``get`` method to locate and retrieve the ``my_mailer`` service from the "
"service container. You can also define your :doc:`controllers as services "
"</cookbook/controller/service>`. This is a bit more advanced and not "
"necessary, but it allows you to inject only the services you need into your "
"controller."
msgstr ""

#: ../../book/service_container.rst:162
msgid "Service Parameters"
msgstr "Service的参数"

#: ../../book/service_container.rst:164
msgid ""
"The creation of new services (i.e. objects) via the container is pretty "
"straightforward. Parameters make defining services more organized and "
"flexible:"
msgstr ""

#: ../../book/service_container.rst:212
msgid ""
"The end result is exactly the same as before - the difference is only in "
"*how* you defined the service. By surrounding the ``my_mailer.transport`` "
"string in percent (``%``) signs, the container knows to look for a parameter"
" with that name. When the container is built, it looks up the value of each "
"parameter and uses it in the service definition."
msgstr ""

#: ../../book/service_container.rst:220
msgid ""
"If you want to use a string that starts with an ``@`` sign as a parameter "
"value (e.g. a very safe mailer password) in a YAML file, you need to escape "
"it by adding another ``@`` sign (this only applies to the YAML format):"
msgstr ""

#: ../../book/service_container.rst:233
msgid ""
"The percent sign inside a parameter or argument, as part of the string, must"
" be escaped with another percent sign:"
msgstr ""

#: ../../book/service_container.rst:240
msgid ""
"The purpose of parameters is to feed information into services. Of course "
"there was nothing wrong with defining the service without using any "
"parameters. Parameters, however, have several advantages:"
msgstr ""

#: ../../book/service_container.rst:244
msgid ""
"separation and organization of all service \"options\" under a single "
"``parameters`` key;"
msgstr ""

#: ../../book/service_container.rst:247
msgid "parameter values can be used in multiple service definitions;"
msgstr ""

#: ../../book/service_container.rst:249
msgid ""
"when creating a service in a bundle (this follows shortly), using parameters"
" allows the service to be easily customized in your application."
msgstr ""

#: ../../book/service_container.rst:252
msgid ""
"The choice of using or not using parameters is up to you. High-quality "
"third-party bundles will *always* use parameters as they make the service "
"stored in the container more configurable. For the services in your "
"application, however, you may not need the flexibility of parameters."
msgstr ""

#: ../../book/service_container.rst:258
msgid "Array Parameters"
msgstr "数组类型参数"

#: ../../book/service_container.rst:260
msgid ""
"Parameters can also contain array values. See :ref:`component-di-parameters-"
"array`."
msgstr ""

#: ../../book/service_container.rst:263
msgid "Importing other Container Configuration Resources"
msgstr "导入其他Container配置"

#: ../../book/service_container.rst:267
msgid ""
"In this section, service configuration files are referred to as *resources*."
" This is to highlight the fact that, while most configuration resources will"
" be files (e.g. YAML, XML, PHP), Symfony is so flexible that configuration "
"could be loaded from anywhere (e.g. a database or even via an external web "
"service)."
msgstr ""

#: ../../book/service_container.rst:273
msgid ""
"The service container is built using a single configuration resource "
"(``app/config/config.yml`` by default). All other service configuration "
"(including the core Symfony and third-party bundle configuration) must be "
"imported from inside this file in one way or another. This gives you "
"absolute flexibility over the services in your application."
msgstr ""

#: ../../book/service_container.rst:279
msgid ""
"External service configuration can be imported in two different ways. The "
"first - and most common method - is via the ``imports`` directive. Later, "
"you'll learn about the second method, which is the flexible and preferred "
"method for importing service configuration from third-party bundles."
msgstr ""

#: ../../book/service_container.rst:290
msgid "Importing Configuration with ``imports``"
msgstr "使用 ``imports`` 导入"

#: ../../book/service_container.rst:292
msgid ""
"So far, you've placed your ``my_mailer`` service container definition "
"directly in the application configuration file (e.g. "
"``app/config/config.yml``). Of course, since the ``Mailer`` class itself "
"lives inside the AcmeHelloBundle, it makes more sense to put the "
"``my_mailer`` container definition inside the bundle as well."
msgstr ""

#: ../../book/service_container.rst:298
msgid ""
"First, move the ``my_mailer`` container definition into a new container "
"resource file inside AcmeHelloBundle. If the ``Resources`` or "
"``Resources/config`` directories don't exist, create them."
msgstr ""

#: ../../book/service_container.rst:347
msgid ""
"The definition itself hasn't changed, only its location. Of course the "
"service container doesn't know about the new resource file. Fortunately, you"
" can easily import the resource file using the ``imports`` key in the "
"application configuration."
msgstr ""

#: ../../components/dependency_injection/_imports-parameters-note.rst.inc:3
msgid ""
"Due to the way in which parameters are resolved, you cannot use them to "
"build paths in imports dynamically. This means that something like the "
"following doesn't work:"
msgstr ""

#: ../../book/service_container.rst:381
msgid ""
"The ``imports`` directive allows your application to include service "
"container configuration resources from any other location (most commonly "
"from bundles). The ``resource`` location, for files, is the absolute path to"
" the resource file. The special ``@AcmeHelloBundle`` syntax resolves the "
"directory path of the AcmeHelloBundle bundle. This helps you specify the "
"path to the resource without worrying later if you move the AcmeHelloBundle "
"to a different directory."
msgstr ""

#: ../../book/service_container.rst:394
msgid "Importing Configuration via Container Extensions"
msgstr "使用Container扩展导入配置"

#: ../../book/service_container.rst:396
msgid ""
"When developing in Symfony, you'll most commonly use the ``imports`` "
"directive to import container configuration from the bundles you've created "
"specifically for your application. Third-party bundle container "
"configuration, including Symfony core services, are usually loaded using "
"another method that's more flexible and easy to configure in your "
"application."
msgstr ""

#: ../../book/service_container.rst:402
msgid ""
"Here's how it works. Internally, each bundle defines its services very much "
"like you've seen so far. Namely, a bundle uses one or more configuration "
"resource files (usually XML) to specify the parameters and services for that"
" bundle. However, instead of importing each of these resources directly from"
" your application configuration using the ``imports`` directive, you can "
"simply invoke a *service container extension* inside the bundle that does "
"the work for you. A service container extension is a PHP class created by "
"the bundle author to accomplish two things:"
msgstr ""

#: ../../book/service_container.rst:411
msgid ""
"import all service container resources needed to configure the services for "
"the bundle;"
msgstr ""

#: ../../book/service_container.rst:414
msgid ""
"provide semantic, straightforward configuration so that the bundle can be "
"configured without interacting with the flat parameters of the bundle's "
"service container configuration."
msgstr ""

#: ../../book/service_container.rst:418
msgid ""
"In other words, a service container extension configures the services for a "
"bundle on your behalf. And as you'll see in a moment, the extension provides"
" a sensible, high-level interface for configuring the bundle."
msgstr ""

#: ../../book/service_container.rst:422
msgid ""
"Take the FrameworkBundle - the core Symfony framework bundle - as an "
"example. The presence of the following code in your application "
"configuration invokes the service container extension inside the "
"FrameworkBundle:"
msgstr ""

#: ../../book/service_container.rst:472
msgid ""
"When the configuration is parsed, the container looks for an extension that "
"can handle the ``framework`` configuration directive. The extension in "
"question, which lives in the FrameworkBundle, is invoked and the service "
"configuration for the FrameworkBundle is loaded. If you remove the "
"``framework`` key from your application configuration file entirely, the "
"core Symfony services won't be loaded. The point is that you're in control: "
"the Symfony framework doesn't contain any magic or perform any actions that "
"you don't have control over."
msgstr ""

#: ../../book/service_container.rst:481
msgid ""
"Of course you can do much more than simply \"activate\" the service "
"container extension of the FrameworkBundle. Each extension allows you to "
"easily customize the bundle, without worrying about how the internal "
"services are defined."
msgstr ""

#: ../../book/service_container.rst:486
msgid ""
"In this case, the extension allows you to customize the ``error_handler``, "
"``csrf_protection``, ``router`` configuration and much more. Internally, the"
" FrameworkBundle uses the options specified here to define and configure the"
" services specific to it. The bundle takes care of creating all the "
"necessary ``parameters`` and ``services`` for the service container, while "
"still allowing much of the configuration to be easily customized. As a "
"bonus, most service container extensions are also smart enough to perform "
"validation - notifying you of options that are missing or the wrong data "
"type."
msgstr ""

#: ../../book/service_container.rst:495
msgid ""
"When installing or configuring a bundle, see the bundle's documentation for "
"how the services for the bundle should be installed and configured. The "
"options available for the core bundles can be found inside the "
":doc:`Reference Guide </reference/index>`."
msgstr ""

#: ../../book/service_container.rst:501
msgid ""
"Natively, the service container only recognizes the ``parameters``, "
"``services``, and ``imports`` directives. Any other directives are handled "
"by a service container extension."
msgstr ""

#: ../../book/service_container.rst:505
msgid ""
"If you want to expose user friendly configuration in your own bundles, read "
"the \":doc:`/cookbook/bundles/extension`\" cookbook recipe."
msgstr ""

#: ../../book/service_container.rst:512
msgid "Referencing (Injecting) Services"
msgstr "引用（注入）Service"

#: ../../book/service_container.rst:514
msgid ""
"So far, the original ``my_mailer`` service is simple: it takes just one "
"argument in its constructor, which is easily configurable. As you'll see, "
"the real power of the container is realized when you need to create a "
"service that depends on one or more other services in the container."
msgstr ""

#: ../../book/service_container.rst:519
msgid ""
"As an example, suppose you have a new service, ``NewsletterManager``, that "
"helps to manage the preparation and delivery of an email message to a "
"collection of addresses. Of course the ``my_mailer`` service is already "
"really good at delivering email messages, so you'll use it inside "
"``NewsletterManager`` to handle the actual delivery of the messages. This "
"pretend class might look something like this::"
msgstr ""

#: ../../book/service_container.rst:543
msgid ""
"Without using the service container, you can create a new "
"``NewsletterManager`` fairly easily from inside a controller::"
msgstr ""

#: ../../book/service_container.rst:557
msgid ""
"This approach is fine, but what if you decide later that the "
"``NewsletterManager`` class needs a second or third constructor argument? "
"What if you decide to refactor your code and rename the class? In both "
"cases, you'd need to find every place where the ``NewsletterManager`` is "
"instantiated and modify it. Of course, the service container gives you a "
"much more appealing option:"
msgstr ""

#: ../../book/service_container.rst:609
msgid ""
"In YAML, the special ``@my_mailer`` syntax tells the container to look for a"
" service named ``my_mailer`` and to pass that object into the constructor of"
" ``NewsletterManager``. In this case, however, the specified service "
"``my_mailer`` must exist. If it does not, an exception will be thrown. You "
"can mark your dependencies as optional - this will be discussed in the next "
"section."
msgstr ""

#: ../../book/service_container.rst:615
msgid ""
"Using references is a very powerful tool that allows you to create "
"independent service classes with well-defined dependencies. In this example,"
" the ``newsletter_manager`` service needs the ``my_mailer`` service in order"
" to function. When you define this dependency in the service container, the "
"container takes care of all the work of instantiating the classes."
msgstr ""

#: ../../book/service_container.rst:624
msgid "Using the Expression Language"
msgstr "使用表达式"

#: ../../book/service_container.rst:626
msgid ""
"The service container also supports an \"expression\" that allows you to "
"inject very specific values into a service."
msgstr ""

#: ../../book/service_container.rst:629
msgid ""
"For example, suppose you have a third service (not shown here), called "
"``mailer_configuration``, which has a ``getMailerMethod()`` method on it, "
"which will return a string like ``sendmail`` based on some configuration. "
"Remember that the first argument to the ``my_mailer`` service is the simple "
"string ``sendmail``:"
msgstr ""

#: ../../book/service_container.rst:636
msgid ""
"But instead of hardcoding this, how could we get this value from the "
"``getMailerMethod()`` of the new ``mailer_configuration`` service? One way "
"is to use an expression:"
msgstr ""

#: ../../book/service_container.rst:677
msgid ""
"To learn more about the expression language syntax, see "
":doc:`/components/expression_language/syntax`."
msgstr ""

#: ../../book/service_container.rst:679
msgid "In this context, you have access to 2 functions:"
msgstr ""

#: ../../book/service_container.rst:681
msgid "``service``"
msgstr ""

#: ../../book/service_container.rst:682
msgid "Returns a given service (see the example above)."
msgstr ""

#: ../../book/service_container.rst:684
msgid "``parameter``"
msgstr ""

#: ../../book/service_container.rst:684
msgid "Returns a specific parameter value (syntax is just like ``service``)."
msgstr ""

#: ../../book/service_container.rst:686
msgid ""
"You also have access to the "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder` via"
" a ``container`` variable. Here's another example:"
msgstr ""

#: ../../book/service_container.rst:726
msgid ""
"Expressions can be used in ``arguments``, ``properties``, as arguments with "
"``configurator`` and as arguments to ``calls`` (method calls)."
msgstr ""

#: ../../book/service_container.rst:730
msgid "Optional Dependencies: Setter Injection"
msgstr "可选依赖：使用Setter方式注入"

#: ../../book/service_container.rst:732
msgid ""
"Injecting dependencies into the constructor in this manner is an excellent "
"way of ensuring that the dependency is available to use. If you have "
"optional dependencies for a class, then \"setter injection\" may be a better"
" option. This means injecting the dependency using a method call rather than"
" through the constructor. The class would look like this::"
msgstr ""

#: ../../book/service_container.rst:754
msgid ""
"Injecting the dependency by the setter method just needs a change of syntax:"
msgstr ""

#: ../../book/service_container.rst:808
msgid ""
"The approaches presented in this section are called \"constructor "
"injection\" and \"setter injection\". The Symfony service container also "
"supports \"property injection\"."
msgstr ""

#: ../../book/service_container.rst:815
msgid "Injecting the Request"
msgstr "注入Request"

#: ../../book/service_container.rst:817
msgid ""
"As of Symfony 2.4, instead of injecting the ``request`` service, you should "
"inject the ``request_stack`` service and access the ``Request`` by calling "
"the "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\RequestStack::getCurrentRequest`"
" method::"
msgstr ""

#: ../../book/service_container.rst:844
msgid ""
"Now, just inject the ``request_stack``, which behaves like any normal "
"service:"
msgstr ""

#: ../../book/service_container.rst:0
msgid "Why not Inject the ``request`` Service?"
msgstr "为什么不直接注入 ``request`` Service？"

#: ../../book/service_container.rst:888
msgid ""
"Almost all Symfony2 built-in services behave in the same way: a single "
"instance is created by the container which it returns whenever you get it or"
" when it is injected into another service. There is one exception in a "
"standard Symfony2 application: the ``request`` service."
msgstr ""

#: ../../book/service_container.rst:893
msgid ""
"If you try to inject the ``request`` into a service, you will probably "
"receive a "
":class:`Symfony\\\\Component\\\\DependencyInjection\\\\Exception\\\\ScopeWideningInjectionException`"
" exception. That's because the ``request`` can **change** during the life-"
"time of a container (when a sub-request is created for instance)."
msgstr ""

#: ../../book/service_container.rst:902
msgid ""
"If you define a controller as a service then you can get the ``Request`` "
"object without injecting the container by having it passed in as an argument"
" of your action method. See :ref:`book-controller-request-argument` for "
"details."
msgstr ""

#: ../../book/service_container.rst:908
msgid "Making References optional"
msgstr "创建可选依赖"

#: ../../book/service_container.rst:910
msgid ""
"Sometimes, one of your services may have an optional dependency, meaning "
"that the dependency is not required for your service to work properly. In "
"the example above, the ``my_mailer`` service *must* exist, otherwise an "
"exception will be thrown. By modifying the ``newsletter_manager`` service "
"definition, you can make this reference optional. The container will then "
"inject it if it exists and do nothing if it doesn't:"
msgstr ""

#: ../../book/service_container.rst:966
msgid ""
"In YAML, the special ``@?`` syntax tells the service container that the "
"dependency is optional. Of course, the ``NewsletterManager`` must also be "
"rewritten to allow for an optional dependency::"
msgstr ""

#: ../../book/service_container.rst:976
msgid "Core Symfony and Third-Party Bundle Services"
msgstr "Symfony内置和第三方Bundle的Service"

#: ../../book/service_container.rst:978
msgid ""
"Since Symfony and all third-party bundles configure and retrieve their "
"services via the container, you can easily access them or even use them in "
"your own services. To keep things simple, Symfony by default does not "
"require that controllers be defined as services. Furthermore, Symfony "
"injects the entire service container into your controller. For example, to "
"handle the storage of information on a user's session, Symfony provides a "
"``session`` service, which you can access inside a standard controller as "
"follows::"
msgstr ""

#: ../../book/service_container.rst:994
msgid ""
"In Symfony, you'll constantly use services provided by the Symfony core or "
"other third-party bundles to perform tasks such as rendering templates "
"(``templating``), sending emails (``mailer``), or accessing information on "
"the request (``request``)."
msgstr ""

#: ../../book/service_container.rst:998
msgid ""
"You can take this a step further by using these services inside services "
"that you've created for your application. Beginning by modifying the "
"``NewsletterManager`` to use the real Symfony ``mailer`` service (instead of"
" the pretend ``my_mailer``). Also pass the templating engine service to the "
"``NewsletterManager`` so that it can generate the email content via a "
"template::"
msgstr ""

#: ../../book/service_container.rst:1025
msgid "Configuring the service container is easy:"
msgstr ""

#: ../../book/service_container.rst:1063
msgid ""
"The ``newsletter_manager`` service now has access to the core ``mailer`` and"
" ``templating`` services. This is a common way to create services specific "
"to your application that leverage the power of different services within the"
" framework."
msgstr ""

#: ../../book/service_container.rst:1070
msgid ""
"Be sure that the ``swiftmailer`` entry appears in your application "
"configuration. As was mentioned in :ref:`service-container-extension-"
"configuration`, the ``swiftmailer`` key invokes the service extension from "
"the SwiftmailerBundle, which registers the ``mailer`` service."
msgstr ""

#: ../../book/service_container.rst:1078
msgid "Tags"
msgstr ""

#: ../../book/service_container.rst:1080
msgid ""
"In the same way that a blog post on the Web might be tagged with things such"
" as \"Symfony\" or \"PHP\", services configured in your container can also "
"be tagged. In the service container, a tag implies that the service is meant"
" to be used for a specific purpose. Take the following example:"
msgstr ""

#: ../../book/service_container.rst:1125
msgid ""
"The ``twig.extension`` tag is a special tag that the TwigBundle uses during "
"configuration. By giving the service this ``twig.extension`` tag, the bundle"
" knows that the ``foo.twig.extension`` service should be registered as a "
"Twig extension with Twig. In other words, Twig finds all services tagged "
"with ``twig.extension`` and automatically registers them as extensions."
msgstr ""

#: ../../book/service_container.rst:1131
msgid ""
"Tags, then, are a way to tell Symfony or other third-party bundles that your"
" service should be registered or used in some special way by the bundle."
msgstr ""

#: ../../book/service_container.rst:1134
msgid ""
"For a list of all the tags available in the core Symfony Framework, check "
"out :doc:`/reference/dic_tags`. Each of these has a different effect on your"
" service and many tags require additional arguments (beyond just the "
"``name`` parameter)."
msgstr ""

#: ../../book/service_container.rst:1140
msgid "Debugging Services"
msgstr "Service调试"

#: ../../book/service_container.rst:1142
msgid ""
"You can find out what services are registered with the container using the "
"console. To show all services and the class for each service, run:"
msgstr ""

#: ../../book/service_container.rst:1149
msgid "Prior to Symfony 2.6, this command was called ``container:debug``."
msgstr ""

#: ../../book/service_container.rst:1152
msgid ""
"By default, only public services are shown, but you can also view private "
"services:"
msgstr ""

#: ../../book/service_container.rst:1160
msgid ""
"If a private service is only used as an argument to just *one* other "
"service, it won't be displayed by the ``debug:container`` command, even when"
" using the ``--show-private`` option. See :ref:`Inline Private Services "
"<inlined-private-services>` for more details."
msgstr ""

#: ../../book/service_container.rst:1165
msgid ""
"You can get more detailed information about a particular service by "
"specifying its id:"
msgstr ""

#: ../../book/service_container.rst:1173
msgid "Learn more"
msgstr "了解更多"

#: ../../book/service_container.rst:1175
msgid ":doc:`/components/dependency_injection/parameters`"
msgstr ""

#: ../../book/service_container.rst:1176
msgid ":doc:`/components/dependency_injection/compilation`"
msgstr ""

#: ../../book/service_container.rst:1177
msgid ":doc:`/components/dependency_injection/definitions`"
msgstr ""

#: ../../book/service_container.rst:1178
msgid ":doc:`/components/dependency_injection/factories`"
msgstr ""

#: ../../book/service_container.rst:1179
msgid ":doc:`/components/dependency_injection/parentservices`"
msgstr ""

#: ../../book/service_container.rst:1180
msgid ":doc:`/components/dependency_injection/tags`"
msgstr ""

#: ../../book/service_container.rst:1181
msgid ":doc:`/cookbook/controller/service`"
msgstr ""

#: ../../book/service_container.rst:1182
msgid ":doc:`/cookbook/service_container/scopes`"
msgstr ""

#: ../../book/service_container.rst:1183
msgid ":doc:`/cookbook/service_container/compiler_passes`"
msgstr ""

#: ../../book/service_container.rst:1184
msgid ":doc:`/components/dependency_injection/advanced`"
msgstr ""

#: ../../book/service_container.rst:1
msgid "DependencyInjection"
msgstr ""

#: ../../book/service_container.rst:1
msgid "Container"
msgstr ""

#: ../../book/service_container.rst:36
msgid "What is a service?"
msgstr ""

#: ../../book/service_container.rst:69
msgid "What is a service container?"
msgstr ""

#: ../../book/service_container.rst:95
msgid "Configuring services"
msgstr ""

#: ../../book/service_container.rst:284
msgid "Imports"
msgstr ""

#: ../../book/service_container.rst:388
msgid "Extension configuration"
msgstr ""

#: ../../book/service_container.rst:508
msgid "Referencing services"
msgstr ""
