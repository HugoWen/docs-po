# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../book/doctrine.rst:5
msgid "Databases and Doctrine"
msgstr ""

#: ../../book/doctrine.rst:7
msgid ""
"One of the most common and challenging tasks for any application involves "
"persisting and reading information to and from a database. Although the "
"Symfony full-stack framework doesn't integrate any ORM by default, the "
"Symfony Standard Edition, which is the most widely used distribution, comes "
"integrated with `Doctrine`_, a library whose sole goal is to give you "
"powerful tools to make this easy. In this chapter, you'll learn the basic "
"philosophy behind Doctrine and see how easy working with a database can be."
msgstr ""

#: ../../book/doctrine.rst:18
msgid ""
"Doctrine is totally decoupled from Symfony and using it is optional. This "
"chapter is all about the Doctrine ORM, which aims to let you map objects to "
"a relational database (such as *MySQL*, *PostgreSQL* or *Microsoft SQL*). If"
" you prefer to use raw database queries, this is easy, and explained in the "
"\":doc:`/cookbook/doctrine/dbal`\" cookbook entry."
msgstr ""

#: ../../book/doctrine.rst:24
msgid ""
"You can also persist data to `MongoDB`_ using Doctrine ODM library. For more"
" information, read the \"`DoctrineMongoDBBundle`_\" documentation."
msgstr ""

#: ../../book/doctrine.rst:29
msgid "A Simple Example: A Product"
msgstr ""

#: ../../book/doctrine.rst:31
msgid ""
"The easiest way to understand how Doctrine works is to see it in action. In "
"this section, you'll configure your database, create a ``Product`` object, "
"persist it to the database and fetch it back out."
msgstr ""

#: ../../book/doctrine.rst:36
msgid "Configuring the Database"
msgstr ""

#: ../../book/doctrine.rst:38
msgid ""
"Before you really begin, you'll need to configure your database connection "
"information. By convention, this information is usually configured in an "
"``app/config/parameters.yml`` file:"
msgstr ""

#: ../../book/doctrine.rst:56
msgid ""
"Defining the configuration via ``parameters.yml`` is just a convention. The "
"parameters defined in that file are referenced by the main configuration "
"file when setting up Doctrine:"
msgstr ""

#: ../../book/doctrine.rst:108
msgid ""
"By separating the database information into a separate file, you can easily "
"keep different versions of the file on each server. You can also easily "
"store database configuration (or any sensitive information) outside of your "
"project, like inside your Apache configuration, for example. For more "
"information, see :doc:`/cookbook/configuration/external_parameters`."
msgstr ""

#: ../../book/doctrine.rst:114
msgid ""
"Now that Doctrine knows about your database, you can have it create the "
"database for you:"
msgstr ""

#: ../../book/doctrine.rst:0
msgid "Setting up the Database to be UTF8"
msgstr ""

#: ../../book/doctrine.rst:123
msgid ""
"One mistake even seasoned developers make when starting a Symfony project is"
" forgetting to set up default charset and collation on their database, "
"ending up with latin type collations, which are default for most databases. "
"They might even remember to do it the very first time, but forget that it's "
"all gone after running a relatively common command during development:"
msgstr ""

#: ../../book/doctrine.rst:134
msgid ""
"There's no way to configure these defaults inside Doctrine, as it tries to "
"be as agnostic as possible in terms of environment configuration. One way to"
" solve this problem is to configure server-level defaults."
msgstr ""

#: ../../book/doctrine.rst:138
msgid ""
"Setting UTF8 defaults for MySQL is as simple as adding a few lines to your "
"configuration file  (typically ``my.cnf``):"
msgstr ""

#: ../../book/doctrine.rst:149
msgid ""
"If you want to use SQLite as your database, you need to set the path where "
"your database file should be stored:"
msgstr ""

#: ../../book/doctrine.rst:195
msgid "Creating an Entity Class"
msgstr ""

#: ../../book/doctrine.rst:197
msgid ""
"Suppose you're building an application where products need to be displayed. "
"Without even thinking about Doctrine or databases, you already know that you"
" need a ``Product`` object to represent those products. Create this class "
"inside the ``Entity`` directory of your AppBundle::"
msgstr ""

#: ../../book/doctrine.rst:212
msgid ""
"The class - often called an \"entity\", meaning *a basic class that holds "
"data* - is simple and helps fulfill the business requirement of needing "
"products in your application. This class can't be persisted to a database "
"yet - it's just a simple PHP class."
msgstr ""

#: ../../book/doctrine.rst:219
msgid ""
"Once you learn the concepts behind Doctrine, you can have Doctrine create "
"simple entity classes for you. This will ask you interactive questions to "
"help you build any entity:"
msgstr ""

#: ../../book/doctrine.rst:233
msgid "Add Mapping Information"
msgstr ""

#: ../../book/doctrine.rst:235
msgid ""
"Doctrine allows you to work with databases in a much more interesting way "
"than just fetching rows of a column-based table into an array. Instead, "
"Doctrine allows you to persist entire *objects* to the database and fetch "
"entire objects out of the database. This works by mapping a PHP class to a "
"database table, and the properties of that PHP class to columns on the "
"table:"
msgstr ""

#: ../../book/doctrine.rst:244
msgid ""
"For Doctrine to be able to do this, you just have to create \"metadata\", or"
" configuration that tells Doctrine exactly how the ``Product`` class and its"
" properties should be *mapped* to the database. This metadata can be "
"specified in a number of different formats including YAML, XML or directly "
"inside the ``Product`` class via annotations:"
msgstr ""

#: ../../book/doctrine.rst:329
msgid ""
"A bundle can accept only one metadata definition format. For example, it's "
"not possible to mix YAML metadata definitions with annotated PHP entity "
"class definitions."
msgstr ""

#: ../../book/doctrine.rst:335
msgid ""
"The table name is optional and if omitted, will be determined automatically "
"based on the name of the entity class."
msgstr ""

#: ../../book/doctrine.rst:338
msgid ""
"Doctrine allows you to choose from a wide variety of different field types, "
"each with their own options. For information on the available field types, "
"see the :ref:`book-doctrine-field-types` section."
msgstr ""

#: ../../book/doctrine.rst:344
msgid ""
"You can also check out Doctrine's `Basic Mapping Documentation`_ for all "
"details about mapping information. If you use annotations, you'll need to "
"prepend all annotations with ``ORM\\`` (e.g. ``ORM\\Column(...)``), which is"
" not shown in Doctrine's documentation. You'll also need to include the "
"``use Doctrine\\ORM\\Mapping as ORM;`` statement, which *imports* the "
"``ORM`` annotations prefix."
msgstr ""

#: ../../book/doctrine.rst:353
msgid ""
"Be careful that your class name and properties aren't mapped to a protected "
"SQL keyword (such as ``group`` or ``user``). For example, if your entity "
"class name is ``Group``, then, by default, your table name will be "
"``group``, which will cause an SQL error in some engines. See Doctrine's "
"`Reserved SQL keywords documentation`_ on how to properly escape these "
"names. Alternatively, if you're free to choose your database schema, simply "
"map to a different table name or column name. See Doctrine's `Persistent "
"classes`_ and `Property Mapping`_ documentation."
msgstr ""

#: ../../book/doctrine.rst:364
msgid ""
"When using another library or program (e.g. Doxygen) that uses annotations, "
"you should place the ``@IgnoreAnnotation`` annotation on the class to "
"indicate which annotations Symfony should ignore."
msgstr ""

#: ../../book/doctrine.rst:368
msgid ""
"For example, to prevent the ``@fn`` annotation from throwing an exception, "
"add the following::"
msgstr ""

#: ../../book/doctrine.rst:380
msgid "Generating Getters and Setters"
msgstr ""

#: ../../book/doctrine.rst:382
msgid ""
"Even though Doctrine now knows how to persist a ``Product`` object to the "
"database, the class itself isn't really useful yet. Since ``Product`` is "
"just a regular PHP class, you need to create getter and setter methods (e.g."
" ``getName()``, ``setName()``) in order to access its properties (since the "
"properties are ``protected``). Fortunately, Doctrine can do this for you by "
"running:"
msgstr ""

#: ../../book/doctrine.rst:392
msgid ""
"This command makes sure that all the getters and setters are generated for "
"the ``Product`` class. This is a safe command - you can run it over and over"
" again: it only generates getters and setters that don't exist (i.e. it "
"doesn't replace your existing methods)."
msgstr ""

#: ../../book/doctrine.rst:399
msgid ""
"Keep in mind that Doctrine's entity generator produces simple "
"getters/setters. You should check generated entities and adjust "
"getter/setter logic to your own needs."
msgstr ""

#: ../../book/doctrine.rst:0
msgid "More about ``doctrine:generate:entities``"
msgstr ""

#: ../../book/doctrine.rst:405
msgid "With the ``doctrine:generate:entities`` command you can:"
msgstr ""

#: ../../book/doctrine.rst:407
msgid "generate getters and setters;"
msgstr ""

#: ../../book/doctrine.rst:409
msgid ""
"generate repository classes configured with the "
"``@ORM\\Entity(repositoryClass=\"...\")`` annotation;"
msgstr ""

#: ../../book/doctrine.rst:412
msgid "generate the appropriate constructor for 1:n and n:m relations."
msgstr ""

#: ../../book/doctrine.rst:414
msgid ""
"The ``doctrine:generate:entities`` command saves a backup of the original "
"``Product.php`` named ``Product.php~``. In some cases, the presence of this "
"file can cause a \"Cannot redeclare class\" error. It can be safely removed."
" You can also use the ``--no-backup`` option to prevent generating these "
"backup files."
msgstr ""

#: ../../book/doctrine.rst:420
msgid ""
"Note that you don't *need* to use this command. Doctrine doesn't rely on "
"code generation. Like with normal PHP classes, you just need to make sure "
"that your protected/private properties have getter and setter methods. Since"
" this is a common thing to do when using Doctrine, this command was created."
msgstr ""

#: ../../book/doctrine.rst:426
msgid ""
"You can also generate all known entities (i.e. any PHP class with Doctrine "
"mapping information) of a bundle or an entire namespace:"
msgstr ""

#: ../../book/doctrine.rst:439
msgid ""
"Doctrine doesn't care whether your properties are ``protected`` or "
"``private``, or whether you have a getter or setter function for a property."
" The getters and setters are generated here only because you'll need them to"
" interact with your PHP object."
msgstr ""

#: ../../book/doctrine.rst:447
msgid "Creating the Database Tables/Schema"
msgstr ""

#: ../../book/doctrine.rst:449
msgid ""
"You now have a usable ``Product`` class with mapping information so that "
"Doctrine knows exactly how to persist it. Of course, you don't yet have the "
"corresponding ``product`` table in your database. Fortunately, Doctrine can "
"automatically create all the database tables needed for every known entity "
"in your application. To do this, run:"
msgstr ""

#: ../../book/doctrine.rst:461
msgid ""
"Actually, this command is incredibly powerful. It compares what your "
"database *should* look like (based on the mapping information of your "
"entities) with how it *actually* looks, and generates the SQL statements "
"needed to *update* the database to where it should be. In other words, if "
"you add a new property with mapping metadata to ``Product`` and run this "
"task again, it will generate the \"alter table\" statement needed to add "
"that new column to the existing ``product`` table."
msgstr ""

#: ../../book/doctrine.rst:469
msgid ""
"An even better way to take advantage of this functionality is via "
"`migrations`_, which allow you to generate these SQL statements and store "
"them in migration classes that can be run systematically on your production "
"server in order to track and migrate your database schema safely and "
"reliably."
msgstr ""

#: ../../book/doctrine.rst:475
msgid ""
"Your database now has a fully-functional ``product`` table with columns that"
" match the metadata you've specified."
msgstr ""

#: ../../book/doctrine.rst:479
msgid "Persisting Objects to the Database"
msgstr ""

#: ../../book/doctrine.rst:481
msgid ""
"Now that you have a mapped ``Product`` entity and corresponding ``product`` "
"table, you're ready to persist data to the database. From inside a "
"controller, this is pretty easy. Add the following method to the "
"``DefaultController`` of the bundle::"
msgstr ""

#: ../../book/doctrine.rst:511
msgid ""
"If you're following along with this example, you'll need to create a route "
"that points to this action to see it work."
msgstr ""

#: ../../book/doctrine.rst:516
msgid ""
"This article shows working with Doctrine from within a controller by using "
"the "
":method:`Symfony\\\\Bundle\\\\FrameworkBundle\\\\Controller\\\\Controller::getDoctrine`"
" method of the controller. This method is a shortcut to get the ``doctrine``"
" service. You can work with Doctrine anywhere else by injecting that service"
" in the service. See :doc:`/book/service_container` for more on creating "
"your own services."
msgstr ""

#: ../../book/doctrine.rst:523
msgid "Take a look at the previous example in more detail:"
msgstr ""

#: ../../book/doctrine.rst:525
msgid ""
"**lines 10-13** In this section, you instantiate and work with the "
"``$product`` object like any other, normal PHP object."
msgstr ""

#: ../../book/doctrine.rst:528
msgid ""
"**line 15** This line fetches Doctrine's *entity manager* object, which is "
"responsible for handling the process of persisting and fetching objects to "
"and from the database."
msgstr ""

#: ../../book/doctrine.rst:532
msgid ""
"**line 16** The ``persist()`` method tells Doctrine to \"manage\" the "
"``$product`` object. This does not actually cause a query to be made to the "
"database (yet)."
msgstr ""

#: ../../book/doctrine.rst:535
msgid ""
"**line 17** When the ``flush()`` method is called, Doctrine looks through "
"all of the objects that it's managing to see if they need to be persisted to"
" the database. In this example, the ``$product`` object has not been "
"persisted yet, so the entity manager executes an ``INSERT`` query and a row "
"is created in the ``product`` table."
msgstr ""

#: ../../book/doctrine.rst:543
msgid ""
"In fact, since Doctrine is aware of all your managed entities, when you call"
" the ``flush()`` method, it calculates an overall changeset and executes the"
" queries in the correct order. It utilizes cached prepared statement to "
"slightly improve the performance. For example, if you persist a total of 100"
" ``Product`` objects and then subsequently call ``flush()``, Doctrine will "
"execute 100 ``INSERT`` queries using a single prepared statement object."
msgstr ""

#: ../../book/doctrine.rst:550
msgid ""
"When creating or updating objects, the workflow is always the same. In the "
"next section, you'll see how Doctrine is smart enough to automatically issue"
" an ``UPDATE`` query if the record already exists in the database."
msgstr ""

#: ../../book/doctrine.rst:556
msgid ""
"Doctrine provides a library that allows you to programmatically load testing"
" data into your project (i.e. \"fixture data\"). For information, see the "
"\"`DoctrineFixturesBundle`_\" documentation."
msgstr ""

#: ../../book/doctrine.rst:561
msgid "Fetching Objects from the Database"
msgstr ""

#: ../../book/doctrine.rst:563
msgid ""
"Fetching an object back out of the database is even easier. For example, "
"suppose you've configured a route to display a specific ``Product`` based on"
" its ``id`` value::"
msgstr ""

#: ../../book/doctrine.rst:584
msgid ""
"You can achieve the equivalent of this without writing any code by using the"
" ``@ParamConverter`` shortcut. See the `FrameworkExtraBundle documentation`_"
" for more details."
msgstr ""

#: ../../book/doctrine.rst:588
msgid ""
"When you query for a particular type of object, you always use what's known "
"as its \"repository\". You can think of a repository as a PHP class whose "
"only job is to help you fetch entities of a certain class. You can access "
"the repository object for an entity class via::"
msgstr ""

#: ../../book/doctrine.rst:598
msgid ""
"The ``AppBundle:Product`` string is a shortcut you can use anywhere in "
"Doctrine instead of the full class name of the entity (i.e. "
"``AppBundle\\Entity\\Product``). As long as your entity lives under the "
"``Entity`` namespace of your bundle, this will work."
msgstr ""

#: ../../book/doctrine.rst:603
msgid ""
"Once you have your repository, you have access to all sorts of helpful "
"methods::"
msgstr ""

#: ../../book/doctrine.rst:620
msgid ""
"Of course, you can also issue complex queries, which you'll learn more about"
" in the :ref:`book-doctrine-queries` section."
msgstr ""

#: ../../book/doctrine.rst:623
msgid ""
"You can also take advantage of the useful ``findBy`` and ``findOneBy`` "
"methods to easily fetch objects based on multiple conditions::"
msgstr ""

#: ../../book/doctrine.rst:639
msgid ""
"When you render any page, you can see how many queries were made in the "
"bottom right corner of the web debug toolbar."
msgstr ""

#: ../../book/doctrine.rst:647
msgid ""
"If you click the icon, the profiler will open, showing you the exact queries"
" that were made."
msgstr ""

#: ../../book/doctrine.rst:650
msgid ""
"The icon will turn yellow if there were more than 50 queries on the page. "
"This could indicate that something is not correct."
msgstr ""

#: ../../book/doctrine.rst:654
msgid "Updating an Object"
msgstr ""

#: ../../book/doctrine.rst:656
msgid ""
"Once you've fetched an object from Doctrine, updating it is easy. Suppose "
"you have a route that maps a product id to an update action in a "
"controller::"
msgstr ""

#: ../../book/doctrine.rst:676
msgid "Updating an object involves just three steps:"
msgstr ""

#: ../../book/doctrine.rst:678
msgid "fetching the object from Doctrine;"
msgstr ""

#: ../../book/doctrine.rst:679
msgid "modifying the object;"
msgstr ""

#: ../../book/doctrine.rst:680
msgid "calling ``flush()`` on the entity manager"
msgstr ""

#: ../../book/doctrine.rst:682
msgid ""
"Notice that calling ``$em->persist($product)`` isn't necessary. Recall that "
"this method simply tells Doctrine to manage or \"watch\" the ``$product`` "
"object. In this case, since you fetched the ``$product`` object from "
"Doctrine, it's already managed."
msgstr ""

#: ../../book/doctrine.rst:688
msgid "Deleting an Object"
msgstr ""

#: ../../book/doctrine.rst:690
msgid ""
"Deleting an object is very similar, but requires a call to the ``remove()`` "
"method of the entity manager::"
msgstr ""

#: ../../book/doctrine.rst:696
msgid ""
"As you might expect, the ``remove()`` method notifies Doctrine that you'd "
"like to remove the given object from the database. The actual ``DELETE`` "
"query, however, isn't actually executed until the ``flush()`` method is "
"called."
msgstr ""

#: ../../book/doctrine.rst:703
msgid "Querying for Objects"
msgstr ""

#: ../../book/doctrine.rst:705
msgid ""
"You've already seen how the repository object allows you to run basic "
"queries without any work::"
msgstr ""

#: ../../book/doctrine.rst:712
msgid ""
"Of course, Doctrine also allows you to write more complex queries using the "
"Doctrine Query Language (DQL). DQL is similar to SQL except that you should "
"imagine that you're querying for one or more objects of an entity class "
"(e.g. ``Product``) instead of querying for rows on a table (e.g. "
"``product``)."
msgstr ""

#: ../../book/doctrine.rst:717
msgid ""
"When querying in Doctrine, you have two options: writing pure Doctrine "
"queries or using Doctrine's Query Builder."
msgstr ""

#: ../../book/doctrine.rst:721
msgid "Querying for Objects Using Doctrine's Query Builder"
msgstr ""

#: ../../book/doctrine.rst:723
msgid ""
"Imagine that you want to query for products, but only return products that "
"cost more than ``19.99``, ordered from cheapest to most expensive. You can "
"use Doctrine's ``QueryBuilder`` for this::"
msgstr ""

#: ../../book/doctrine.rst:738
msgid ""
"The ``QueryBuilder`` object contains every method necessary to build your "
"query. By calling the ``getQuery()`` method, the query builder returns a "
"normal ``Query`` object, which can be used to get the result of the query."
msgstr ""

#: ../../book/doctrine.rst:744
msgid ""
"Take note of the ``setParameter()`` method. When working with Doctrine, it's"
" always a good idea to set any external values as \"placeholders\" "
"(``:price`` in the example above) as it prevents SQL injection attacks."
msgstr ""

#: ../../book/doctrine.rst:748
msgid ""
"The ``getResult()`` method returns an array of results. To get only one "
"result, you can use ``getSingleResult()`` (which throws an exception if "
"there is no result) or ``getOneOrNullResult()``::"
msgstr ""

#: ../../book/doctrine.rst:754
msgid ""
"For more information on Doctrine's Query Builder, consult Doctrine's `Query "
"Builder`_ documentation."
msgstr ""

#: ../../book/doctrine.rst:758
msgid "Querying for Objects with DQL"
msgstr ""

#: ../../book/doctrine.rst:760
msgid ""
"Instead of using the ``QueryBuilder``, you can alternatively write the "
"queries directly using DQL::"
msgstr ""

#: ../../book/doctrine.rst:773
msgid ""
"If you're comfortable with SQL, then DQL should feel very natural. The "
"biggest difference is that you need to think in terms of \"objects\" instead"
" of rows in a database. For this reason, you select *from* the "
"``AppBundle:Product`` *object* and then alias it as ``p`` (as you see, this "
"is equal to what you already did in the previous section)."
msgstr ""

#: ../../book/doctrine.rst:779
msgid ""
"The DQL syntax is incredibly powerful, allowing you to easily join between "
"entities (the topic of :ref:`relations <book-doctrine-relations>` will be "
"covered later), group, etc. For more information, see the official `Doctrine"
" Query Language`_ documentation."
msgstr ""

#: ../../book/doctrine.rst:787
msgid "Custom Repository Classes"
msgstr ""

#: ../../book/doctrine.rst:789
msgid ""
"In the previous sections, you began constructing and using more complex "
"queries from inside a controller. In order to isolate, test and reuse these "
"queries, it's a good practice to create a custom repository class for your "
"entity and add methods with your query logic there."
msgstr ""

#: ../../book/doctrine.rst:794
msgid ""
"To do this, add the name of the repository class to your mapping definition:"
msgstr ""

#: ../../book/doctrine.rst:838
msgid ""
"Doctrine can generate the repository class for you by running the same "
"command used earlier to generate the missing getter and setter methods:"
msgstr ""

#: ../../book/doctrine.rst:845
msgid ""
"Next, add a new method - ``findAllOrderedByName()`` - to the newly generated"
" repository class. This method will query for all the ``Product`` entities, "
"ordered alphabetically."
msgstr ""

#: ../../book/doctrine.rst:870
msgid ""
"The entity manager can be accessed via ``$this->getEntityManager()`` from "
"inside the repository."
msgstr ""

#: ../../book/doctrine.rst:873
msgid ""
"You can use this new method just like the default finder methods of the "
"repository::"
msgstr ""

#: ../../book/doctrine.rst:881
msgid ""
"When using a custom repository class, you still have access to the default "
"finder methods such as ``find()`` and ``findAll()``."
msgstr ""

#: ../../book/doctrine.rst:887
msgid "Entity Relationships/Associations"
msgstr ""

#: ../../book/doctrine.rst:889
msgid ""
"Suppose that the products in your application all belong to exactly one "
"\"category\". In this case, you'll need a ``Category`` object and a way to "
"relate a ``Product`` object to a ``Category`` object. Start by creating the "
"``Category`` entity. Since you know that you'll eventually need to persist "
"the class through Doctrine, you can let Doctrine create the class for you."
msgstr ""

#: ../../book/doctrine.rst:901
msgid ""
"This task generates the ``Category`` entity for you, with an ``id`` field, a"
" ``name`` field and the associated getter and setter functions."
msgstr ""

#: ../../book/doctrine.rst:905
msgid "Relationship Mapping Metadata"
msgstr ""

#: ../../book/doctrine.rst:907
msgid ""
"To relate the ``Category`` and ``Product`` entities, start by creating a "
"``products`` property on the ``Category`` class:"
msgstr ""

#: ../../book/doctrine.rst:970
msgid ""
"First, since a ``Category`` object will relate to many ``Product`` objects, "
"a ``products`` array property is added to hold those ``Product`` objects. "
"Again, this isn't done because Doctrine needs it, but instead because it "
"makes sense in the application for each ``Category`` to hold an array of "
"``Product`` objects."
msgstr ""

#: ../../book/doctrine.rst:978
msgid ""
"The code in the ``__construct()`` method is important because Doctrine "
"requires the ``$products`` property to be an ``ArrayCollection`` object. "
"This object looks and acts almost *exactly* like an array, but has some "
"added flexibility. If this makes you uncomfortable, don't worry. Just "
"imagine that it's an ``array`` and you'll be in good shape."
msgstr ""

#: ../../book/doctrine.rst:986
msgid ""
"The targetEntity value in the decorator used above can reference any entity "
"with a valid namespace, not just entities defined in the same namespace. To "
"relate to an entity defined in a different class or bundle, enter a full "
"namespace as the targetEntity."
msgstr ""

#: ../../book/doctrine.rst:991
msgid ""
"Next, since each ``Product`` class can relate to exactly one ``Category`` "
"object, you'll want to add a ``$category`` property to the ``Product`` "
"class:"
msgstr ""

#: ../../book/doctrine.rst:1048
msgid ""
"Finally, now that you've added a new property to both the ``Category`` and "
"``Product`` classes, tell Doctrine to generate the missing getter and setter"
" methods for you:"
msgstr ""

#: ../../book/doctrine.rst:1056
msgid ""
"Ignore the Doctrine metadata for a moment. You now have two classes - "
"``Category`` and ``Product`` with a natural one-to-many relationship. The "
"``Category`` class holds an array of ``Product`` objects and the ``Product``"
" object can hold one ``Category`` object. In other words - you've built your"
" classes in a way that makes sense for your needs. The fact that the data "
"needs to be persisted to a database is always secondary."
msgstr ""

#: ../../book/doctrine.rst:1063
msgid ""
"Now, look at the metadata above the ``$category`` property on the "
"``Product`` class. The information here tells Doctrine that the related "
"class is ``Category`` and that it should store the ``id`` of the category "
"record on a ``category_id`` field that lives on the ``product`` table. In "
"other words, the related ``Category`` object will be stored on the "
"``$category`` property, but behind the scenes, Doctrine will persist this "
"relationship by storing the category's id value on a ``category_id`` column "
"of the ``product`` table."
msgstr ""

#: ../../book/doctrine.rst:1074
msgid ""
"The metadata above the ``$products`` property of the ``Category`` object is "
"less important, and simply tells Doctrine to look at the "
"``Product.category`` property to figure out how the relationship is mapped."
msgstr ""

#: ../../book/doctrine.rst:1078
msgid ""
"Before you continue, be sure to tell Doctrine to add the new ``category`` "
"table, and ``product.category_id`` column, and new foreign key:"
msgstr ""

#: ../../book/doctrine.rst:1087
msgid ""
"This task should only be really used during development. For a more robust "
"method of systematically updating your production database, read about "
"`migrations`_."
msgstr ""

#: ../../book/doctrine.rst:1092
msgid "Saving Related Entities"
msgstr ""

#: ../../book/doctrine.rst:1094
msgid ""
"Now you can see this new code in action! Imagine you're inside a "
"controller::"
msgstr ""

#: ../../book/doctrine.rst:1128
msgid ""
"Now, a single row is added to both the ``category`` and ``product`` tables. "
"The ``product.category_id`` column for the new product is set to whatever "
"the ``id`` is of the new category. Doctrine manages the persistence of this "
"relationship for you."
msgstr ""

#: ../../book/doctrine.rst:1134
msgid "Fetching Related Objects"
msgstr ""

#: ../../book/doctrine.rst:1136
msgid ""
"When you need to fetch associated objects, your workflow looks just like it "
"did before. First, fetch a ``$product`` object and then access its related "
"``Category``::"
msgstr ""

#: ../../book/doctrine.rst:1151
msgid ""
"In this example, you first query for a ``Product`` object based on the "
"product's ``id``. This issues a query for *just* the product data and "
"hydrates the ``$product`` object with that data. Later, when you call "
"``$product->getCategory()->getName()``, Doctrine silently makes a second "
"query to find the ``Category`` that's related to this ``Product``. It "
"prepares the ``$category`` object and returns it to you."
msgstr ""

#: ../../book/doctrine.rst:1161
msgid ""
"What's important is the fact that you have easy access to the product's "
"related category, but the category data isn't actually retrieved until you "
"ask for the category (i.e. it's \"lazily loaded\")."
msgstr ""

#: ../../book/doctrine.rst:1165
msgid "You can also query in the other direction::"
msgstr ""

#: ../../book/doctrine.rst:1178
msgid ""
"In this case, the same things occurs: you first query out for a single "
"``Category`` object, and then Doctrine makes a second query to retrieve the "
"related ``Product`` objects, but only once/if you ask for them (i.e. when "
"you call ``->getProducts()``). The ``$products`` variable is an array of all"
" ``Product`` objects that relate to the given ``Category`` object via their "
"``category_id`` value."
msgstr ""

#: ../../book/doctrine.rst:0
msgid "Relationships and Proxy Classes"
msgstr ""

#: ../../book/doctrine.rst:1186
msgid ""
"This \"lazy loading\" is possible because, when necessary, Doctrine returns "
"a \"proxy\" object in place of the true object. Look again at the above "
"example::"
msgstr ""

#: ../../book/doctrine.rst:1199
msgid ""
"This proxy object extends the true ``Category`` object, and looks and acts "
"exactly like it. The difference is that, by using a proxy object, Doctrine "
"can delay querying for the real ``Category`` data until you actually need "
"that data (e.g. until you call ``$category->getName()``)."
msgstr ""

#: ../../book/doctrine.rst:1204
msgid ""
"The proxy classes are generated by Doctrine and stored in the cache "
"directory. And though you'll probably never even notice that your "
"``$category`` object is actually a proxy object, it's important to keep it "
"in mind."
msgstr ""

#: ../../book/doctrine.rst:1208
msgid ""
"In the next section, when you retrieve the product and category data all at "
"once (via a *join*), Doctrine will return the *true* ``Category`` object, "
"since nothing needs to be lazily loaded."
msgstr ""

#: ../../book/doctrine.rst:1213
msgid "Joining Related Records"
msgstr ""

#: ../../book/doctrine.rst:1215
msgid ""
"In the above examples, two queries were made - one for the original object "
"(e.g. a ``Category``) and one for the related object(s) (e.g. the "
"``Product`` objects)."
msgstr ""

#: ../../book/doctrine.rst:1221
msgid ""
"Remember that you can see all of the queries made during a request via the "
"web debug toolbar."
msgstr ""

#: ../../book/doctrine.rst:1224
msgid ""
"Of course, if you know up front that you'll need to access both objects, you"
" can avoid the second query by issuing a join in the original query. Add the"
" following method to the ``ProductRepository`` class::"
msgstr ""

#: ../../book/doctrine.rst:1245
msgid ""
"Now, you can use this method in your controller to query for a ``Product`` "
"object and its related ``Category`` with just one query::"
msgstr ""

#: ../../book/doctrine.rst:1260
msgid "More Information on Associations"
msgstr ""

#: ../../book/doctrine.rst:1262
msgid ""
"This section has been an introduction to one common type of entity "
"relationship, the one-to-many relationship. For more advanced details and "
"examples of how to use other types of relations (e.g. one-to-one, many-to-"
"many), see Doctrine's `Association Mapping Documentation`_."
msgstr ""

#: ../../book/doctrine.rst:1269
msgid ""
"If you're using annotations, you'll need to prepend all annotations with "
"``ORM\\`` (e.g. ``ORM\\OneToMany``), which is not reflected in Doctrine's "
"documentation. You'll also need to include the ``use Doctrine\\ORM\\Mapping "
"as ORM;`` statement, which *imports* the ``ORM`` annotations prefix."
msgstr ""

#: ../../book/doctrine.rst:1275
msgid "Configuration"
msgstr ""

#: ../../book/doctrine.rst:1277
msgid ""
"Doctrine is highly configurable, though you probably won't ever need to "
"worry about most of its options. To find out more about configuring "
"Doctrine, see the Doctrine section of the :doc:`config reference "
"</reference/configuration/doctrine>`."
msgstr ""

#: ../../book/doctrine.rst:1282
msgid "Lifecycle Callbacks"
msgstr ""

#: ../../book/doctrine.rst:1284
msgid ""
"Sometimes, you need to perform an action right before or after an entity is "
"inserted, updated, or deleted. These types of actions are known as "
"\"lifecycle\" callbacks, as they're callback methods that you need to "
"execute during different stages of the lifecycle of an entity (e.g. the "
"entity is inserted, updated, deleted, etc)."
msgstr ""

#: ../../book/doctrine.rst:1290
msgid ""
"If you're using annotations for your metadata, start by enabling the "
"lifecycle callbacks. This is not necessary if you're using YAML or XML for "
"your mapping."
msgstr ""

#: ../../book/doctrine.rst:1304
msgid ""
"Now, you can tell Doctrine to execute a method on any of the available "
"lifecycle events. For example, suppose you want to set a ``createdAt`` date "
"column to the current date, only when the entity is first persisted (i.e. "
"inserted):"
msgstr ""

#: ../../book/doctrine.rst:1350
msgid ""
"The above example assumes that you've created and mapped a ``createdAt`` "
"property (not shown here)."
msgstr ""

#: ../../book/doctrine.rst:1353
msgid ""
"Now, right before the entity is first persisted, Doctrine will automatically"
" call this method and the ``createdAt`` field will be set to the current "
"date."
msgstr ""

#: ../../book/doctrine.rst:1356
msgid ""
"There are several other lifecycle events that you can hook into. For more "
"information on other lifecycle events and lifecycle callbacks in general, "
"see Doctrine's `Lifecycle Events documentation`_."
msgstr ""

#: ../../book/doctrine.rst:0
msgid "Lifecycle Callbacks and Event Listeners"
msgstr ""

#: ../../book/doctrine.rst:1362
msgid ""
"Notice that the ``setCreatedAtValue()`` method receives no arguments. This "
"is always the case for lifecycle callbacks and is intentional: lifecycle "
"callbacks should be simple methods that are concerned with internally "
"transforming data in the entity (e.g. setting a created/updated field, "
"generating a slug value)."
msgstr ""

#: ../../book/doctrine.rst:1368
msgid ""
"If you need to do some heavier lifting - like performing logging or sending "
"an email - you should register an external class as an event listener or "
"subscriber and give it access to whatever resources you need. For more "
"information, see :doc:`/cookbook/doctrine/event_listeners_subscribers`."
msgstr ""

#: ../../book/doctrine.rst:1376
msgid "Doctrine Field Types Reference"
msgstr ""

#: ../../book/doctrine.rst:1378
msgid ""
"Doctrine comes with numerous field types available. Each of these maps a PHP"
" data type to a specific column type in whatever database you're using. For "
"each field type, the ``Column`` can be configured further, setting the "
"``length``, ``nullable`` behavior, ``name`` and other options. To see a list"
" of all available types and more information, see Doctrine's `Mapping Types "
"documentation`_."
msgstr ""

#: ../../book/doctrine.rst:1386
msgid "Summary"
msgstr ""

#: ../../book/doctrine.rst:1388
msgid ""
"With Doctrine, you can focus on your objects and how they're used in your "
"application and worry about database persistence second. This is because "
"Doctrine allows you to use any PHP object to hold your data and relies on "
"mapping metadata information to map an object's data to a particular "
"database table."
msgstr ""

#: ../../book/doctrine.rst:1394
msgid ""
"And even though Doctrine revolves around a simple concept, it's incredibly "
"powerful, allowing you to create complex queries and subscribe to events "
"that allow you to take different actions as objects go through their "
"persistence lifecycle."
msgstr ""

#: ../../book/doctrine.rst:1400
msgid "Learn more"
msgstr ""

#: ../../book/doctrine.rst:1402
msgid ""
"For more information about Doctrine, see the *Doctrine* section of the "
":doc:`cookbook </cookbook/index>`. Some useful articles might be:"
msgstr ""

#: ../../book/doctrine.rst:1405
msgid ":doc:`/cookbook/doctrine/common_extensions`"
msgstr ""

#: ../../book/doctrine.rst:1406
msgid ":doc:`/cookbook/doctrine/console`"
msgstr ""

#: ../../book/doctrine.rst:1407
msgid "`DoctrineFixturesBundle`_"
msgstr ""

#: ../../book/doctrine.rst:1408
msgid "`DoctrineMongoDBBundle`_"
msgstr ""

#: ../../book/doctrine.rst:1 ../../book/doctrine.rst:227
msgid "Doctrine"
msgstr ""

#: ../../book/doctrine.rst:227
msgid "Adding mapping metadata"
msgstr ""
