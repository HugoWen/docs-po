# 
msgid ""
msgstr ""
"Project-Id-Version: Symfony Framework Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-24 10:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../book/http_fundamentals.rst:7
msgid "Symfony and HTTP Fundamentals"
msgstr ""

#: ../../book/http_fundamentals.rst:9
msgid ""
"Congratulations! By learning about Symfony, you're well on your way towards "
"being a more *productive*, *well-rounded* and *popular* web developer "
"(actually, you're on your own for the last part). Symfony is built to get "
"back to basics: to develop tools that let you develop faster and build more "
"robust applications, while staying out of your way. Symfony is built on the "
"best ideas from many technologies: the tools and concepts you're about to "
"learn represent the efforts of thousands of people, over many years. In "
"other words, you're not just learning \"Symfony\", you're learning the "
"fundamentals of the web, development best practices and how to use many "
"amazing new PHP libraries, inside or independently of Symfony. So, get "
"ready."
msgstr ""

#: ../../book/http_fundamentals.rst:20
msgid ""
"True to the Symfony philosophy, this chapter begins by explaining the "
"fundamental concept common to web development: HTTP. Regardless of your "
"background or preferred programming language, this chapter is a **must-"
"read** for everyone."
msgstr ""

#: ../../book/http_fundamentals.rst:25
msgid "HTTP is Simple"
msgstr ""

#: ../../book/http_fundamentals.rst:27
msgid ""
"HTTP (Hypertext Transfer Protocol to the geeks) is a text language that "
"allows two machines to communicate with each other. That's it! For example, "
"when checking for the latest `xkcd`_ comic, the following (approximate) "
"conversation takes place:"
msgstr ""

#: ../../book/http_fundamentals.rst:35
msgid ""
"And while the actual language used is a bit more formal, it's still dead-"
"simple. HTTP is the term used to describe this simple text-based language. "
"No matter how you develop on the web, the goal of your server is *always* to"
" understand simple text requests, and return simple text responses."
msgstr ""

#: ../../book/http_fundamentals.rst:40
msgid ""
"Symfony is built from the ground up around that reality. Whether you realize"
" it or not, HTTP is something you use every day. With Symfony, you'll learn "
"how to master it."
msgstr ""

#: ../../book/http_fundamentals.rst:48
msgid "Step1: The Client Sends a Request"
msgstr ""

#: ../../book/http_fundamentals.rst:50
msgid ""
"Every conversation on the web starts with a *request*. The request is a text"
" message created by a client (e.g. a browser, a smartphone app, etc) in a "
"special format known as HTTP. The client sends that request to a server, and"
" then waits for the response."
msgstr ""

#: ../../book/http_fundamentals.rst:55
msgid ""
"Take a look at the first part of the interaction (the request) between a "
"browser and the xkcd web server:"
msgstr ""

#: ../../book/http_fundamentals.rst:61
msgid ""
"In HTTP-speak, this HTTP request would actually look something like this:"
msgstr ""

#: ../../book/http_fundamentals.rst:70
msgid ""
"This simple message communicates *everything* necessary about exactly which "
"resource the client is requesting. The first line of an HTTP request is the "
"most important and contains two things: the URI and the HTTP method."
msgstr ""

#: ../../book/http_fundamentals.rst:74
msgid ""
"The URI (e.g. ``/``, ``/contact``, etc) is the unique address or location "
"that identifies the resource the client wants. The HTTP method (e.g. "
"``GET``) defines what you want to *do* with the resource. The HTTP methods "
"are the *verbs* of the request and define the few common ways that you can "
"act upon the resource:"
msgstr ""

#: ../../book/http_fundamentals.rst:81
msgid "*GET*"
msgstr ""

#: ../../book/http_fundamentals.rst:81
msgid "Retrieve the resource from the server"
msgstr ""

#: ../../book/http_fundamentals.rst:83
msgid "*POST*"
msgstr ""

#: ../../book/http_fundamentals.rst:83
msgid "Create a resource on the server"
msgstr ""

#: ../../book/http_fundamentals.rst:85
msgid "*PUT*"
msgstr ""

#: ../../book/http_fundamentals.rst:85
msgid "Update the resource on the server"
msgstr ""

#: ../../book/http_fundamentals.rst:87
msgid "*DELETE*"
msgstr ""

#: ../../book/http_fundamentals.rst:87
msgid "Delete the resource from the server"
msgstr ""

#: ../../book/http_fundamentals.rst:90
msgid ""
"With this in mind, you can imagine what an HTTP request might look like to "
"delete a specific blog entry, for example:"
msgstr ""

#: ../../book/http_fundamentals.rst:99
msgid ""
"There are actually nine HTTP methods defined by the HTTP specification, but "
"many of them are not widely used or supported. In reality, many modern "
"browsers don't even support the ``PUT`` and ``DELETE`` methods."
msgstr ""

#: ../../book/http_fundamentals.rst:103
msgid ""
"In addition to the first line, an HTTP request invariably contains other "
"lines of information called request headers. The headers can supply a wide "
"range of information such as the requested ``Host``, the response formats "
"the client accepts (``Accept``) and the application the client is using to "
"make the request (``User-Agent``). Many other headers exist and can be found"
" on Wikipedia's `List of HTTP header fields`_ article."
msgstr ""

#: ../../book/http_fundamentals.rst:111
msgid "Step 2: The Server Returns a Response"
msgstr ""

#: ../../book/http_fundamentals.rst:113
msgid ""
"Once a server has received the request, it knows exactly which resource the "
"client needs (via the URI) and what the client wants to do with that "
"resource (via the method). For example, in the case of a GET request, the "
"server prepares the resource and returns it in an HTTP response. Consider "
"the response from the xkcd web server:"
msgstr ""

#: ../../book/http_fundamentals.rst:122
msgid ""
"Translated into HTTP, the response sent back to the browser will look "
"something like this:"
msgstr ""

#: ../../book/http_fundamentals.rst:136
msgid ""
"The HTTP response contains the requested resource (the HTML content in this "
"case), as well as other information about the response. The first line is "
"especially important and contains the HTTP response status code (200 in this"
" case). The status code communicates the overall outcome of the request back"
" to the client. Was the request successful? Was there an error? Different "
"status codes exist that indicate success, an error, or that the client needs"
" to do something (e.g. redirect to another page). A full list can be found "
"on Wikipedia's `List of HTTP status codes`_ article."
msgstr ""

#: ../../book/http_fundamentals.rst:145
msgid ""
"Like the request, an HTTP response contains additional pieces of information"
" known as HTTP headers. For example, one important HTTP response header is "
"``Content-Type``. The body of the same resource could be returned in "
"multiple different formats like HTML, XML, or JSON and the ``Content-Type`` "
"header uses Internet Media Types like ``text/html`` to tell the client which"
" format is being returned. A list of common media types can be found on "
"Wikipedia's `List of common media types`_ article."
msgstr ""

#: ../../book/http_fundamentals.rst:153
msgid ""
"Many other headers exist, some of which are very powerful. For example, "
"certain headers can be used to create a powerful caching system."
msgstr ""

#: ../../book/http_fundamentals.rst:157
msgid "Requests, Responses and Web Development"
msgstr ""

#: ../../book/http_fundamentals.rst:159
msgid ""
"This request-response conversation is the fundamental process that drives "
"all communication on the web. And as important and powerful as this process "
"is, it's inescapably simple."
msgstr ""

#: ../../book/http_fundamentals.rst:163
msgid ""
"The most important fact is this: regardless of the language you use, the "
"type of application you build (web, mobile, JSON API) or the development "
"philosophy you follow, the end goal of an application is **always** to "
"understand each request and create and return the appropriate response."
msgstr ""

#: ../../book/http_fundamentals.rst:168
msgid "Symfony is architected to match this reality."
msgstr ""

#: ../../book/http_fundamentals.rst:172
msgid ""
"To learn more about the HTTP specification, read the original `HTTP 1.1 "
"RFC`_ or the `HTTP Bis`_, which is an active effort to clarify the original "
"specification. A great tool to check both the request and response headers "
"while browsing is the `Live HTTP Headers`_ extension for Firefox."
msgstr ""

#: ../../book/http_fundamentals.rst:181
msgid "Requests and Responses in PHP"
msgstr ""

#: ../../book/http_fundamentals.rst:183
msgid ""
"So how do you interact with the \"request\" and create a \"response\" when "
"using PHP? In reality, PHP abstracts you a bit from the whole process::"
msgstr ""

#: ../../book/http_fundamentals.rst:193
msgid ""
"As strange as it sounds, this small application is in fact taking "
"information from the HTTP request and using it to create an HTTP response. "
"Instead of parsing the raw HTTP request message, PHP prepares superglobal "
"variables such as ``$_SERVER`` and ``$_GET`` that contain all the "
"information from the request. Similarly, instead of returning the HTTP-"
"formatted text response, you can use the ``header()`` function to create "
"response headers and simply print out the actual content that will be the "
"content portion of the response message. PHP will create a true HTTP "
"response and return it to the client:"
msgstr ""

#: ../../book/http_fundamentals.rst:213
msgid "Requests and Responses in Symfony"
msgstr ""

#: ../../book/http_fundamentals.rst:215
msgid ""
"Symfony provides an alternative to the raw PHP approach via two classes that"
" allow you to interact with the HTTP request and response in an easier way. "
"The :class:`Symfony\\\\Component\\\\HttpFoundation\\\\Request` class is a "
"simple object-oriented representation of the HTTP request message. With it, "
"you have all the request information at your fingertips::"
msgstr ""

#: ../../book/http_fundamentals.rst:248
msgid ""
"As a bonus, the ``Request`` class does a lot of work in the background that "
"you'll never need to worry about. For example, the ``isSecure()`` method "
"checks the *three* different values in PHP that can indicate whether or not "
"the user is connecting via a secured connection (i.e. HTTPS)."
msgstr ""

#: ../../book/http_fundamentals.rst:0
msgid "ParameterBags and Request Attributes"
msgstr ""

#: ../../book/http_fundamentals.rst:255
msgid ""
"As seen above, the ``$_GET`` and ``$_POST`` variables are accessible via the"
" public ``query`` and ``request`` properties respectively. Each of these "
"objects is a :class:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag`"
" object, which has methods like "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::get`, "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::has`, "
":method:`Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag::all` and "
"more. In fact, every public property used in the previous example is some "
"instance of the ParameterBag."
msgstr ""

#: ../../book/http_fundamentals.rst:267
msgid ""
"The Request class also has a public ``attributes`` property, which holds "
"special data related to how the application works internally. For the "
"Symfony framework, the ``attributes`` holds the values returned by the "
"matched route, like ``_controller``, ``id`` (if you have an ``{id}`` "
"wildcard), and even the name of the matched route (``_route``). The "
"``attributes`` property exists entirely to be a place where you can prepare "
"and store context-specific information about the request."
msgstr ""

#: ../../book/http_fundamentals.rst:275
msgid ""
"Symfony also provides a ``Response`` class: a simple PHP representation of "
"an HTTP response message. This allows your application to use an object-"
"oriented interface to construct the response that needs to be returned to "
"the client::"
msgstr ""

#: ../../book/http_fundamentals.rst:290
msgid ""
"If Symfony offered nothing else, you would already have a toolkit for easily"
" accessing request information and an object-oriented interface for creating"
" the response. Even as you learn the many powerful features in Symfony, keep"
" in mind that the goal of your application is always *to interpret a request"
" and create the appropriate response based on your application logic*."
msgstr ""

#: ../../book/http_fundamentals.rst:298
msgid ""
"The ``Request`` and ``Response`` classes are part of a standalone component "
"included with Symfony called HttpFoundation. This component can be used "
"entirely independently of Symfony and also provides classes for handling "
"sessions and file uploads."
msgstr ""

#: ../../book/http_fundamentals.rst:304
msgid "The Journey from the Request to the Response"
msgstr ""

#: ../../book/http_fundamentals.rst:306
msgid ""
"Like HTTP itself, the ``Request`` and ``Response`` objects are pretty "
"simple. The hard part of building an application is writing what comes in "
"between. In other words, the real work comes in writing the code that "
"interprets the request information and creates the response."
msgstr ""

#: ../../book/http_fundamentals.rst:311
msgid ""
"Your application probably does many things, like sending emails, handling "
"form submissions, saving things to a database, rendering HTML pages and "
"protecting content with security. How can you manage all of this and still "
"keep your code organized and maintainable?"
msgstr ""

#: ../../book/http_fundamentals.rst:316
msgid "Symfony was created to solve these problems so that you don't have to."
msgstr ""

#: ../../book/http_fundamentals.rst:319
msgid "The Front Controller"
msgstr ""

#: ../../book/http_fundamentals.rst:321
msgid ""
"Traditionally, applications were built so that each \"page\" of a site was "
"its own physical file:"
msgstr ""

#: ../../book/http_fundamentals.rst:330
msgid ""
"There are several problems with this approach, including the inflexibility "
"of the URLs (what if you wanted to change ``blog.php`` to ``news.php`` "
"without breaking all of your links?) and the fact that each file *must* "
"manually include some set of core files so that security, database "
"connections and the \"look\" of the site can remain consistent."
msgstr ""

#: ../../book/http_fundamentals.rst:336
msgid ""
"A much better solution is to use a :term:`front controller`: a single PHP "
"file that handles every request coming into your application. For example:"
msgstr ""

#: ../../book/http_fundamentals.rst:340
msgid "``/index.php``"
msgstr ""

#: ../../book/http_fundamentals.rst:340 ../../book/http_fundamentals.rst:342
#: ../../book/http_fundamentals.rst:344
msgid "executes ``index.php``"
msgstr ""

#: ../../book/http_fundamentals.rst:342
msgid "``/index.php/contact``"
msgstr ""

#: ../../book/http_fundamentals.rst:344
msgid "``/index.php/blog``"
msgstr ""

#: ../../book/http_fundamentals.rst:349
msgid ""
"Using Apache's ``mod_rewrite`` (or equivalent with other web servers), the "
"URLs can easily be cleaned up to be just ``/``, ``/contact`` and ``/blog``."
msgstr ""

#: ../../book/http_fundamentals.rst:353
msgid ""
"Now, every request is handled exactly the same way. Instead of individual "
"URLs executing different PHP files, the front controller is *always* "
"executed, and the routing of different URLs to different parts of your "
"application is done internally. This solves both problems with the original "
"approach. Almost all modern web apps do this - including apps like "
"WordPress."
msgstr ""

#: ../../book/http_fundamentals.rst:360
msgid "Stay Organized"
msgstr ""

#: ../../book/http_fundamentals.rst:362
msgid ""
"Inside your front controller, you have to figure out which code should be "
"executed and what the content to return should be. To figure this out, "
"you'll need to check the incoming URI and execute different parts of your "
"code depending on that value. This can get ugly quickly::"
msgstr ""

#: ../../book/http_fundamentals.rst:383
msgid ""
"Solving this problem can be difficult. Fortunately it's *exactly* what "
"Symfony is designed to do."
msgstr ""

#: ../../book/http_fundamentals.rst:387
msgid "The Symfony Application Flow"
msgstr ""

#: ../../book/http_fundamentals.rst:389
msgid ""
"When you let Symfony handle each request, life is much easier. Symfony "
"follows the same simple pattern for every request:"
msgstr ""

#: ../../book/http_fundamentals.rst:398
msgid ""
"Incoming requests are interpreted by the routing and passed to controller "
"functions that return ``Response`` objects."
msgstr ""

#: ../../book/http_fundamentals.rst:401
msgid ""
"Each \"page\" of your site is defined in a routing configuration file that "
"maps different URLs to different PHP functions. The job of each PHP "
"function, called a :term:`controller`, is to use information from the "
"request - along with many other tools Symfony makes available - to create "
"and return a ``Response`` object. In other words, the controller is where "
"*your* code goes: it's where you interpret the request and create a "
"response."
msgstr ""

#: ../../book/http_fundamentals.rst:408
msgid "It's that easy! To review:"
msgstr ""

#: ../../book/http_fundamentals.rst:410
msgid "Each request executes a front controller file;"
msgstr ""

#: ../../book/http_fundamentals.rst:412
msgid ""
"The routing system determines which PHP function should be executed based on"
" information from the request and routing configuration you've created;"
msgstr ""

#: ../../book/http_fundamentals.rst:415
msgid ""
"The correct PHP function is executed, where your code creates and returns "
"the appropriate ``Response`` object."
msgstr ""

#: ../../book/http_fundamentals.rst:419
msgid "A Symfony Request in Action"
msgstr ""

#: ../../book/http_fundamentals.rst:421
msgid ""
"Without diving into too much detail, here is this process in action. Suppose"
" you want to add a ``/contact`` page to your Symfony application. First, "
"start by adding an entry for ``/contact`` to your routing configuration "
"file:"
msgstr ""

#: ../../book/http_fundamentals.rst:461
msgid ""
"When someone visits the ``/contact`` page, this route is matched, and the "
"specified controller is executed. As you'll learn in the :doc:`routing "
"chapter </book/routing>`, the ``AppBundle:Main:contact`` string is a short "
"syntax that points to a specific PHP method ``contactAction`` inside a class"
" called ``MainController``::"
msgstr ""

#: ../../book/http_fundamentals.rst:479
msgid ""
"In this very simple example, the controller simply creates a "
":class:`Symfony\\\\Component\\\\HttpFoundation\\\\Response` object with the "
"HTML ``<h1>Contact us!</h1>``. In the :doc:`controller chapter "
"</book/controller>`, you'll learn how a controller can render templates, "
"allowing your \"presentation\" code (i.e. anything that actually writes out "
"HTML) to live in a separate template file. This frees up the controller to "
"worry only about the hard stuff: interacting with the database, handling "
"submitted data, or sending email messages."
msgstr ""

#: ../../book/http_fundamentals.rst:491
msgid "Symfony: Build your App, not your Tools"
msgstr ""

#: ../../book/http_fundamentals.rst:493
msgid ""
"You now know that the goal of any app is to interpret each incoming request "
"and create an appropriate response. As an application grows, it becomes more"
" difficult to keep your code organized and maintainable. Invariably, the "
"same complex tasks keep coming up over and over again: persisting things to "
"the database, rendering and reusing templates, handling form submissions, "
"sending emails, validating user input and handling security."
msgstr ""

#: ../../book/http_fundamentals.rst:500
msgid ""
"The good news is that none of these problems is unique. Symfony provides a "
"framework full of tools that allow you to build your application, not your "
"tools. With Symfony, nothing is imposed on you: you're free to use the full "
"Symfony framework, or just one piece of Symfony all by itself."
msgstr ""

#: ../../book/http_fundamentals.rst:511
msgid "Standalone Tools: The Symfony *Components*"
msgstr ""

#: ../../book/http_fundamentals.rst:513
msgid ""
"So what *is* Symfony? First, Symfony is a collection of over twenty "
"independent libraries that can be used inside *any* PHP project. These "
"libraries, called the *Symfony Components*, contain something useful for "
"almost any situation, regardless of how your project is developed. To name a"
" few:"
msgstr ""

#: ../../book/http_fundamentals.rst:520
msgid ":doc:`HttpFoundation </components/http_foundation/introduction>`"
msgstr ""

#: ../../book/http_fundamentals.rst:519
msgid ""
"Contains the ``Request`` and ``Response`` classes, as well as other classes "
"for handling sessions and file uploads."
msgstr ""

#: ../../book/http_fundamentals.rst:525
msgid ":doc:`Routing </components/routing/introduction>`"
msgstr ""

#: ../../book/http_fundamentals.rst:523
msgid ""
"Powerful and fast routing system that allows you to map a specific URI (e.g."
" ``/contact``) to some information about how that request should be handled "
"(e.g. execute the ``contactAction()`` method)."
msgstr ""

#: ../../book/http_fundamentals.rst:529
msgid ":doc:`Form </components/form/introduction>`"
msgstr ""

#: ../../book/http_fundamentals.rst:528
msgid ""
"A full-featured and flexible framework for creating forms and handling form "
"submissions."
msgstr ""

#: ../../book/http_fundamentals.rst:533
msgid "`Validator`_"
msgstr ""

#: ../../book/http_fundamentals.rst:532
msgid ""
"A system for creating rules about data and then validating whether or not "
"user-submitted data follows those rules."
msgstr ""

#: ../../book/http_fundamentals.rst:537
msgid ":doc:`Templating </components/templating/introduction>`"
msgstr ""

#: ../../book/http_fundamentals.rst:536
msgid ""
"A toolkit for rendering templates, handling template inheritance (i.e. a "
"template is decorated with a layout) and performing other common template "
"tasks."
msgstr ""

#: ../../book/http_fundamentals.rst:540
msgid ":doc:`Security </components/security/introduction>`"
msgstr ""

#: ../../book/http_fundamentals.rst:540
msgid ""
"A powerful library for handling all types of security inside an application."
msgstr ""

#: ../../book/http_fundamentals.rst:543
msgid ":doc:`Translation </components/translation/introduction>`"
msgstr ""

#: ../../book/http_fundamentals.rst:543
msgid "A framework for translating strings in your application."
msgstr ""

#: ../../book/http_fundamentals.rst:545
msgid ""
"Each one of these components is decoupled and can be used in *any* PHP "
"project, regardless of whether or not you use the Symfony framework. Every "
"part is made to be used if needed and replaced when necessary."
msgstr ""

#: ../../book/http_fundamentals.rst:552
msgid "The Full Solution: The Symfony *Framework*"
msgstr ""

#: ../../book/http_fundamentals.rst:554
msgid ""
"So then, what *is* the Symfony *Framework*? The *Symfony Framework* is a PHP"
" library that accomplishes two distinct tasks:"
msgstr ""

#: ../../book/http_fundamentals.rst:557
msgid ""
"Provides a selection of components (i.e. the Symfony Components) and third-"
"party libraries (e.g. `Swift Mailer`_ for sending emails);"
msgstr ""

#: ../../book/http_fundamentals.rst:560
msgid ""
"Provides sensible configuration and a \"glue\" library that ties all of "
"these pieces together."
msgstr ""

#: ../../book/http_fundamentals.rst:563
msgid ""
"The goal of the framework is to integrate many independent tools in order to"
" provide a consistent experience for the developer. Even the framework "
"itself is a Symfony bundle (i.e. a plugin) that can be configured or "
"replaced entirely."
msgstr ""

#: ../../book/http_fundamentals.rst:568
msgid ""
"Symfony provides a powerful set of tools for rapidly developing web "
"applications without imposing on your application. Normal users can quickly "
"start development by using a Symfony distribution, which provides a project "
"skeleton with sensible defaults. For more advanced users, the sky is the "
"limit."
msgstr ""

#: ../../book/http_fundamentals.rst:1 ../../book/http_fundamentals.rst:177
msgid "Symfony Fundamentals"
msgstr ""

#: ../../book/http_fundamentals.rst:44
msgid "HTTP"
msgstr ""

#: ../../book/http_fundamentals.rst:44
msgid "Request-response paradigm"
msgstr ""

#: ../../book/http_fundamentals.rst:177
msgid "Requests and responses"
msgstr ""

#: ../../book/http_fundamentals.rst:505
msgid "Symfony Components"
msgstr ""
